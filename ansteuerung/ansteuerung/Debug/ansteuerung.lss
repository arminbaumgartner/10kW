
ansteuerung.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00001e68  00001efc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  00800126  00800126  00001f22  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00001fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c33  00000000  00000000  00002190  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001081  00000000  00000000  00003dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013c0  00000000  00000000  00004e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000584  00000000  00000000  00006204  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ace  00000000  00000000  00006788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c74  00000000  00000000  00007256  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00007eca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__vector_1>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__vector_9>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 be 02 	jmp	0x57c	; 0x57c <__vector_20>
      54:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__vector_21>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__vector_25>
      68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      74:	0c 94 28 09 	jmp	0x1250	; 0x1250 <__vector_29>
      78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      80:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__vector_32>
      84:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__vector_33>
      88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	da e0       	ldi	r29, 0x0A	; 10
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	e8 e6       	ldi	r30, 0x68	; 104
      c0:	fe e1       	ldi	r31, 0x1E	; 30
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a6 32       	cpi	r26, 0x26	; 38
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	21 e0       	ldi	r18, 0x01	; 1
      d0:	a6 e2       	ldi	r26, 0x26	; 38
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a4 37       	cpi	r26, 0x74	; 116
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <main>
      e2:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <Init_Timer1>:
char ausgabe[10];


void Init_Timer1 (void)
{
	TCCR1B = TCCR1B | (1<<CS10);		// Teiler 256 (16MHz / 64 = 4µs)
      ea:	e1 e8       	ldi	r30, 0x81	; 129
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	80 81       	ld	r24, Z
      f0:	81 60       	ori	r24, 0x01	; 1
      f2:	80 83       	st	Z, r24
	TCCR1B = TCCR1B | (1<<CS11);		//Kleiner Schritt 4µs		(1*4µs)
      f4:	80 81       	ld	r24, Z
      f6:	82 60       	ori	r24, 0x02	; 2
      f8:	80 83       	st	Z, r24
	TCCR1B = TCCR1B &~ (1<<CS12);		//Größter Schritt 262ms	(65535*4µs)
      fa:	80 81       	ld	r24, Z
      fc:	8b 7f       	andi	r24, 0xFB	; 251
      fe:	80 83       	st	Z, r24
	
	TIMSK1 = TIMSK1 | (1<<TOIE1);		//OVERFLOW-Interrupt aktivieren
     100:	ef e6       	ldi	r30, 0x6F	; 111
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	80 81       	ld	r24, Z
     106:	81 60       	ori	r24, 0x01	; 1
     108:	80 83       	st	Z, r24
     10a:	08 95       	ret

0000010c <geschwindigkeit_auslesen>:
}
void geschwindigkeit_auslesen(void)
{
	
	overflow = 0;
     10c:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <overflow>
	steps = TCNT1;
     110:	e4 e8       	ldi	r30, 0x84	; 132
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	91 81       	ldd	r25, Z+1	; 0x01
     118:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <steps+0x1>
     11c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <steps>
	TCNT1 = 0;
     120:	11 82       	std	Z+1, r1	; 0x01
     122:	10 82       	st	Z, r1
     124:	08 95       	ret

00000126 <drehzahl_berechnung>:
	

}
void drehzahl_berechnung (void)
{
     126:	8f 92       	push	r8
     128:	9f 92       	push	r9
     12a:	af 92       	push	r10
     12c:	bf 92       	push	r11
     12e:	cf 92       	push	r12
     130:	df 92       	push	r13
     132:	ef 92       	push	r14
     134:	ff 92       	push	r15
	if(overflow)
     136:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <overflow>
     13a:	88 23       	and	r24, r24
     13c:	e9 f0       	breq	.+58     	; 0x178 <drehzahl_berechnung+0x52>
	{
		steps = 0;
     13e:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <steps+0x1>
     142:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <steps>
		drehzahl = 0;
     146:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <drehzahl>
     14a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <drehzahl+0x1>
     14e:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <drehzahl+0x2>
     152:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <drehzahl+0x3>
		drehzahl_pro_sekunde = 0;
     156:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <drehzahl_pro_sekunde>
     15a:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <drehzahl_pro_sekunde+0x1>
     15e:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <drehzahl_pro_sekunde+0x2>
     162:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <drehzahl_pro_sekunde+0x3>
		step_dauer = 0;
     166:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <step_dauer>
     16a:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <step_dauer+0x1>
     16e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <step_dauer+0x2>
     172:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <step_dauer+0x3>
     176:	b6 c0       	rjmp	.+364    	; 0x2e4 <drehzahl_berechnung+0x1be>
	}
	else
	{
		if(steps <= 25)			//Geschwindigkeits überhohung abfangen -> 25*4 = 100
     178:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <steps>
     17c:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <steps+0x1>
     180:	4a 97       	sbiw	r24, 0x1a	; 26
     182:	30 f4       	brcc	.+12     	; 0x190 <drehzahl_berechnung+0x6a>
		{
			steps = 25;
     184:	89 e1       	ldi	r24, 0x19	; 25
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <steps+0x1>
     18c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <steps>
		}
		
		
		if(steps >= 15500)		//Geschwindigkeits unterschreitung -> 13.750 nötig um 1 U/s zu generieren
     190:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <steps>
     194:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <steps+0x1>
     198:	8c 38       	cpi	r24, 0x8C	; 140
     19a:	9c 43       	sbci	r25, 0x3C	; 60
     19c:	30 f0       	brcs	.+12     	; 0x1aa <drehzahl_berechnung+0x84>
		{
			steps=15500;
     19e:	8c e8       	ldi	r24, 0x8C	; 140
     1a0:	9c e3       	ldi	r25, 0x3C	; 60
     1a2:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <steps+0x1>
     1a6:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <steps>
		}
		

		step_dauer = steps*timer1_teiler_mult;		//Werte von max 55.000µs um auf 1U/s zu kommen
     1aa:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <steps>
     1ae:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <steps+0x1>
     1b2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <timer1_teiler_mult>
     1b6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <timer1_teiler_mult+0x1>
     1ba:	28 9f       	mul	r18, r24
     1bc:	b0 01       	movw	r22, r0
     1be:	29 9f       	mul	r18, r25
     1c0:	70 0d       	add	r23, r0
     1c2:	38 9f       	mul	r19, r24
     1c4:	70 0d       	add	r23, r0
     1c6:	11 24       	eor	r1, r1
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__floatunsisf>
     1d0:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <step_dauer>
     1d4:	70 93 4d 01 	sts	0x014D, r23	; 0x80014d <step_dauer+0x1>
     1d8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <step_dauer+0x2>
     1dc:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <step_dauer+0x3>
		step_dauer = step_dauer/100;				//Werte von 1 bis 550				///////ab hier korriegieren /// Teiler vieleicht auf 64 statt 256
     1e0:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <step_dauer>
     1e4:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <step_dauer+0x1>
     1e8:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <step_dauer+0x2>
     1ec:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <step_dauer+0x3>
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	48 ec       	ldi	r20, 0xC8	; 200
     1f6:	52 e4       	ldi	r21, 0x42	; 66
     1f8:	0e 94 01 0a 	call	0x1402	; 0x1402 <__divsf3>
     1fc:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <step_dauer>
     200:	70 93 4d 01 	sts	0x014D, r23	; 0x80014d <step_dauer+0x1>
     204:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <step_dauer+0x2>
     208:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <step_dauer+0x3>
		
		
		step_dauer_help = (step_dauer*6*motor_teiler);	//Werte von 18 bis 9900
     20c:	80 90 4c 01 	lds	r8, 0x014C	; 0x80014c <step_dauer>
     210:	90 90 4d 01 	lds	r9, 0x014D	; 0x80014d <step_dauer+0x1>
     214:	a0 90 4e 01 	lds	r10, 0x014E	; 0x80014e <step_dauer+0x2>
     218:	b0 90 4f 01 	lds	r11, 0x014F	; 0x80014f <step_dauer+0x3>
     21c:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <motor_teiler>
     220:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <motor_teiler+0x1>
     224:	07 2e       	mov	r0, r23
     226:	00 0c       	add	r0, r0
     228:	88 0b       	sbc	r24, r24
     22a:	99 0b       	sbc	r25, r25
     22c:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__floatsisf>
     230:	6b 01       	movw	r12, r22
     232:	7c 01       	movw	r14, r24
     234:	20 e0       	ldi	r18, 0x00	; 0
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	40 ec       	ldi	r20, 0xC0	; 192
     23a:	50 e4       	ldi	r21, 0x40	; 64
     23c:	c5 01       	movw	r24, r10
     23e:	b4 01       	movw	r22, r8
     240:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__mulsf3>
     244:	9b 01       	movw	r18, r22
     246:	ac 01       	movw	r20, r24
     248:	c7 01       	movw	r24, r14
     24a:	b6 01       	movw	r22, r12
     24c:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__mulsf3>
     250:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <step_dauer_help>
     254:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <step_dauer_help+0x1>
     258:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <step_dauer_help+0x2>
     25c:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <step_dauer_help+0x3>
		step_dauer_help = step_dauer_help/10;			//Werte von 1 bis 990
     260:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <step_dauer_help>
     264:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <step_dauer_help+0x1>
     268:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <step_dauer_help+0x2>
     26c:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <step_dauer_help+0x3>
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	40 e2       	ldi	r20, 0x20	; 32
     276:	51 e4       	ldi	r21, 0x41	; 65
     278:	0e 94 01 0a 	call	0x1402	; 0x1402 <__divsf3>
     27c:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <step_dauer_help>
     280:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <step_dauer_help+0x1>
     284:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <step_dauer_help+0x2>
     288:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <step_dauer_help+0x3>
		
		drehzahl_pro_sekunde = 1000/step_dauer_help;	//Werte von 1 bis 1000
     28c:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <step_dauer_help>
     290:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <step_dauer_help+0x1>
     294:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <step_dauer_help+0x2>
     298:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <step_dauer_help+0x3>
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	8a e7       	ldi	r24, 0x7A	; 122
     2a2:	94 e4       	ldi	r25, 0x44	; 68
     2a4:	0e 94 01 0a 	call	0x1402	; 0x1402 <__divsf3>
     2a8:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <drehzahl_pro_sekunde>
     2ac:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <drehzahl_pro_sekunde+0x1>
     2b0:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <drehzahl_pro_sekunde+0x2>
     2b4:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <drehzahl_pro_sekunde+0x3>
		
		drehzahl = drehzahl_pro_sekunde*60;
     2b8:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <drehzahl_pro_sekunde>
     2bc:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <drehzahl_pro_sekunde+0x1>
     2c0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <drehzahl_pro_sekunde+0x2>
     2c4:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <drehzahl_pro_sekunde+0x3>
     2c8:	20 e0       	ldi	r18, 0x00	; 0
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	40 e7       	ldi	r20, 0x70	; 112
     2ce:	52 e4       	ldi	r21, 0x42	; 66
     2d0:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__mulsf3>
     2d4:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <drehzahl>
     2d8:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <drehzahl+0x1>
     2dc:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <drehzahl+0x2>
     2e0:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <drehzahl+0x3>
	
	}
}
     2e4:	ff 90       	pop	r15
     2e6:	ef 90       	pop	r14
     2e8:	df 90       	pop	r13
     2ea:	cf 90       	pop	r12
     2ec:	bf 90       	pop	r11
     2ee:	af 90       	pop	r10
     2f0:	9f 90       	pop	r9
     2f2:	8f 90       	pop	r8
     2f4:	08 95       	ret

000002f6 <geschwindigkeit_berechnung>:
void geschwindigkeit_berechnung(void)
{
     2f6:	8f 92       	push	r8
     2f8:	9f 92       	push	r9
     2fa:	af 92       	push	r10
     2fc:	bf 92       	push	r11
     2fe:	cf 92       	push	r12
     300:	df 92       	push	r13
     302:	ef 92       	push	r14
     304:	ff 92       	push	r15
	
	if(overflow)
     306:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <overflow>
     30a:	88 23       	and	r24, r24
     30c:	29 f1       	breq	.+74     	; 0x358 <geschwindigkeit_berechnung+0x62>
	{
		steps = 0;
     30e:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <steps+0x1>
     312:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <steps>
		geschwindigkeit = 0;
     316:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <geschwindigkeit>
     31a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <geschwindigkeit+0x1>
     31e:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <geschwindigkeit+0x2>
     322:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <geschwindigkeit+0x3>
		drehzahl = 0;
     326:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <drehzahl>
     32a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <drehzahl+0x1>
     32e:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <drehzahl+0x2>
     332:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <drehzahl+0x3>
		drehzahl_pro_sekunde = 0;
     336:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <drehzahl_pro_sekunde>
     33a:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <drehzahl_pro_sekunde+0x1>
     33e:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <drehzahl_pro_sekunde+0x2>
     342:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <drehzahl_pro_sekunde+0x3>
		step_dauer = 0;
     346:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <step_dauer>
     34a:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <step_dauer+0x1>
     34e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <step_dauer+0x2>
     352:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <step_dauer+0x3>
     356:	86 c0       	rjmp	.+268    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
	
		drehzahl = drehzahl_pro_sekunde*60;
		
		*/
		
		drehzahl_ausgabe_01 = (uint16_t)drehzahl;
     358:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <drehzahl>
     35c:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <drehzahl+0x1>
     360:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <drehzahl+0x2>
     364:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <drehzahl+0x3>
     368:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__fixunssfsi>
     36c:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <drehzahl_ausgabe_01+0x1>
     370:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <drehzahl_ausgabe_01>
	
		geschwindigkeit_help = ((drehzahl_pro_sekunde*raddurchmesser*3.14)/uebersetzung) * 3.6;
     374:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <drehzahl_pro_sekunde>
     378:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <drehzahl_pro_sekunde+0x1>
     37c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <drehzahl_pro_sekunde+0x2>
     380:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <drehzahl_pro_sekunde+0x3>
     384:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
     388:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
     38c:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_start+0x2>
     390:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_start+0x3>
     394:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <uebersetzung>
     398:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <uebersetzung+0x1>
     39c:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <uebersetzung+0x2>
     3a0:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <uebersetzung+0x3>
     3a4:	a5 01       	movw	r20, r10
     3a6:	94 01       	movw	r18, r8
     3a8:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__mulsf3>
     3ac:	23 ec       	ldi	r18, 0xC3	; 195
     3ae:	35 ef       	ldi	r19, 0xF5	; 245
     3b0:	48 e4       	ldi	r20, 0x48	; 72
     3b2:	50 e4       	ldi	r21, 0x40	; 64
     3b4:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__mulsf3>
     3b8:	a7 01       	movw	r20, r14
     3ba:	96 01       	movw	r18, r12
     3bc:	0e 94 01 0a 	call	0x1402	; 0x1402 <__divsf3>
     3c0:	26 e6       	ldi	r18, 0x66	; 102
     3c2:	36 e6       	ldi	r19, 0x66	; 102
     3c4:	46 e6       	ldi	r20, 0x66	; 102
     3c6:	50 e4       	ldi	r21, 0x40	; 64
     3c8:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__mulsf3>
     3cc:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <geschwindigkeit_help>
     3d0:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <geschwindigkeit_help+0x1>
     3d4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <geschwindigkeit_help+0x2>
     3d8:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <geschwindigkeit_help+0x3>
	
	
		//drehzahl = ceil(drehzahl);
	
		geschwindigkeit_help = ((drehzahl_pro_sekunde * raddurchmesser * 3.14) / uebersetzung) * 3.6;
     3dc:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <drehzahl_pro_sekunde>
     3e0:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <drehzahl_pro_sekunde+0x1>
     3e4:	40 91 56 01 	lds	r20, 0x0156	; 0x800156 <drehzahl_pro_sekunde+0x2>
     3e8:	50 91 57 01 	lds	r21, 0x0157	; 0x800157 <drehzahl_pro_sekunde+0x3>
     3ec:	c5 01       	movw	r24, r10
     3ee:	b4 01       	movw	r22, r8
     3f0:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__mulsf3>
     3f4:	23 ec       	ldi	r18, 0xC3	; 195
     3f6:	35 ef       	ldi	r19, 0xF5	; 245
     3f8:	48 e4       	ldi	r20, 0x48	; 72
     3fa:	50 e4       	ldi	r21, 0x40	; 64
     3fc:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__mulsf3>
     400:	a7 01       	movw	r20, r14
     402:	96 01       	movw	r18, r12
     404:	0e 94 01 0a 	call	0x1402	; 0x1402 <__divsf3>
     408:	26 e6       	ldi	r18, 0x66	; 102
     40a:	36 e6       	ldi	r19, 0x66	; 102
     40c:	46 e6       	ldi	r20, 0x66	; 102
     40e:	50 e4       	ldi	r21, 0x40	; 64
     410:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__mulsf3>
     414:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <geschwindigkeit_help>
     418:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <geschwindigkeit_help+0x1>
     41c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <geschwindigkeit_help+0x2>
     420:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <geschwindigkeit_help+0x3>
		geschwindigkeit = ceil (geschwindigkeit_help);
     424:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <geschwindigkeit_help>
     428:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <geschwindigkeit_help+0x1>
     42c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <geschwindigkeit_help+0x2>
     430:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <geschwindigkeit_help+0x3>
     434:	0e 94 e5 09 	call	0x13ca	; 0x13ca <ceil>
     438:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <geschwindigkeit>
     43c:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <geschwindigkeit+0x1>
     440:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <geschwindigkeit+0x2>
     444:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <geschwindigkeit+0x3>
		
		geschwindigkeit_ausgabe = (uint16_t)geschwindigkeit;
     448:	60 91 35 01 	lds	r22, 0x0135	; 0x800135 <geschwindigkeit>
     44c:	70 91 36 01 	lds	r23, 0x0136	; 0x800136 <geschwindigkeit+0x1>
     450:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <geschwindigkeit+0x2>
     454:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <geschwindigkeit+0x3>
     458:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__fixunssfsi>
     45c:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <geschwindigkeit_ausgabe+0x1>
     460:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <geschwindigkeit_ausgabe>
	
		}
	
	
}
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	df 90       	pop	r13
     46a:	cf 90       	pop	r12
     46c:	bf 90       	pop	r11
     46e:	af 90       	pop	r10
     470:	9f 90       	pop	r9
     472:	8f 90       	pop	r8
     474:	08 95       	ret

00000476 <drehzahl_ausgabe>:

void drehzahl_ausgabe (void)
{
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
	sprintf(ausgabe,"    ");
     47a:	c9 e3       	ldi	r28, 0x39	; 57
     47c:	d1 e0       	ldi	r29, 0x01	; 1
     47e:	85 e0       	ldi	r24, 0x05	; 5
     480:	ee e0       	ldi	r30, 0x0E	; 14
     482:	f1 e0       	ldi	r31, 0x01	; 1
     484:	de 01       	movw	r26, r28
     486:	01 90       	ld	r0, Z+
     488:	0d 92       	st	X+, r0
     48a:	8a 95       	dec	r24
     48c:	e1 f7       	brne	.-8      	; 0x486 <drehzahl_ausgabe+0x10>
	LCD_cmd(0x8b);   //gehe zu 1. Zeile, 25. Position
     48e:	8b e8       	ldi	r24, 0x8B	; 139
     490:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_cmd>
	LCD_string(ausgabe);
     494:	ce 01       	movw	r24, r28
     496:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_string>
	
	sprintf(ausgabe,"%d",drehzahl_ausgabe_01);
     49a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <drehzahl_ausgabe_01>
     49e:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <drehzahl_ausgabe_01+0x1>
     4a2:	9f 93       	push	r25
     4a4:	8f 93       	push	r24
     4a6:	83 e1       	ldi	r24, 0x13	; 19
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	9f 93       	push	r25
     4ac:	8f 93       	push	r24
     4ae:	df 93       	push	r29
     4b0:	cf 93       	push	r28
     4b2:	0e 94 48 0c 	call	0x1890	; 0x1890 <sprintf>
	LCD_cmd(0x8a);   //gehe zu 1. Zeile, 25. Position
     4b6:	8a e8       	ldi	r24, 0x8A	; 138
     4b8:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_cmd>
	LCD_string(ausgabe);
     4bc:	ce 01       	movw	r24, r28
     4be:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_string>
}
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	08 95       	ret

000004d4 <geschwindigkeits_ausgabe>:

void geschwindigkeits_ausgabe (void)
{
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
	sprintf(ausgabe,"    ");
     4d8:	c9 e3       	ldi	r28, 0x39	; 57
     4da:	d1 e0       	ldi	r29, 0x01	; 1
     4dc:	85 e0       	ldi	r24, 0x05	; 5
     4de:	ee e0       	ldi	r30, 0x0E	; 14
     4e0:	f1 e0       	ldi	r31, 0x01	; 1
     4e2:	de 01       	movw	r26, r28
     4e4:	01 90       	ld	r0, Z+
     4e6:	0d 92       	st	X+, r0
     4e8:	8a 95       	dec	r24
     4ea:	e1 f7       	brne	.-8      	; 0x4e4 <geschwindigkeits_ausgabe+0x10>
	LCD_cmd(0xcb);   //gehe zu 2. Zeile, 25. Position
     4ec:	8b ec       	ldi	r24, 0xCB	; 203
     4ee:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_cmd>
	LCD_string(ausgabe);
     4f2:	ce 01       	movw	r24, r28
     4f4:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_string>
	
	sprintf(ausgabe,"%d",geschwindigkeit_ausgabe);
     4f8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <geschwindigkeit_ausgabe>
     4fc:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <geschwindigkeit_ausgabe+0x1>
     500:	9f 93       	push	r25
     502:	8f 93       	push	r24
     504:	83 e1       	ldi	r24, 0x13	; 19
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	9f 93       	push	r25
     50a:	8f 93       	push	r24
     50c:	df 93       	push	r29
     50e:	cf 93       	push	r28
     510:	0e 94 48 0c 	call	0x1890	; 0x1890 <sprintf>
	LCD_cmd(0xca);   //gehe zu 2. Zeile, 25. Position
     514:	8a ec       	ldi	r24, 0xCA	; 202
     516:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_cmd>
	LCD_string(ausgabe);
     51a:	ce 01       	movw	r24, r28
     51c:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_string>
}
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	08 95       	ret

00000532 <preset_drehzahl_gesch>:
void preset_drehzahl_gesch (void)
{
	drehzahl = 0;
     532:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <drehzahl>
     536:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <drehzahl+0x1>
     53a:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <drehzahl+0x2>
     53e:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <drehzahl+0x3>
	geschwindigkeit = 0;
     542:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <geschwindigkeit>
     546:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <geschwindigkeit+0x1>
     54a:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <geschwindigkeit+0x2>
     54e:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <geschwindigkeit+0x3>
     552:	08 95       	ret

00000554 <umschalt_null>:
}
char umschalt_null (void)
{
     554:	cf 93       	push	r28
	if (drehzahl == 0)
     556:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <drehzahl>
     55a:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <drehzahl+0x1>
     55e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <drehzahl+0x2>
     562:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <drehzahl+0x3>
     566:	c1 e0       	ldi	r28, 0x01	; 1
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	a9 01       	movw	r20, r18
     56e:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <__cmpsf2>
     572:	81 11       	cpse	r24, r1
     574:	c0 e0       	ldi	r28, 0x00	; 0
	else
	{
		return 0;		//Geschwindigkeit zu hoch
	}
	
}
     576:	8c 2f       	mov	r24, r28
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <__vector_20>:

ISR(TIMER1_OVF_vect)			//Motor steht
{
     57c:	1f 92       	push	r1
     57e:	0f 92       	push	r0
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	0f 92       	push	r0
     584:	11 24       	eor	r1, r1
     586:	8f 93       	push	r24
	
	overflow = 1;
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <overflow>
	
	steps = 0;
     58e:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <steps+0x1>
     592:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <steps>
	geschwindigkeit = 0;
     596:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <geschwindigkeit>
     59a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <geschwindigkeit+0x1>
     59e:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <geschwindigkeit+0x2>
     5a2:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <geschwindigkeit+0x3>
	geschwindigkeit_ausgabe = 0;
     5a6:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <geschwindigkeit_ausgabe+0x1>
     5aa:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <geschwindigkeit_ausgabe>
	drehzahl = 0;
     5ae:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <drehzahl>
     5b2:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <drehzahl+0x1>
     5b6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <drehzahl+0x2>
     5ba:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <drehzahl+0x3>
	drehzahl_ausgabe_01 = 0;
     5be:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <drehzahl_ausgabe_01+0x1>
     5c2:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <drehzahl_ausgabe_01>
	drehzahl_pro_sekunde = 0;
     5c6:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <drehzahl_pro_sekunde>
     5ca:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <drehzahl_pro_sekunde+0x1>
     5ce:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <drehzahl_pro_sekunde+0x2>
     5d2:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <drehzahl_pro_sekunde+0x3>
	step_dauer = 0;
     5d6:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <step_dauer>
     5da:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <step_dauer+0x1>
     5de:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <step_dauer+0x2>
     5e2:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <step_dauer+0x3>
	
     5e6:	8f 91       	pop	r24
     5e8:	0f 90       	pop	r0
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	0f 90       	pop	r0
     5ee:	1f 90       	pop	r1
     5f0:	18 95       	reti

000005f2 <akku_ladestand>:
	return ladestand;
	
}

void akku_daten_einbeziehen (uint8_t ladestand, uint8_t temp)
{
     5f2:	a0 e0       	ldi	r26, 0x00	; 0
     5f4:	b0 e0       	ldi	r27, 0x00	; 0
     5f6:	bc 01       	movw	r22, r24
     5f8:	cd 01       	movw	r24, r26
     5fa:	60 54       	subi	r22, 0x40	; 64
     5fc:	7c 49       	sbci	r23, 0x9C	; 156
     5fe:	81 09       	sbc	r24, r1
     600:	91 09       	sbc	r25, r1
     602:	20 ea       	ldi	r18, 0xA0	; 160
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	40 e0       	ldi	r20, 0x00	; 0
     608:	50 e0       	ldi	r21, 0x00	; 0
     60a:	0e 94 07 0c 	call	0x180e	; 0x180e <__divmodsi4>
     60e:	82 2f       	mov	r24, r18
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	08 95       	ret

00000614 <geschwindigkeits_regulierung>:
		
	}
}

char geschwindigkeits_regulierung(char adc_wert, char adc_wert_alt)
{
     614:	4f 92       	push	r4
     616:	5f 92       	push	r5
     618:	6f 92       	push	r6
     61a:	7f 92       	push	r7
     61c:	8f 92       	push	r8
     61e:	9f 92       	push	r9
     620:	af 92       	push	r10
     622:	bf 92       	push	r11
     624:	cf 92       	push	r12
     626:	df 92       	push	r13
     628:	ef 92       	push	r14
     62a:	ff 92       	push	r15
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	c8 2f       	mov	r28, r24
	uint16_t ges_spannung_regelung;
	uint16_t niedrigste_zell_spannung_regelung;
	uint8_t temperatur_regelung;
	
	
	if (drehzahl >= MAXDREHZAHL)		//Überdrehzahl abfangen
     636:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <drehzahl>
     63a:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <drehzahl+0x1>
     63e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <drehzahl+0x2>
     642:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <drehzahl+0x3>
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e4       	ldi	r19, 0x40	; 64
     64a:	4c e9       	ldi	r20, 0x9C	; 156
     64c:	55 e4       	ldi	r21, 0x45	; 69
     64e:	0e 94 95 0b 	call	0x172a	; 0x172a <__gesf2>
     652:	88 23       	and	r24, r24
     654:	64 f0       	brlt	.+24     	; 0x66e <geschwindigkeits_regulierung+0x5a>
	{
		drehzahl = MAXDREHZAHL;			//5000 U/min
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	90 e4       	ldi	r25, 0x40	; 64
     65a:	ac e9       	ldi	r26, 0x9C	; 156
     65c:	b5 e4       	ldi	r27, 0x45	; 69
     65e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <drehzahl>
     662:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <drehzahl+0x1>
     666:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <drehzahl+0x2>
     66a:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <drehzahl+0x3>
	else
	{
		kennlinie_voltage = 0;
	}
*/
	kennlinie_voltage = (float)(drehzahl/DREHZAHLTEILER3);			//Teiler 106
     66e:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <drehzahl>
     672:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <drehzahl+0x1>
     676:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <drehzahl+0x2>
     67a:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <drehzahl+0x3>
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	44 ed       	ldi	r20, 0xD4	; 212
     684:	52 e4       	ldi	r21, 0x42	; 66
     686:	0e 94 01 0a 	call	0x1402	; 0x1402 <__divsf3>
     68a:	4b 01       	movw	r8, r22
     68c:	5c 01       	movw	r10, r24


	ges_spannung_regelung = ges_spannung_uebertragung();
     68e:	0e 94 fe 04 	call	0x9fc	; 0x9fc <ges_spannung_uebertragung>
     692:	7c 01       	movw	r14, r24
	niedrigste_zell_spannung_regelung = niedrigste_akku_voltage_uebertragung();
     694:	0e 94 17 05 	call	0xa2e	; 0xa2e <niedrigste_akku_voltage_uebertragung>
     698:	8c 01       	movw	r16, r24
	temperatur_regelung = temperatur_uebertragung();
     69a:	0e 94 30 05 	call	0xa60	; 0xa60 <temperatur_uebertragung>
     69e:	d8 2f       	mov	r29, r24
		
	
	if (kennlinie_voltage >= 40 && ges_spannung_regelung <=44000)			//Wenn Spannung zu niedrig wird && voll betrieb
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	40 e2       	ldi	r20, 0x20	; 32
     6a6:	52 e4       	ldi	r21, 0x42	; 66
     6a8:	c5 01       	movw	r24, r10
     6aa:	b4 01       	movw	r22, r8
     6ac:	0e 94 95 0b 	call	0x172a	; 0x172a <__gesf2>
     6b0:	88 23       	and	r24, r24
     6b2:	6c f0       	brlt	.+26     	; 0x6ce <geschwindigkeits_regulierung+0xba>
     6b4:	81 ee       	ldi	r24, 0xE1	; 225
     6b6:	e8 16       	cp	r14, r24
     6b8:	8b ea       	ldi	r24, 0xAB	; 171
     6ba:	f8 06       	cpc	r15, r24
     6bc:	40 f4       	brcc	.+16     	; 0x6ce <geschwindigkeits_regulierung+0xba>
	{
		kennlinie_voltage = 40;
     6be:	0f 2e       	mov	r0, r31
     6c0:	81 2c       	mov	r8, r1
     6c2:	91 2c       	mov	r9, r1
     6c4:	f0 e2       	ldi	r31, 0x20	; 32
     6c6:	af 2e       	mov	r10, r31
     6c8:	f2 e4       	ldi	r31, 0x42	; 66
     6ca:	bf 2e       	mov	r11, r31
     6cc:	f0 2d       	mov	r31, r0
	kennlinie_wert_float = kennlinie_voltage * (253/48);			//5,27
	kennlinie_wert = (char)kennlinie_wert_float;
		
	
	//Beschleunigungskennlinie
	if (drehzahl <= 2000)
     6ce:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <drehzahl>
     6d2:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <drehzahl+0x1>
     6d6:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <drehzahl+0x2>
     6da:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <drehzahl+0x3>
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	4a ef       	ldi	r20, 0xFA	; 250
     6e4:	54 e4       	ldi	r21, 0x44	; 68
     6e6:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <__cmpsf2>
     6ea:	18 16       	cp	r1, r24
     6ec:	bc f0       	brlt	.+46     	; 0x71c <geschwindigkeits_regulierung+0x108>
	{
		angleich_gerade_gas = (WEGFAHR_WERT+(0.00768*drehzahl)) ;		// * (gesamtspannung_kom/NENNSPANNUNG) //20Amper
     6ee:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <drehzahl>
     6f2:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <drehzahl+0x1>
     6f6:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <drehzahl+0x2>
     6fa:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <drehzahl+0x3>
     6fe:	22 e8       	ldi	r18, 0x82	; 130
     700:	38 ea       	ldi	r19, 0xA8	; 168
     702:	4b ef       	ldi	r20, 0xFB	; 251
     704:	5b e3       	ldi	r21, 0x3B	; 59
     706:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__mulsf3>
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	40 ef       	ldi	r20, 0xF0	; 240
     710:	51 e4       	ldi	r21, 0x41	; 65
     712:	0e 94 79 09 	call	0x12f2	; 0x12f2 <__addsf3>
     716:	6b 01       	movw	r12, r22
     718:	7c 01       	movw	r14, r24
     71a:	08 c0       	rjmp	.+16     	; 0x72c <geschwindigkeits_regulierung+0x118>
	}
	else
	{
		angleich_gerade_gas = SICHERHEITSBEREICH;		// * (gesamtspannung_kom/NENNSPANNUNG)
     71c:	0f 2e       	mov	r0, r31
     71e:	c1 2c       	mov	r12, r1
     720:	d1 2c       	mov	r13, r1
     722:	f0 e5       	ldi	r31, 0x50	; 80
     724:	ef 2e       	mov	r14, r31
     726:	f1 e4       	ldi	r31, 0x41	; 65
     728:	ff 2e       	mov	r15, r31
     72a:	f0 2d       	mov	r31, r0
	//Rekuperation-kennlinie
	angleich_gerade_bremsen = SICHERHEITSBEREICH;
	
	
	//		Sicherheit niedrigeste Zellspannung
	if (niedrigste_zell_spannung_regelung <= MINZELLSPANNUNG)
     72c:	01 3f       	cpi	r16, 0xF1	; 241
     72e:	8a e0       	ldi	r24, 0x0A	; 10
     730:	18 07       	cpc	r17, r24
     732:	58 f4       	brcc	.+22     	; 0x74a <geschwindigkeits_regulierung+0x136>
	{
		angleich_gerade_gas = (angleich_gerade_gas*0.85);		//15% weniger gas
     734:	2a e9       	ldi	r18, 0x9A	; 154
     736:	39 e9       	ldi	r19, 0x99	; 153
     738:	49 e5       	ldi	r20, 0x59	; 89
     73a:	5f e3       	ldi	r21, 0x3F	; 63
     73c:	c7 01       	movw	r24, r14
     73e:	b6 01       	movw	r22, r12
     740:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__mulsf3>
     744:	6b 01       	movw	r12, r22
     746:	7c 01       	movw	r14, r24
     748:	1c c0       	rjmp	.+56     	; 0x782 <geschwindigkeits_regulierung+0x16e>
	}
	else if (niedrigste_zell_spannung_regelung <= MINZELLSPANNUNG+100)
     74a:	05 35       	cpi	r16, 0x55	; 85
     74c:	8b e0       	ldi	r24, 0x0B	; 11
     74e:	18 07       	cpc	r17, r24
     750:	58 f4       	brcc	.+22     	; 0x768 <geschwindigkeits_regulierung+0x154>
	{
		angleich_gerade_gas = (angleich_gerade_gas*0.90);		//10% weniger gas
     752:	26 e6       	ldi	r18, 0x66	; 102
     754:	36 e6       	ldi	r19, 0x66	; 102
     756:	46 e6       	ldi	r20, 0x66	; 102
     758:	5f e3       	ldi	r21, 0x3F	; 63
     75a:	c7 01       	movw	r24, r14
     75c:	b6 01       	movw	r22, r12
     75e:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__mulsf3>
     762:	6b 01       	movw	r12, r22
     764:	7c 01       	movw	r14, r24
     766:	0d c0       	rjmp	.+26     	; 0x782 <geschwindigkeits_regulierung+0x16e>
	}
	else if (niedrigste_zell_spannung_regelung <= MINZELLSPANNUNG + 200)
     768:	09 3b       	cpi	r16, 0xB9	; 185
     76a:	1b 40       	sbci	r17, 0x0B	; 11
     76c:	50 f4       	brcc	.+20     	; 0x782 <geschwindigkeits_regulierung+0x16e>
	{
		angleich_gerade_gas = (angleich_gerade_gas*0.95);		//5% weniger gas
     76e:	23 e3       	ldi	r18, 0x33	; 51
     770:	33 e3       	ldi	r19, 0x33	; 51
     772:	43 e7       	ldi	r20, 0x73	; 115
     774:	5f e3       	ldi	r21, 0x3F	; 63
     776:	c7 01       	movw	r24, r14
     778:	b6 01       	movw	r22, r12
     77a:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__mulsf3>
     77e:	6b 01       	movw	r12, r22
     780:	7c 01       	movw	r14, r24
	}
	
	
	//	Sicherheit Temperatur
	if (temperatur_regelung >= 120)
     782:	d8 37       	cpi	r29, 0x78	; 120
     784:	50 f0       	brcs	.+20     	; 0x79a <geschwindigkeits_regulierung+0x186>
	{
		angleich_gerade_gas = (angleich_gerade_gas*0.2);
     786:	2d ec       	ldi	r18, 0xCD	; 205
     788:	3c ec       	ldi	r19, 0xCC	; 204
     78a:	4c e4       	ldi	r20, 0x4C	; 76
     78c:	5e e3       	ldi	r21, 0x3E	; 62
     78e:	c7 01       	movw	r24, r14
     790:	b6 01       	movw	r22, r12
     792:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__mulsf3>
     796:	6b 01       	movw	r12, r22
     798:	7c 01       	movw	r14, r24
	
	
	
	
	//		Fahrbetrieb	
	if (drehzahl == 0 && adc_wert > 20)		//Stillstand
     79a:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <drehzahl>
     79e:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <drehzahl+0x1>
     7a2:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <drehzahl+0x2>
     7a6:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <drehzahl+0x3>
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	a9 01       	movw	r20, r18
     7b0:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <__cmpsf2>
     7b4:	81 11       	cpse	r24, r1
     7b6:	03 c0       	rjmp	.+6      	; 0x7be <geschwindigkeits_regulierung+0x1aa>
     7b8:	c5 31       	cpi	r28, 0x15	; 21
     7ba:	08 f0       	brcs	.+2      	; 0x7be <geschwindigkeits_regulierung+0x1aa>
     7bc:	69 c0       	rjmp	.+210    	; 0x890 <geschwindigkeits_regulierung+0x27c>
		kennlinie_voltage = 40;
	}
	
	//Leerlaufkennlinie erstellen	
	kennlinie_wert_float = kennlinie_voltage * (253/48);			//5,27
	kennlinie_wert = (char)kennlinie_wert_float;
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 ea       	ldi	r20, 0xA0	; 160
     7c4:	50 e4       	ldi	r21, 0x40	; 64
     7c6:	c5 01       	movw	r24, r10
     7c8:	b4 01       	movw	r22, r8
     7ca:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__mulsf3>
     7ce:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__fixunssfsi>
     7d2:	16 2f       	mov	r17, r22
		
		regulierter_wert = WEGFAHR_WERT;	//Wegfahrwert
	}
	else
	{
		if (kennlinie_wert >= (255-angleich_gerade_gas))			//Overflows vermeiden //bei gas
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__floatsisf>
     7de:	4b 01       	movw	r8, r22
     7e0:	5c 01       	movw	r10, r24
     7e2:	a7 01       	movw	r20, r14
     7e4:	96 01       	movw	r18, r12
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	8f e7       	ldi	r24, 0x7F	; 127
     7ec:	93 e4       	ldi	r25, 0x43	; 67
     7ee:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__subsf3>
     7f2:	2b 01       	movw	r4, r22
     7f4:	3c 01       	movw	r6, r24
     7f6:	9b 01       	movw	r18, r22
     7f8:	ac 01       	movw	r20, r24
     7fa:	c5 01       	movw	r24, r10
     7fc:	b4 01       	movw	r22, r8
     7fe:	0e 94 95 0b 	call	0x172a	; 0x172a <__gesf2>
     802:	88 23       	and	r24, r24
     804:	34 f0       	brlt	.+12     	; 0x812 <geschwindigkeits_regulierung+0x1fe>
		{
			kennlinie_wert = (255-angleich_gerade_gas);
     806:	c3 01       	movw	r24, r6
     808:	b2 01       	movw	r22, r4
     80a:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__fixunssfsi>
     80e:	16 2f       	mov	r17, r22
     810:	0b c0       	rjmp	.+22     	; 0x828 <geschwindigkeits_regulierung+0x214>
		}
		else if (kennlinie_wert <= (0+angleich_gerade_bremsen))		//beim bremsen 
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	40 e5       	ldi	r20, 0x50	; 80
     818:	51 e4       	ldi	r21, 0x41	; 65
     81a:	c5 01       	movw	r24, r10
     81c:	b4 01       	movw	r22, r8
     81e:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <__cmpsf2>
     822:	18 16       	cp	r1, r24
     824:	0c f0       	brlt	.+2      	; 0x828 <geschwindigkeits_regulierung+0x214>
		{
			kennlinie_wert = (0+angleich_gerade_bremsen);
     826:	1d e0       	ldi	r17, 0x0D	; 13
		}
		
		
		if (adc_wert > (kennlinie_wert+(char)angleich_gerade_gas))				//Überbereich
     828:	8c 2e       	mov	r8, r28
     82a:	91 2c       	mov	r9, r1
     82c:	a1 2e       	mov	r10, r17
     82e:	b1 2c       	mov	r11, r1
     830:	c7 01       	movw	r24, r14
     832:	b6 01       	movw	r22, r12
     834:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__fixunssfsi>
     838:	c5 01       	movw	r24, r10
     83a:	86 0f       	add	r24, r22
     83c:	91 1d       	adc	r25, r1
     83e:	88 15       	cp	r24, r8
     840:	99 05       	cpc	r25, r9
     842:	24 f4       	brge	.+8      	; 0x84c <geschwindigkeits_regulierung+0x238>
		{
			PORTB = PORTB | (1<<PORTB7);
     844:	2f 9a       	sbi	0x05, 7	; 5
				
			regulierter_wert = kennlinie_wert+(char)angleich_gerade_gas;
     846:	c1 2f       	mov	r28, r17
     848:	c6 0f       	add	r28, r22
     84a:	23 c0       	rjmp	.+70     	; 0x892 <geschwindigkeits_regulierung+0x27e>
			
			
		}
		else if (adc_wert < (kennlinie_wert-angleich_gerade_bremsen))			//Unterberreich		//kann im Stillstand nicht eintretten
     84c:	b5 01       	movw	r22, r10
     84e:	bb 0c       	add	r11, r11
     850:	88 0b       	sbc	r24, r24
     852:	99 0b       	sbc	r25, r25
     854:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__floatsisf>
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	40 e5       	ldi	r20, 0x50	; 80
     85e:	51 e4       	ldi	r21, 0x41	; 65
     860:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__subsf3>
     864:	6b 01       	movw	r12, r22
     866:	7c 01       	movw	r14, r24
     868:	b4 01       	movw	r22, r8
     86a:	99 0c       	add	r9, r9
     86c:	88 0b       	sbc	r24, r24
     86e:	99 0b       	sbc	r25, r25
     870:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__floatsisf>
     874:	a7 01       	movw	r20, r14
     876:	96 01       	movw	r18, r12
     878:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <__cmpsf2>
     87c:	88 23       	and	r24, r24
     87e:	34 f4       	brge	.+12     	; 0x88c <geschwindigkeits_regulierung+0x278>
		{
		
			regulierter_wert = kennlinie_wert-angleich_gerade_bremsen;
     880:	c7 01       	movw	r24, r14
     882:	b6 01       	movw	r22, r12
     884:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__fixunssfsi>
     888:	c6 2f       	mov	r28, r22
     88a:	03 c0       	rjmp	.+6      	; 0x892 <geschwindigkeits_regulierung+0x27e>
						
		}
		else										
		{
			PORTB = PORTB &~ (1<<PORTB7);
     88c:	2f 98       	cbi	0x05, 7	; 5
     88e:	01 c0       	rjmp	.+2      	; 0x892 <geschwindigkeits_regulierung+0x27e>
	
	//		Fahrbetrieb	
	if (drehzahl == 0 && adc_wert > 20)		//Stillstand
	{
		
		regulierter_wert = WEGFAHR_WERT;	//Wegfahrwert
     890:	ce e1       	ldi	r28, 0x1E	; 30

	
	
	return regulierter_wert;
	
}
     892:	8c 2f       	mov	r24, r28
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	df 90       	pop	r13
     8a2:	cf 90       	pop	r12
     8a4:	bf 90       	pop	r11
     8a6:	af 90       	pop	r10
     8a8:	9f 90       	pop	r9
     8aa:	8f 90       	pop	r8
     8ac:	7f 90       	pop	r7
     8ae:	6f 90       	pop	r6
     8b0:	5f 90       	pop	r5
     8b2:	4f 90       	pop	r4
     8b4:	08 95       	ret

000008b6 <ladestand_ausgabe>:

void ladestand_ausgabe (uint8_t ladestand_ubernahme)
{
		sprintf(ausgabe_02,"%d",ladestand_ubernahme);
     8b6:	1f 92       	push	r1
     8b8:	8f 93       	push	r24
     8ba:	83 e1       	ldi	r24, 0x13	; 19
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	9f 93       	push	r25
     8c0:	8f 93       	push	r24
     8c2:	88 e5       	ldi	r24, 0x58	; 88
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	9f 93       	push	r25
     8c8:	8f 93       	push	r24
     8ca:	0e 94 48 0c 	call	0x1890	; 0x1890 <sprintf>
		LCD_cmd(0xC0);   //gehe zu 2. Zeile, 1. Position
     8ce:	80 ec       	ldi	r24, 0xC0	; 192
     8d0:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_cmd>
		LCD_string(ausgabe_02);
     8d4:	88 e5       	ldi	r24, 0x58	; 88
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_string>
}
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	08 95       	ret

000008ea <init_usart>:
char counter_falsch = 0;


void init_usart (void)
{  
	UBRR1H = (unsigned char)(UBRR_CALC>>8); //Baudrate einstellen  
     8ea:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (unsigned char)(UBRR_CALC);    
     8ee:	87 e6       	ldi	r24, 0x67	; 103
     8f0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	UCSR1B = UCSR1B | (1<<RXEN1);	//Empfang ein
     8f4:	a9 ec       	ldi	r26, 0xC9	; 201
     8f6:	b0 e0       	ldi	r27, 0x00	; 0
     8f8:	8c 91       	ld	r24, X
     8fa:	80 61       	ori	r24, 0x10	; 16
     8fc:	8c 93       	st	X, r24
	UCSR1B = UCSR1B | (1<<RXCIE1);	//Empfang-Interruput ein
     8fe:	8c 91       	ld	r24, X
     900:	80 68       	ori	r24, 0x80	; 128
     902:	8c 93       	st	X, r24
	UCSR1B = UCSR1B | (1<<TXEN1);	//Sender ein  
     904:	8c 91       	ld	r24, X
     906:	88 60       	ori	r24, 0x08	; 8
     908:	8c 93       	st	X, r24
	
	UCSR1C = UCSR1C &~ (1<<UMSEL10);	//asynchr.
     90a:	ea ec       	ldi	r30, 0xCA	; 202
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	8f 7b       	andi	r24, 0xBF	; 191
     912:	80 83       	st	Z, r24
	UCSR1C = UCSR1C &~ (1<<UMSEL11);	
     914:	80 81       	ld	r24, Z
     916:	8f 77       	andi	r24, 0x7F	; 127
     918:	80 83       	st	Z, r24
	
	UCSR1C = UCSR1C &~ (1<<UPM10);		//even parity
     91a:	80 81       	ld	r24, Z
     91c:	8f 7e       	andi	r24, 0xEF	; 239
     91e:	80 83       	st	Z, r24
	UCSR1C = UCSR1C | (1<<UPM11);
     920:	80 81       	ld	r24, Z
     922:	80 62       	ori	r24, 0x20	; 32
     924:	80 83       	st	Z, r24
	
	UCSR1C = UCSR1C &~ (1<<USBS1);		//1-Stop-Bit
     926:	80 81       	ld	r24, Z
     928:	87 7f       	andi	r24, 0xF7	; 247
     92a:	80 83       	st	Z, r24
	
	UCSR1C = UCSR1C | (1<<UCSZ10);		//8-Bit data
     92c:	80 81       	ld	r24, Z
     92e:	82 60       	ori	r24, 0x02	; 2
     930:	80 83       	st	Z, r24
	UCSR1C = UCSR1C | (1<<UCSZ11);
     932:	80 81       	ld	r24, Z
     934:	84 60       	ori	r24, 0x04	; 4
     936:	80 83       	st	Z, r24
	UCSR1B = UCSR1B &~ (1<<UCSZ12);
     938:	8c 91       	ld	r24, X
     93a:	8b 7f       	andi	r24, 0xFB	; 251
     93c:	8c 93       	st	X, r24
	
	UCSR1C = UCSR1C &~ (UCPOL1);		//muss low sein im asynchron mode
     93e:	80 81       	ld	r24, Z
     940:	80 83       	st	Z, r24
     942:	08 95       	ret

00000944 <init_transmission_timer>:
	
	
}
void init_transmission_timer(void)
{
	TCCR0A = TCCR0A &~ (1<<COM0A0);		//Normal Port Operations
     944:	84 b5       	in	r24, 0x24	; 36
     946:	8f 7b       	andi	r24, 0xBF	; 191
     948:	84 bd       	out	0x24, r24	; 36
	TCCR0A = TCCR0A &~ (1<<COM0A1);
     94a:	84 b5       	in	r24, 0x24	; 36
     94c:	8f 77       	andi	r24, 0x7F	; 127
     94e:	84 bd       	out	0x24, r24	; 36
	
	TCCR0A = TCCR0A &~ (1<<WGM00);		//Normal Mode
     950:	84 b5       	in	r24, 0x24	; 36
     952:	8e 7f       	andi	r24, 0xFE	; 254
     954:	84 bd       	out	0x24, r24	; 36
	TCCR0A = TCCR0A &~ (1<<WGM01);
     956:	84 b5       	in	r24, 0x24	; 36
     958:	8d 7f       	andi	r24, 0xFD	; 253
     95a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = TCCR0B &~ (1<<WGM02);
     95c:	85 b5       	in	r24, 0x25	; 37
     95e:	87 7f       	andi	r24, 0xF7	; 247
     960:	85 bd       	out	0x25, r24	; 37
	
	TCCR0B = TCCR0B &~ (1<<CS00);		//Teiler 256 (16MHz / 256 = 16µs)
     962:	85 b5       	in	r24, 0x25	; 37
     964:	8e 7f       	andi	r24, 0xFE	; 254
     966:	85 bd       	out	0x25, r24	; 37
	TCCR0B = TCCR0B &~ (1<<CS01);
     968:	85 b5       	in	r24, 0x25	; 37
     96a:	8d 7f       	andi	r24, 0xFD	; 253
     96c:	85 bd       	out	0x25, r24	; 37
	TCCR0B = TCCR0B | (1<<CS02);
     96e:	85 b5       	in	r24, 0x25	; 37
     970:	84 60       	ori	r24, 0x04	; 4
     972:	85 bd       	out	0x25, r24	; 37
	
	OCR0A = 100;	//Compare bei 1,6ms	(16µs * 100 = 1,6ms)
     974:	84 e6       	ldi	r24, 0x64	; 100
     976:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 = TIMSK0 | (1<<OCIE0A);		//Interrupt nach 1,6ms
     978:	ee e6       	ldi	r30, 0x6E	; 110
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	80 81       	ld	r24, Z
     97e:	82 60       	ori	r24, 0x02	; 2
     980:	80 83       	st	Z, r24
     982:	08 95       	ret

00000984 <daten_aufteilen>:
	//TIMSK0 = TIMSK0 | (1<<TOIE0);		//Overflow Interrupt nach 4ms
	
}
void daten_aufteilen(void)
{
	temperatur = akku_daten[0];					//Temperatur
     984:	e6 e6       	ldi	r30, 0x66	; 102
     986:	f1 e0       	ldi	r31, 0x01	; 1
     988:	80 81       	ld	r24, Z
     98a:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <temperatur>
	niedrige_akku_voltage = akku_daten[1];					//Low-Spannung
     98e:	81 81       	ldd	r24, Z+1	; 0x01
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <niedrige_akku_voltage+0x1>
     996:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <niedrige_akku_voltage>
	niedrige_akku_voltage = niedrige_akku_voltage | (akku_daten[2]<<8);		//HIGH Byte der Spannung
     99a:	22 81       	ldd	r18, Z+2	; 0x02
     99c:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <niedrige_akku_voltage>
     9a0:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <niedrige_akku_voltage+0x1>
     9a4:	92 2b       	or	r25, r18
     9a6:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <niedrige_akku_voltage+0x1>
     9aa:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <niedrige_akku_voltage>
	ges_volatage = akku_daten[3];
     9ae:	83 81       	ldd	r24, Z+3	; 0x03
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
     9b6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
	ges_volatage = ges_volatage | (akku_daten[4]<<8);
     9ba:	24 81       	ldd	r18, Z+4	; 0x04
     9bc:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     9c0:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
     9c4:	92 2b       	or	r25, r18
     9c6:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
     9ca:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
     9ce:	08 95       	ret

000009d0 <save_akku_daten>:
	
}
void save_akku_daten(void)
{
		
	akku_daten[0] = empfangs_daten[0];		//Temperatur
     9d0:	ae e5       	ldi	r26, 0x5E	; 94
     9d2:	b1 e0       	ldi	r27, 0x01	; 1
     9d4:	8c 91       	ld	r24, X
     9d6:	e6 e6       	ldi	r30, 0x66	; 102
     9d8:	f1 e0       	ldi	r31, 0x01	; 1
     9da:	80 83       	st	Z, r24
	akku_daten[1] = empfangs_daten[1];		//Low-Spannung
     9dc:	11 96       	adiw	r26, 0x01	; 1
     9de:	8c 91       	ld	r24, X
     9e0:	11 97       	sbiw	r26, 0x01	; 1
     9e2:	81 83       	std	Z+1, r24	; 0x01
	akku_daten[2] = empfangs_daten[2];		//High-Spannung
     9e4:	12 96       	adiw	r26, 0x02	; 2
     9e6:	8c 91       	ld	r24, X
     9e8:	12 97       	sbiw	r26, 0x02	; 2
     9ea:	82 83       	std	Z+2, r24	; 0x02
	akku_daten[3] = empfangs_daten[3];		//Low_Ges_Spannung
     9ec:	13 96       	adiw	r26, 0x03	; 3
     9ee:	8c 91       	ld	r24, X
     9f0:	13 97       	sbiw	r26, 0x03	; 3
     9f2:	83 83       	std	Z+3, r24	; 0x03
	akku_daten[4] = empfangs_daten[4];		//High_Ges_Spannung
     9f4:	14 96       	adiw	r26, 0x04	; 4
     9f6:	8c 91       	ld	r24, X
     9f8:	84 83       	std	Z+4, r24	; 0x04
     9fa:	08 95       	ret

000009fc <ges_spannung_uebertragung>:

}

uint16_t ges_spannung_uebertragung(void)
{
	if ((ges_volatage >= MINSPANNUNG) && (ges_volatage <= MAXSPANNUNG))
     9fc:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     a00:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
     a04:	80 34       	cpi	r24, 0x40	; 64
     a06:	9c 49       	sbci	r25, 0x9C	; 156
     a08:	60 f0       	brcs	.+24     	; 0xa22 <ges_spannung_uebertragung+0x26>
     a0a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     a0e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
     a12:	81 3c       	cpi	r24, 0xC1	; 193
     a14:	9a 4d       	sbci	r25, 0xDA	; 218
     a16:	40 f4       	brcc	.+16     	; 0xa28 <ges_spannung_uebertragung+0x2c>
	{
		return ges_volatage;
     a18:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     a1c:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
     a20:	08 95       	ret
	}
	else
	{
		return NENNSPANNUNG;
     a22:	80 e8       	ldi	r24, 0x80	; 128
     a24:	9b eb       	ldi	r25, 0xBB	; 187
     a26:	08 95       	ret
     a28:	80 e8       	ldi	r24, 0x80	; 128
     a2a:	9b eb       	ldi	r25, 0xBB	; 187
	}
	
	return ges_volatage;
}
     a2c:	08 95       	ret

00000a2e <niedrigste_akku_voltage_uebertragung>:
uint16_t niedrigste_akku_voltage_uebertragung (void)
{
	if ((niedrige_akku_voltage >= MINZELLSPANNUNG) && (niedrige_akku_voltage <= MAXZELLSPANNUNG))
     a2e:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <niedrige_akku_voltage>
     a32:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <niedrige_akku_voltage+0x1>
     a36:	80 3f       	cpi	r24, 0xF0	; 240
     a38:	9a 40       	sbci	r25, 0x0A	; 10
     a3a:	60 f0       	brcs	.+24     	; 0xa54 <niedrigste_akku_voltage_uebertragung+0x26>
     a3c:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <niedrige_akku_voltage>
     a40:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <niedrige_akku_voltage+0x1>
     a44:	89 3d       	cpi	r24, 0xD9	; 217
     a46:	9e 40       	sbci	r25, 0x0E	; 14
     a48:	40 f4       	brcc	.+16     	; 0xa5a <niedrigste_akku_voltage_uebertragung+0x2c>
	{
		return niedrige_akku_voltage;
     a4a:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <niedrige_akku_voltage>
     a4e:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <niedrige_akku_voltage+0x1>
     a52:	08 95       	ret
	}
	else
	{
		return NENNZELLSPANNUNG;
     a54:	84 ee       	ldi	r24, 0xE4	; 228
     a56:	9c e0       	ldi	r25, 0x0C	; 12
     a58:	08 95       	ret
     a5a:	84 ee       	ldi	r24, 0xE4	; 228
     a5c:	9c e0       	ldi	r25, 0x0C	; 12
	}
	
}
     a5e:	08 95       	ret

00000a60 <temperatur_uebertragung>:
uint8_t temperatur_uebertragung(void)
{
	if(temperatur <= MAXTEMPERATUR)
     a60:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <temperatur>
     a64:	81 3a       	cpi	r24, 0xA1	; 161
     a66:	18 f4       	brcc	.+6      	; 0xa6e <temperatur_uebertragung+0xe>
	{
		return temperatur;
     a68:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <temperatur>
     a6c:	08 95       	ret
	}
	else
	{
		return 20;
     a6e:	84 e1       	ldi	r24, 0x14	; 20
	}
	
	
}
     a70:	08 95       	ret

00000a72 <__vector_25>:

ISR(USART1_RX_vect)     //Interrupt für Empfang 
{  
     a72:	1f 92       	push	r1
     a74:	0f 92       	push	r0
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	0f 92       	push	r0
     a7a:	11 24       	eor	r1, r1
     a7c:	2f 93       	push	r18
     a7e:	3f 93       	push	r19
     a80:	4f 93       	push	r20
     a82:	5f 93       	push	r21
     a84:	6f 93       	push	r22
     a86:	7f 93       	push	r23
     a88:	8f 93       	push	r24
     a8a:	9f 93       	push	r25
     a8c:	af 93       	push	r26
     a8e:	bf 93       	push	r27
     a90:	ef 93       	push	r30
     a92:	ff 93       	push	r31
	
		
	if((start == 1 && overflow_counter >= 5) || (zahler_uebertragung >= 1))			//Wenn nicht gerade in Daten ist && pause eingehalten wurde		//5*1,6ms = 8ms
     a94:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <start>
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	21 f4       	brne	.+8      	; 0xaa4 <__vector_25+0x32>
     a9c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <overflow_counter>
     aa0:	85 30       	cpi	r24, 0x05	; 5
     aa2:	20 f4       	brcc	.+8      	; 0xaac <__vector_25+0x3a>
     aa4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <zahler_uebertragung>
     aa8:	88 23       	and	r24, r24
     aaa:	b1 f0       	breq	.+44     	; 0xad8 <__vector_25+0x66>
	{
		//genaue 8ms können zum Problem werden
		
			overflow_counter = 0;		//Counter wird auf 0 gesetzt
     aac:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <overflow_counter>
			TCNT0 = 0;
     ab0:	16 bc       	out	0x26, r1	; 38
		
			//while( !(UCSR1A & (1<<RXC1)) );   //warten bis Zeichen fertig empfangen
			empfangs_daten[zahler_uebertragung] = UDR1;		//Zeichen in Variable ablegen	//UDR1 -> 8 Bit daten 9.Bit wäre in UCSR1B			//Temperatur //LOW-Spannung //LOW-Spannung
     ab2:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <zahler_uebertragung>
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     abc:	e2 5a       	subi	r30, 0xA2	; 162
     abe:	fe 4f       	sbci	r31, 0xFE	; 254
     ac0:	80 83       	st	Z, r24
			
		
			if (zahler_uebertragung == 4)
     ac2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <zahler_uebertragung>
     ac6:	84 30       	cpi	r24, 0x04	; 4
     ac8:	11 f4       	brne	.+4      	; 0xace <__vector_25+0x5c>
			{
				save_akku_daten();
     aca:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <save_akku_daten>
			}		
		
			zahler_uebertragung++;
     ace:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <zahler_uebertragung>
     ad2:	8f 5f       	subi	r24, 0xFF	; 255
     ad4:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <zahler_uebertragung>
		
		}

}
     ad8:	ff 91       	pop	r31
     ada:	ef 91       	pop	r30
     adc:	bf 91       	pop	r27
     ade:	af 91       	pop	r26
     ae0:	9f 91       	pop	r25
     ae2:	8f 91       	pop	r24
     ae4:	7f 91       	pop	r23
     ae6:	6f 91       	pop	r22
     ae8:	5f 91       	pop	r21
     aea:	4f 91       	pop	r20
     aec:	3f 91       	pop	r19
     aee:	2f 91       	pop	r18
     af0:	0f 90       	pop	r0
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	0f 90       	pop	r0
     af6:	1f 90       	pop	r1
     af8:	18 95       	reti

00000afa <__vector_21>:
ISR (TIMER0_COMPA_vect)
{
     afa:	1f 92       	push	r1
     afc:	0f 92       	push	r0
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	0f 92       	push	r0
     b02:	11 24       	eor	r1, r1
     b04:	2f 93       	push	r18
     b06:	3f 93       	push	r19
     b08:	4f 93       	push	r20
     b0a:	5f 93       	push	r21
     b0c:	6f 93       	push	r22
     b0e:	7f 93       	push	r23
     b10:	8f 93       	push	r24
     b12:	9f 93       	push	r25
     b14:	af 93       	push	r26
     b16:	bf 93       	push	r27
     b18:	ef 93       	push	r30
     b1a:	ff 93       	push	r31
	TCNT0 = 0;
     b1c:	16 bc       	out	0x26, r1	; 38
	start = 1;
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <start>
	

	
	zahler_uebertragung = 0;
     b24:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <zahler_uebertragung>
	
	
	overflow_counter++;		//Zählen der Overflows
     b28:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <overflow_counter>
     b2c:	8f 5f       	subi	r24, 0xFF	; 255
     b2e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <overflow_counter>
	
	if(overflow_counter == 2)		//nach 3*1,6ms= 4,8ms werden Daten gespeichert
     b32:	82 30       	cpi	r24, 0x02	; 2
     b34:	11 f4       	brne	.+4      	; 0xb3a <__stack+0x3b>
	{
		daten_aufteilen();
     b36:	0e 94 c2 04 	call	0x984	; 0x984 <daten_aufteilen>
	}
	
	if (overflow_counter > 250)
     b3a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <overflow_counter>
     b3e:	8b 3f       	cpi	r24, 0xFB	; 251
     b40:	18 f0       	brcs	.+6      	; 0xb48 <__stack+0x49>
	{
		overflow_counter = 250;
     b42:	8a ef       	ldi	r24, 0xFA	; 250
     b44:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <overflow_counter>
	}
	
     b48:	ff 91       	pop	r31
     b4a:	ef 91       	pop	r30
     b4c:	bf 91       	pop	r27
     b4e:	af 91       	pop	r26
     b50:	9f 91       	pop	r25
     b52:	8f 91       	pop	r24
     b54:	7f 91       	pop	r23
     b56:	6f 91       	pop	r22
     b58:	5f 91       	pop	r21
     b5a:	4f 91       	pop	r20
     b5c:	3f 91       	pop	r19
     b5e:	2f 91       	pop	r18
     b60:	0f 90       	pop	r0
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	0f 90       	pop	r0
     b66:	1f 90       	pop	r1
     b68:	18 95       	reti

00000b6a <delay_ms>:



void delay_ms (unsigned int ms)   //Hilfsfunktion: Zeitvernichtung 
{  
	for (unsigned int i=0; i<ms; i++)
     b6a:	00 97       	sbiw	r24, 0x00	; 0
     b6c:	69 f0       	breq	.+26     	; 0xb88 <delay_ms+0x1e>
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b72:	ef e9       	ldi	r30, 0x9F	; 159
     b74:	ff e0       	ldi	r31, 0x0F	; 15
     b76:	31 97       	sbiw	r30, 0x01	; 1
     b78:	f1 f7       	brne	.-4      	; 0xb76 <delay_ms+0xc>
     b7a:	00 c0       	rjmp	.+0      	; 0xb7c <delay_ms+0x12>
     b7c:	00 00       	nop
     b7e:	2f 5f       	subi	r18, 0xFF	; 255
     b80:	3f 4f       	sbci	r19, 0xFF	; 255
     b82:	82 17       	cp	r24, r18
     b84:	93 07       	cpc	r25, r19
     b86:	a9 f7       	brne	.-22     	; 0xb72 <delay_ms+0x8>
     b88:	08 95       	ret

00000b8a <Enable>:

}

void Enable(void)  //Hilfsfunktion: H=>L Flanke der Enable Leitung (E) 
{  
	PORTF = PORTF | (1<<E); //E = 1   
     b8a:	89 9a       	sbi	0x11, 1	; 17
	delay_ms(5);  
     b8c:	85 e0       	ldi	r24, 0x05	; 5
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 b5 05 	call	0xb6a	; 0xb6a <delay_ms>
	PORTF = PORTF &~(1<<E); //E = 0  
     b94:	89 98       	cbi	0x11, 1	; 17
	delay_ms(5); 
     b96:	85 e0       	ldi	r24, 0x05	; 5
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <delay_ms>
     b9e:	08 95       	ret

00000ba0 <LCD_init>:
{  
	//DDRF = DDRF | (1<<E);										//E als Ausgang
	//DDRB = DDRB | (1<<RS);										//RS als Ausgang
	//DDRF = DDRF | (1<<DB7) | (1<<DB6) | (1<<DB5) | (1<<DB4);	//DB7..DB4 als Ausgang
	
	delay_ms(50);									//lt. Datenblatt min. 15ms nach Power ON warten  
     ba0:	82 e3       	ldi	r24, 0x32	; 50
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	0e 94 b5 05 	call	0xb6a	; 0xb6a <delay_ms>
	PORTF = PORTF &~ (1<<E);			//E=0 (RW=0 per HW)
     ba8:	89 98       	cbi	0x11, 1	; 17
	PORTB = PORTB &~ (1<<RS);			//RS=0
     baa:	28 98       	cbi	0x05, 0	; 5
	
	
	// Function Set  
		//DB7..DB4 = 0011  
		PORTF = PORTF & (~(1<<DB7) & ~(1<<DB6));	//Interface auf 8 Bit  
     bac:	81 b3       	in	r24, 0x11	; 17
     bae:	8f 73       	andi	r24, 0x3F	; 63
     bb0:	81 bb       	out	0x11, r24	; 17
		PORTF = PORTF | (1<<DB5) | (1<<DB4);    
     bb2:	81 b3       	in	r24, 0x11	; 17
     bb4:	80 63       	ori	r24, 0x30	; 48
     bb6:	81 bb       	out	0x11, r24	; 17
		Enable();
     bb8:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Enable>
	
		//DB7..DB4 = 0011  #
		PORTF = PORTF & (~(1<<DB7) & ~(1<<DB6));	//Interface auf 8 Bit  
     bbc:	81 b3       	in	r24, 0x11	; 17
     bbe:	8f 73       	andi	r24, 0x3F	; 63
     bc0:	81 bb       	out	0x11, r24	; 17
		PORTF = PORTF | (1<<DB5) | (1<<DB4);    
     bc2:	81 b3       	in	r24, 0x11	; 17
     bc4:	80 63       	ori	r24, 0x30	; 48
     bc6:	81 bb       	out	0x11, r24	; 17
		Enable();
     bc8:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Enable>
	
		//DB7..DB4 = 0011  
		PORTF = PORTF & (~(1<<DB7) & ~(1<<DB6));	//Interface auf 8 Bit  
     bcc:	81 b3       	in	r24, 0x11	; 17
     bce:	8f 73       	andi	r24, 0x3F	; 63
     bd0:	81 bb       	out	0x11, r24	; 17
		PORTF = PORTF | (1<<DB5) | (1<<DB4);    
     bd2:	81 b3       	in	r24, 0x11	; 17
     bd4:	80 63       	ori	r24, 0x30	; 48
     bd6:	81 bb       	out	0x11, r24	; 17
		Enable();
     bd8:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Enable>
	
		//DB7..DB4 = 0010  
		PORTF = PORTF & (~(1<<DB7) & ~(1<<DB6) &~(1<<DB4));  
     bdc:	81 b3       	in	r24, 0x11	; 17
     bde:	8f 72       	andi	r24, 0x2F	; 47
     be0:	81 bb       	out	0x11, r24	; 17
		PORTF = PORTF | (1<<DB5);					//Interface auf 4 Bit  
     be2:	8d 9a       	sbi	0x11, 5	; 17
		Enable();
     be4:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Enable>
		
	// 2-zeilig, 5x8 Matrix //  
	
	//DB7..DB4 = 0010  
	PORTF = PORTF & (~(1<<DB7) & ~(1<<DB6) &~(1<<DB4));  
     be8:	81 b3       	in	r24, 0x11	; 17
     bea:	8f 72       	andi	r24, 0x2F	; 47
     bec:	81 bb       	out	0x11, r24	; 17
	PORTF = PORTF | (1<<DB5);   //Upper Nibble  
     bee:	8d 9a       	sbi	0x11, 5	; 17
	Enable();
     bf0:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Enable>
	
	//DB7..DB4 = 1000  
	PORTF = PORTF | (1<<DB7);   //Lower Nibble  
     bf4:	8f 9a       	sbi	0x11, 7	; 17
	PORTF = PORTF & (~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4));  
     bf6:	81 b3       	in	r24, 0x11	; 17
     bf8:	8f 78       	andi	r24, 0x8F	; 143
     bfa:	81 bb       	out	0x11, r24	; 17
	Enable();
     bfc:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Enable>
	
	//Display Off //  
	//DB7..DB4 = 0000  
	PORTF = PORTF & (~(1<<DB7) & ~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4)); //Upper Nibble  
     c00:	81 b3       	in	r24, 0x11	; 17
     c02:	8f 70       	andi	r24, 0x0F	; 15
     c04:	81 bb       	out	0x11, r24	; 17
	Enable();
     c06:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Enable>
	
	//DB7..DB4 = 1000  
	PORTF = PORTF | (1<<DB7);   //Lower Nibble  
     c0a:	8f 9a       	sbi	0x11, 7	; 17
	PORTF = PORTF & (~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4));  
     c0c:	81 b3       	in	r24, 0x11	; 17
     c0e:	8f 78       	andi	r24, 0x8F	; 143
     c10:	81 bb       	out	0x11, r24	; 17
	Enable();
     c12:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Enable>
	
	//Clear Display //  
	//DB7..DB4 = 0000  
	PORTF = PORTF & (~(1<<DB7) & ~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4)); //Upper Nibble  
     c16:	81 b3       	in	r24, 0x11	; 17
     c18:	8f 70       	andi	r24, 0x0F	; 15
     c1a:	81 bb       	out	0x11, r24	; 17
	Enable();
     c1c:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Enable>
	
	//DB7..DB4 = 0001  
	PORTF = PORTF & (~(1<<DB7) & ~(1<<DB6) & ~(1<<DB5)); //Lower Nibble  
     c20:	81 b3       	in	r24, 0x11	; 17
     c22:	8f 71       	andi	r24, 0x1F	; 31
     c24:	81 bb       	out	0x11, r24	; 17
	PORTF = PORTF | (1<<DB4);  
     c26:	8c 9a       	sbi	0x11, 4	; 17
	Enable();
     c28:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Enable>
	
	//No Display Shift //  
	//DB7..DB4 = 0000  
	PORTF = PORTF & (~(1<<DB7) & ~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4)); //Upper Nibble  
     c2c:	81 b3       	in	r24, 0x11	; 17
     c2e:	8f 70       	andi	r24, 0x0F	; 15
     c30:	81 bb       	out	0x11, r24	; 17
	Enable();
     c32:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Enable>
	
	//DB7..DB4 = 0011  
	PORTF = PORTF & (~(1<<DB7) & ~(1<<DB6)); //Lower Nibble  
     c36:	81 b3       	in	r24, 0x11	; 17
     c38:	8f 73       	andi	r24, 0x3F	; 63
     c3a:	81 bb       	out	0x11, r24	; 17
	PORTF = PORTF | (1<<DB5) | (1<<DB4);  
     c3c:	81 b3       	in	r24, 0x11	; 17
     c3e:	80 63       	ori	r24, 0x30	; 48
     c40:	81 bb       	out	0x11, r24	; 17
	Enable();
     c42:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Enable>
	
	// Display ON , Cursor ON, Blinken ON //  
	//DB7..DB4 = 0000  
	PORTF = PORTF & (~(1<<DB7) & ~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4)); //Upper Nibble  
     c46:	81 b3       	in	r24, 0x11	; 17
     c48:	8f 70       	andi	r24, 0x0F	; 15
     c4a:	81 bb       	out	0x11, r24	; 17
	Enable();
     c4c:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Enable>
	
	//DB7..DB4 = 1111  
	PORTF = PORTF | (1<<DB7) | (1<<DB6) | (1<<DB5) | (1<<DB4); //Lower Nibble  
     c50:	81 b3       	in	r24, 0x11	; 17
     c52:	80 6f       	ori	r24, 0xF0	; 240
     c54:	81 bb       	out	0x11, r24	; 17
	Enable(); 
     c56:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Enable>
     c5a:	08 95       	ret

00000c5c <LCD_send>:
// LCD_send(..) sendet 1 Byte im 4-Bit Mode 
// 
////////////////////////////////////////////////////////////////////////////

void LCD_send(char data) 
{  
     c5c:	cf 93       	push	r28
     c5e:	c8 2f       	mov	r28, r24
	char temp = data;
	
	PORTB = PORTB | (1<<RS); //SFR vom LCD mit RS auf Daten umschalten      
     c60:	28 9a       	sbi	0x05, 0	; 5
	
	//Upper Nibble senden   
	if (temp & 0b10000000) { PORTF = PORTF | (1<<DB7);}   
     c62:	88 23       	and	r24, r24
     c64:	14 f4       	brge	.+4      	; 0xc6a <LCD_send+0xe>
     c66:	8f 9a       	sbi	0x11, 7	; 17
     c68:	01 c0       	rjmp	.+2      	; 0xc6c <LCD_send+0x10>
	else { PORTF = PORTF & ~(1<<DB7); }
     c6a:	8f 98       	cbi	0x11, 7	; 17
	
	if (temp & 0b01000000) { PORTF = PORTF | (1<<DB6); }   
     c6c:	c6 ff       	sbrs	r28, 6
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <LCD_send+0x18>
     c70:	8e 9a       	sbi	0x11, 6	; 17
     c72:	01 c0       	rjmp	.+2      	; 0xc76 <LCD_send+0x1a>
	else { PORTF = PORTF & ~(1<<DB6); }
     c74:	8e 98       	cbi	0x11, 6	; 17
	
	if (temp & 0b00100000) { PORTF = PORTF | (1<<DB5); }   
     c76:	c5 ff       	sbrs	r28, 5
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <LCD_send+0x22>
     c7a:	8d 9a       	sbi	0x11, 5	; 17
     c7c:	01 c0       	rjmp	.+2      	; 0xc80 <LCD_send+0x24>
	else { PORTF = PORTF & ~(1<<DB5); }
     c7e:	8d 98       	cbi	0x11, 5	; 17
	
	if (temp & 0b00010000) { PORTF = PORTF | (1<<DB4); }   
     c80:	c4 ff       	sbrs	r28, 4
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <LCD_send+0x2c>
     c84:	8c 9a       	sbi	0x11, 4	; 17
     c86:	01 c0       	rjmp	.+2      	; 0xc8a <LCD_send+0x2e>
	else { PORTF = PORTF & ~(1<<DB4); }
     c88:	8c 98       	cbi	0x11, 4	; 17
	
	Enable();   
     c8a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Enable>
	delay_ms(1);       
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 b5 05 	call	0xb6a	; 0xb6a <delay_ms>
	
	//Lower Nibble senden   
	if (temp & 0b00001000) { PORTF = PORTF | (1<<DB7); }
     c96:	c3 ff       	sbrs	r28, 3
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <LCD_send+0x42>
     c9a:	8f 9a       	sbi	0x11, 7	; 17
     c9c:	01 c0       	rjmp	.+2      	; 0xca0 <LCD_send+0x44>
	else { PORTF = PORTF & ~(1<<DB7); }
     c9e:	8f 98       	cbi	0x11, 7	; 17
	
	if (temp & 0b00000100) { PORTF = PORTF | (1<<DB6); }
     ca0:	c2 ff       	sbrs	r28, 2
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <LCD_send+0x4c>
     ca4:	8e 9a       	sbi	0x11, 6	; 17
     ca6:	01 c0       	rjmp	.+2      	; 0xcaa <LCD_send+0x4e>
	else { PORTF = PORTF & ~(1<<DB6); }
     ca8:	8e 98       	cbi	0x11, 6	; 17
	
	if (temp & 0b00000010) { PORTF = PORTF | (1<<DB5); }
     caa:	c1 ff       	sbrs	r28, 1
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <LCD_send+0x56>
     cae:	8d 9a       	sbi	0x11, 5	; 17
     cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <LCD_send+0x58>
	else { PORTF = PORTF & ~(1<<DB5); }
     cb2:	8d 98       	cbi	0x11, 5	; 17
	
	if (temp & 0b00000001) { PORTF = PORTF | (1<<DB4); }   
     cb4:	c0 ff       	sbrs	r28, 0
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <LCD_send+0x60>
     cb8:	8c 9a       	sbi	0x11, 4	; 17
     cba:	01 c0       	rjmp	.+2      	; 0xcbe <LCD_send+0x62>
	else { PORTF = PORTF & ~(1<<DB4); }
     cbc:	8c 98       	cbi	0x11, 4	; 17
	
	Enable();   
     cbe:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Enable>
	delay_ms(1);
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 b5 05 	call	0xb6a	; 0xb6a <delay_ms>
	
}
     cca:	cf 91       	pop	r28
     ccc:	08 95       	ret

00000cce <LCD_cmd>:
// LCD_cmd(..) Befehl senden im 4-Bit Mode 
// 
////////////////////////////////////////////////////////////////////////////

void LCD_cmd(char data) 
{  
     cce:	cf 93       	push	r28
     cd0:	c8 2f       	mov	r28, r24
	char temp = data;
	
	PORTB = PORTB &~ (1<<RS); //SFR vom LCD mit RS auf Befehle umschalten
     cd2:	28 98       	cbi	0x05, 0	; 5
	      
	//Upper Nibble senden   
	if (temp & 0b10000000) { PORTF = PORTF | (1<<DB7); }   
     cd4:	88 23       	and	r24, r24
     cd6:	14 f4       	brge	.+4      	; 0xcdc <LCD_cmd+0xe>
     cd8:	8f 9a       	sbi	0x11, 7	; 17
     cda:	01 c0       	rjmp	.+2      	; 0xcde <LCD_cmd+0x10>
	else { PORTF = PORTF & ~(1<<DB7); }
     cdc:	8f 98       	cbi	0x11, 7	; 17
	
	if (temp & 0b01000000) { PORTF = PORTF | (1<<DB6); }
     cde:	c6 ff       	sbrs	r28, 6
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <LCD_cmd+0x18>
     ce2:	8e 9a       	sbi	0x11, 6	; 17
     ce4:	01 c0       	rjmp	.+2      	; 0xce8 <LCD_cmd+0x1a>
	else { PORTF = PORTF & ~(1<<DB6); }
     ce6:	8e 98       	cbi	0x11, 6	; 17
	
	if (temp & 0b00100000) { PORTF = PORTF | (1<<DB5); }
     ce8:	c5 ff       	sbrs	r28, 5
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <LCD_cmd+0x22>
     cec:	8d 9a       	sbi	0x11, 5	; 17
     cee:	01 c0       	rjmp	.+2      	; 0xcf2 <LCD_cmd+0x24>
	else { PORTF = PORTF & ~(1<<DB5); }
     cf0:	8d 98       	cbi	0x11, 5	; 17
	
	if (temp & 0b00010000) { PORTF = PORTF | (1<<DB4); }
     cf2:	c4 ff       	sbrs	r28, 4
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <LCD_cmd+0x2c>
     cf6:	8c 9a       	sbi	0x11, 4	; 17
     cf8:	01 c0       	rjmp	.+2      	; 0xcfc <LCD_cmd+0x2e>
	else { PORTF = PORTF & ~(1<<DB4); }
     cfa:	8c 98       	cbi	0x11, 4	; 17
	
	Enable();   
     cfc:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Enable>
	delay_ms(1);       
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 b5 05 	call	0xb6a	; 0xb6a <delay_ms>
	
	//Lower Nibble senden   
	if (temp & 0b00001000) { PORTF = PORTF | (1<<DB7); }
     d08:	c3 ff       	sbrs	r28, 3
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <LCD_cmd+0x42>
     d0c:	8f 9a       	sbi	0x11, 7	; 17
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <LCD_cmd+0x44>
	else { PORTF = PORTF & ~(1<<DB7); }
     d10:	8f 98       	cbi	0x11, 7	; 17
	
	if (temp & 0b00000100) { PORTF = PORTF | (1<<DB6); }
     d12:	c2 ff       	sbrs	r28, 2
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <LCD_cmd+0x4c>
     d16:	8e 9a       	sbi	0x11, 6	; 17
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <LCD_cmd+0x4e>
	else { PORTF = PORTF & ~(1<<DB6); }
     d1a:	8e 98       	cbi	0x11, 6	; 17
	
	if (temp & 0b00000010) { PORTF = PORTF | (1<<DB5); }
     d1c:	c1 ff       	sbrs	r28, 1
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <LCD_cmd+0x56>
     d20:	8d 9a       	sbi	0x11, 5	; 17
     d22:	01 c0       	rjmp	.+2      	; 0xd26 <LCD_cmd+0x58>
	else { PORTF = PORTF & ~(1<<DB5); }
     d24:	8d 98       	cbi	0x11, 5	; 17
	
	if (temp & 0b00000001) { PORTF = PORTF | (1<<DB4); }   
     d26:	c0 ff       	sbrs	r28, 0
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <LCD_cmd+0x60>
     d2a:	8c 9a       	sbi	0x11, 4	; 17
     d2c:	01 c0       	rjmp	.+2      	; 0xd30 <LCD_cmd+0x62>
	else { PORTF = PORTF & ~(1<<DB4); }
     d2e:	8c 98       	cbi	0x11, 4	; 17
	
	Enable();   
     d30:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Enable>
	delay_ms(1);
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 b5 05 	call	0xb6a	; 0xb6a <delay_ms>
	
}
     d3c:	cf 91       	pop	r28
     d3e:	08 95       	ret

00000d40 <LCD_string>:
// LCD_string(..) sendet ganzen String im 4-Bit Mode 
// 
//////////////////////////////////////////////////////////////////////////// 

void LCD_string(char *data) 
{      
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	ec 01       	movw	r28, r24
	while (*data != '\0') //bis zum letzten Zeichen            
     d46:	88 81       	ld	r24, Y
     d48:	88 23       	and	r24, r24
     d4a:	31 f0       	breq	.+12     	; 0xd58 <LCD_string+0x18>
     d4c:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_send(*data++);
     d4e:	0e 94 2e 06 	call	0xc5c	; 0xc5c <LCD_send>
// 
//////////////////////////////////////////////////////////////////////////// 

void LCD_string(char *data) 
{      
	while (*data != '\0') //bis zum letzten Zeichen            
     d52:	89 91       	ld	r24, Y+
     d54:	81 11       	cpse	r24, r1
     d56:	fb cf       	rjmp	.-10     	; 0xd4e <LCD_string+0xe>
	{
		LCD_send(*data++);
	} 
} 
     d58:	df 91       	pop	r29
     d5a:	cf 91       	pop	r28
     d5c:	08 95       	ret

00000d5e <LCD_Display>:

void LCD_Display(void)
{
	LCD_cmd(0x80);   //gehe zu 1. Zeile, 1. Position
     d5e:	80 e8       	ldi	r24, 0x80	; 128
     d60:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_cmd>
	LCD_string("Akku:");
     d64:	86 e1       	ldi	r24, 0x16	; 22
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_string>
	/*
	LCD_cmd(0x80);   //gehe zu 1. Zeile, 1. Position
	LCD_string("Drehzahl: ");
	*/
	
	LCD_cmd(0x8f);
     d6c:	8f e8       	ldi	r24, 0x8F	; 143
     d6e:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_cmd>
	LCD_string("U/m");
     d72:	8c e1       	ldi	r24, 0x1C	; 28
     d74:	91 e0       	ldi	r25, 0x01	; 1
     d76:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_string>
	/*
	LCD_cmd(0xC0);   //gehe zu 2. Zeile, 1. Position
	LCD_string("Speed:");
	*/
	
	LCD_cmd(0xcf);
     d7a:	8f ec       	ldi	r24, 0xCF	; 207
     d7c:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_cmd>
	LCD_string("km/h");
     d80:	80 e2       	ldi	r24, 0x20	; 32
     d82:	91 e0       	ldi	r25, 0x01	; 1
     d84:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_string>
     d88:	08 95       	ret

00000d8a <init_timer_zeitlicher_ablauf>:

void init_timer_zeitlicher_ablauf(void)
{
	
	
	TCCR3B = TCCR3B | (1<<CS10);		// Teiler 256 (16MHz / 64 = 4µs)
     d8a:	e1 e9       	ldi	r30, 0x91	; 145
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	81 60       	ori	r24, 0x01	; 1
     d92:	80 83       	st	Z, r24
	TCCR3B = TCCR3B | (1<<CS11);		//Kleiner Schritt 4µs		(1*4µs)
     d94:	80 81       	ld	r24, Z
     d96:	82 60       	ori	r24, 0x02	; 2
     d98:	80 83       	st	Z, r24
	TCCR3B = TCCR3B &~ (1<<CS12);		//Größter Schritt 262ms	(65535*4µs)
     d9a:	80 81       	ld	r24, Z
     d9c:	8b 7f       	andi	r24, 0xFB	; 251
     d9e:	80 83       	st	Z, r24
	
	TIMSK3 = TIMSK3 | (1<<OCIE3A);		//OC3A interrupt
     da0:	e1 e7       	ldi	r30, 0x71	; 113
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	82 60       	ori	r24, 0x02	; 2
     da8:	80 83       	st	Z, r24
	
	OCR3A = 2500;		//25000*4µs = 100ms
     daa:	84 ec       	ldi	r24, 0xC4	; 196
     dac:	99 e0       	ldi	r25, 0x09	; 9
     dae:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     db2:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     db6:	08 95       	ret

00000db8 <main>:
uint16_t nen_test;

int main(void)
{
	
	CLKPR = 0x80;						//Clock prescaler 16MHz
     db8:	e1 e6       	ldi	r30, 0x61	; 97
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 e8       	ldi	r24, 0x80	; 128
     dbe:	80 83       	st	Z, r24
	CLKPR = 0x00;
     dc0:	10 82       	st	Z, r1

	MCUCR = MCUCR | (1<<JTD);			//JTD Schnittstelle ausschalten für PWM6 Mode
     dc2:	85 b7       	in	r24, 0x35	; 53
     dc4:	80 68       	ori	r24, 0x80	; 128
     dc6:	85 bf       	out	0x35, r24	; 53
	MCUCR = MCUCR | (1<<JTD);
     dc8:	85 b7       	in	r24, 0x35	; 53
     dca:	80 68       	ori	r24, 0x80	; 128
     dcc:	85 bf       	out	0x35, r24	; 53
	
	//MOTOR PWM PINS
	DDRC = DDRC | (1<<DDC7);	//OC4A -Pin (PC7) als OUTPUT	//PHASE A
     dce:	3f 9a       	sbi	0x07, 7	; 7
	DDRC = DDRC | (1<<DDC6);	//OC4A#-Pin (PC6) als OUTPUT	//PHASE A
     dd0:	3e 9a       	sbi	0x07, 6	; 7
	DDRB = DDRB | (1<<DDB6);	//OC4B -Pin (PB6) als OUTPUT	//PHASE B
     dd2:	26 9a       	sbi	0x04, 6	; 4
	DDRB = DDRB | (1<<DDB5);	//OC4B#-Pin (PB5) als OUTPUT	//PHASE B
     dd4:	25 9a       	sbi	0x04, 5	; 4
	DDRD = DDRD | (1<<DDD7);	//OC4D -Pin (PD7) als OUTPUT	//PHASE C
     dd6:	57 9a       	sbi	0x0a, 7	; 10
	DDRD = DDRD | (1<<DDD6);	//OC4D#-Pin (PD6) als OUTPUT	//PHASE C
     dd8:	56 9a       	sbi	0x0a, 6	; 10
	
	//HALL SENSORS PINS
	DDRB = DDRB &~ (1<<DDB1);	//PCINT1-Pin (PB1) als INPUT	//HALL A
     dda:	21 98       	cbi	0x04, 1	; 4
	DDRB = DDRB &~ (1<<DDB2);	//PCINT2-Pin (PB2) als INPUT	//HALL B
     ddc:	22 98       	cbi	0x04, 2	; 4
	DDRB = DDRB &~ (1<<DDB3);	//PCINT3-Pin (PB3) als INPUT	//HALL C
     dde:	23 98       	cbi	0x04, 3	; 4
	PORTB = PORTB &~ (1<<PORTB1);	//PULL-UP aus
     de0:	29 98       	cbi	0x05, 1	; 5
	PORTB = PORTB &~ (1<<PORTB2);	//PULL-UP aus
     de2:	2a 98       	cbi	0x05, 2	; 5
	PORTB = PORTB &~ (1<<PORTB3);	//PULL-UP aus
     de4:	2b 98       	cbi	0x05, 3	; 5

	//Vorwärts - Rückwärts Schalter
	DDRB = DDRB &~ (1<<DDB4);	//PB4 als INPUT		//vorwärts / rückwärst Schalter
     de6:	24 98       	cbi	0x04, 4	; 4
	PORTB = PORTB | (1<<PORTB4);	//PULL-UP
     de8:	2c 9a       	sbi	0x05, 4	; 5
	
	//Shutdown Pin	
	DDRE = DDRE | (1<<DDE6);	//Shutdown-Pin (PE6) als OUTPUT
     dea:	6e 9a       	sbi	0x0d, 6	; 13
	PORTE = PORTE &~ (1<<PORTE6);	//Shutdown-Pin auf HIGH -> da er LOW-AKTIVE ist 
     dec:	76 98       	cbi	0x0e, 6	; 14
	
	//ADC
	DDRF = DDRF &~ (1<<DDF0);	//ADC0-Pin (PF0) als INPUT
     dee:	80 98       	cbi	0x10, 0	; 16
	
	//LCD - Pins
	DDRB = DDRB | (1<<PORTB0);		//RS (PB0) als OUTPUT
     df0:	20 9a       	sbi	0x04, 0	; 4
	DDRF = DDRF | (1<<PORTF1);		//Enable (PF1) als OUTPUT
     df2:	81 9a       	sbi	0x10, 1	; 16
	DDRF = DDRF | (1<<PORTF7);		//LCD-DB7 (PF7 µC) als OUTPUT
     df4:	87 9a       	sbi	0x10, 7	; 16
	DDRF = DDRF | (1<<PORTF6);		//LCD-DB6 (PF6 µC) als OUTPUT
     df6:	86 9a       	sbi	0x10, 6	; 16
	DDRF = DDRF | (1<<PORTF5);		//LCD-DB5 (PF5 µC) als OUTPUT
     df8:	85 9a       	sbi	0x10, 5	; 16
	DDRF = DDRF | (1<<PORTF4);		//LCD-DB4 (PF4 µC) als OUTPUT
     dfa:	84 9a       	sbi	0x10, 4	; 16
	
	//UART
	PORTD = PORTD | (1<<PORTD2);		// pull up um keine störungen einzufangen
     dfc:	5a 9a       	sbi	0x0b, 2	; 11
	
	//MOSFET für Relai
	DDRD = DDRD &~ (1<<DDD4);	//MOSFET PIN 	
     dfe:	54 98       	cbi	0x0a, 4	; 10
	
	//Modi Schalter
	DDRD = DDRD &~ (1<<DDD0);
     e00:	50 98       	cbi	0x0a, 0	; 10
	PORTD = PORTD | (1<<PORTD0);		//Pull-up
     e02:	58 9a       	sbi	0x0b, 0	; 11
	
	
	//Debug-Pins
	DDRB = DDRB | (1<<DDB7);
     e04:	27 9a       	sbi	0x04, 7	; 4
	
	
	Init_Pinchange();	//Initialisierung Hallsensoren
     e06:	0e 94 b4 07 	call	0xf68	; 0xf68 <Init_Pinchange>
	
	Init_PWM();			//Initialisierung 6-fach PWM signale
     e0a:	0e 94 73 07 	call	0xee6	; 0xee6 <Init_PWM>
	
	Init_ADC();			//Initialisierung ADC
     e0e:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <Init_ADC>
	
	Init_Timer1();		//Initialisierung Berechnungen Geschw. Drehzahl
     e12:	0e 94 75 00 	call	0xea	; 0xea <Init_Timer1>
	
	init_usart();				//Initialisierung von Kommunikationsschnittstelle UART
     e16:	0e 94 75 04 	call	0x8ea	; 0x8ea <init_usart>
	init_transmission_timer();	//Initaliesierung von Timer0 für UART
     e1a:	0e 94 a2 04 	call	0x944	; 0x944 <init_transmission_timer>
	
	
	init_timer_zeitlicher_ablauf();
     e1e:	0e 94 c5 06 	call	0xd8a	; 0xd8a <init_timer_zeitlicher_ablauf>
	
	
	LCD_init();			//Initialisierung  LCD
     e22:	0e 94 d0 05 	call	0xba0	; 0xba0 <LCD_init>
	LCD_cmd(0x0C);		//Display ON, Cursor OFF, Blinking OFF 
     e26:	8c e0       	ldi	r24, 0x0C	; 12
     e28:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_cmd>
	
	Hallsensoren_abfragen();
     e2c:	0e 94 05 08 	call	0x100a	; 0x100a <Hallsensoren_abfragen>
		
	sei();
     e30:	78 94       	sei
	
	LCD_Display();		//Drezahl, Geschwindkeit schreiben
     e32:	0e 94 af 06 	call	0xd5e	; 0xd5e <LCD_Display>
     e36:	2f ef       	ldi	r18, 0xFF	; 255
     e38:	87 ea       	ldi	r24, 0xA7	; 167
     e3a:	91 e6       	ldi	r25, 0x61	; 97
     e3c:	21 50       	subi	r18, 0x01	; 1
     e3e:	80 40       	sbci	r24, 0x00	; 0
     e40:	90 40       	sbci	r25, 0x00	; 0
     e42:	e1 f7       	brne	.-8      	; 0xe3c <main+0x84>
     e44:	00 c0       	rjmp	.+0      	; 0xe46 <main+0x8e>
     e46:	00 00       	nop
	
	
	_delay_ms(2000);
	
	PORTE = PORTE &~ (1<<PORTE6);	//Shutdown-Pin auf HIGH -> da er LOW-AKTIVE ist   //muss noch geändert werden!!!!!
     e48:	76 98       	cbi	0x0e, 6	; 14
	PORTD = PORTD | (1<<PORTD4);
     e4a:	5c 9a       	sbi	0x0b, 4	; 11
	
	//Für Anfangsausgabe
	preset_drehzahl_gesch();
     e4c:	0e 94 99 02 	call	0x532	; 0x532 <preset_drehzahl_gesch>
	
	zeitlicher_ablauf=0;
     e50:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <zeitlicher_ablauf>
	
    while (1) 
    {	

						
		if(zeitlicher_ablauf >= 10)
     e54:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <zeitlicher_ablauf>
     e58:	8a 30       	cpi	r24, 0x0A	; 10
     e5a:	e0 f3       	brcs	.-8      	; 0xe54 <main+0x9c>
		{
			
			ges_spannung_main=ges_spannung_uebertragung();
     e5c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <ges_spannung_uebertragung>
     e60:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <ges_spannung_main+0x1>
     e64:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <ges_spannung_main>

			geschwindigkeit_berechnung();
     e68:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <geschwindigkeit_berechnung>
			ladestand_test = akku_ladestand(ges_spannung_main);
     e6c:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <ges_spannung_main>
     e70:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <ges_spannung_main+0x1>
     e74:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <akku_ladestand>
     e78:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <ladestand_test>
			ladestand_ausgabe(ladestand_test);
     e7c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <ladestand_ausgabe>
			
			nen_test = temperatur_uebertragung();
     e80:	0e 94 30 05 	call	0xa60	; 0xa60 <temperatur_uebertragung>
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <nen_test+0x1>
     e8a:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <nen_test>
			

			//dtostrf((float)drehzahl, 5, 0, ausgabe);
			drehzahl_ausgabe();	
     e8e:	0e 94 3b 02 	call	0x476	; 0x476 <drehzahl_ausgabe>
		
			//dtostrf((float)geschwindigkeit, 5, 0, ausgabe);
			geschwindigkeits_ausgabe();
     e92:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <geschwindigkeits_ausgabe>
			
		
			zeitlicher_ablauf=0;
     e96:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <zeitlicher_ablauf>
     e9a:	dc cf       	rjmp	.-72     	; 0xe54 <main+0x9c>

00000e9c <__vector_32>:
	//OCR3AL = 168;
	
}

ISR(TIMER3_COMPA_vect)
{
     e9c:	1f 92       	push	r1
     e9e:	0f 92       	push	r0
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	0f 92       	push	r0
     ea4:	11 24       	eor	r1, r1
     ea6:	8f 93       	push	r24
	TCNT3 = 0;
     ea8:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     eac:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
	
	
	if(zeitlicher_ablauf >= 25)
     eb0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <zeitlicher_ablauf>
     eb4:	89 31       	cpi	r24, 0x19	; 25
     eb6:	10 f0       	brcs	.+4      	; 0xebc <__vector_32+0x20>
	{
		
		zeitlicher_ablauf=0;
     eb8:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <zeitlicher_ablauf>
	}
	
	zeitlicher_ablauf++;
     ebc:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <zeitlicher_ablauf>
     ec0:	8f 5f       	subi	r24, 0xFF	; 255
     ec2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <zeitlicher_ablauf>
	

}
     ec6:	8f 91       	pop	r24
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

00000ed2 <__vector_33>:
ISR(TIMER3_COMPB_vect)
{
     ed2:	1f 92       	push	r1
     ed4:	0f 92       	push	r0
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	0f 92       	push	r0
     eda:	11 24       	eor	r1, r1
	
}
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	0f 90       	pop	r0
     ee2:	1f 90       	pop	r1
     ee4:	18 95       	reti

00000ee6 <Init_PWM>:

char adc_counter=0;

char hilfe;

void Init_PWM (void){
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
	
	TCCR4B = TCCR4B &~ (1<<CS40);		//CLKT4 Teiler auf 8 gesetzt -> 2MHz
     eea:	e1 ec       	ldi	r30, 0xC1	; 193
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	8e 7f       	andi	r24, 0xFE	; 254
     ef2:	80 83       	st	Z, r24
	TCCR4B = TCCR4B &~ (1<<CS41);
     ef4:	80 81       	ld	r24, Z
     ef6:	8d 7f       	andi	r24, 0xFD	; 253
     ef8:	80 83       	st	Z, r24
	TCCR4B = TCCR4B | (1<<CS42);
     efa:	80 81       	ld	r24, Z
     efc:	84 60       	ori	r24, 0x04	; 4
     efe:	80 83       	st	Z, r24
	TCCR4B = TCCR4B &~ (1<<CS43);
     f00:	80 81       	ld	r24, Z
     f02:	87 7f       	andi	r24, 0xF7	; 247
     f04:	80 83       	st	Z, r24
	
	TCCR4A = TCCR4A | (1<<PWM4A);
     f06:	a0 ec       	ldi	r26, 0xC0	; 192
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	8c 91       	ld	r24, X
     f0c:	82 60       	ori	r24, 0x02	; 2
     f0e:	8c 93       	st	X, r24
	TCCR4D = TCCR4D &~ (1<<WGM40);		//PWM6 mode Single slope
     f10:	c3 ec       	ldi	r28, 0xC3	; 195
     f12:	d0 e0       	ldi	r29, 0x00	; 0
     f14:	88 81       	ld	r24, Y
     f16:	8e 7f       	andi	r24, 0xFE	; 254
     f18:	88 83       	st	Y, r24
	TCCR4D = TCCR4D | (1<<WGM41);
     f1a:	88 81       	ld	r24, Y
     f1c:	82 60       	ori	r24, 0x02	; 2
     f1e:	88 83       	st	Y, r24
	
	TCCR4A = TCCR4A | (1<<COM4A0);		//OC4A pins belegung wenn PWM6 mode ausgewählt ist
     f20:	8c 91       	ld	r24, X
     f22:	80 64       	ori	r24, 0x40	; 64
     f24:	8c 93       	st	X, r24
	TCCR4A = TCCR4A &~ (1<<COM4A1);
     f26:	8c 91       	ld	r24, X
     f28:	8f 77       	andi	r24, 0x7F	; 127
     f2a:	8c 93       	st	X, r24
	
	TCCR4A = TCCR4A | (1<<COM4B0);		//Alle 6 Pins freischalten
     f2c:	8c 91       	ld	r24, X
     f2e:	80 61       	ori	r24, 0x10	; 16
     f30:	8c 93       	st	X, r24
	TCCR4A = TCCR4A &~ (1<<COM4B1);
     f32:	8c 91       	ld	r24, X
     f34:	8f 7d       	andi	r24, 0xDF	; 223
     f36:	8c 93       	st	X, r24
	TCCR4C = TCCR4C | (1<<COM4D0);
     f38:	a2 ec       	ldi	r26, 0xC2	; 194
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	8c 91       	ld	r24, X
     f3e:	84 60       	ori	r24, 0x04	; 4
     f40:	8c 93       	st	X, r24
	TCCR4C = TCCR4C &~ (1<<COM4D1);
     f42:	8c 91       	ld	r24, X
     f44:	87 7f       	andi	r24, 0xF7	; 247
     f46:	8c 93       	st	X, r24
	
	TCCR4B = TCCR4B &~ (1<<DTPS40);		//Death Time presacler auf 1
     f48:	80 81       	ld	r24, Z
     f4a:	8f 7e       	andi	r24, 0xEF	; 239
     f4c:	80 83       	st	Z, r24
	TCCR4B = TCCR4B &~ (1<<DTPS41);
     f4e:	80 81       	ld	r24, Z
     f50:	8f 7d       	andi	r24, 0xDF	; 223
     f52:	80 83       	st	Z, r24
	
	//TCCR4B = TCCR4B | (1<<PWM4X);		//Inversion mode -> kann die ausgänge invertieren bei 1
	
	//TIMSK4 = TIMSK4 | (OCIE4A);
	
	OCR4C = 255;						//200*500ns = 100µs = 10kHz  //umgeändert auf 255 test zwecke
     f54:	8f ef       	ldi	r24, 0xFF	; 255
     f56:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7e00d1>

	TCCR4E = 0x00;						//Start
     f5a:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	DT4 = 0xff;		//500ns = 0x88;					//Death time
     f5e:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7e00d4>
	
}
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret

00000f68 <Init_Pinchange>:
 void Init_Pinchange( void )
 {
	PCICR =  PCICR | (1<<PCIE0);		//Enable pin change interrupt0 wenn 1 interrupt von den interrupts auslöst (PORTB)
     f68:	e8 e6       	ldi	r30, 0x68	; 104
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	81 60       	ori	r24, 0x01	; 1
     f70:	80 83       	st	Z, r24
	 
	PCMSK0 = PCMSK0 | (1<<PCINT1);		//Enable pin change interrupt on PB1
     f72:	eb e6       	ldi	r30, 0x6B	; 107
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	82 60       	ori	r24, 0x02	; 2
     f7a:	80 83       	st	Z, r24
	PCMSK0 = PCMSK0 | (1<<PCINT2);		//Enable pin change interrupt on PB2
     f7c:	80 81       	ld	r24, Z
     f7e:	84 60       	ori	r24, 0x04	; 4
     f80:	80 83       	st	Z, r24
	PCMSK0 = PCMSK0 | (1<<PCINT3);		//Enable pin change interrupt on PB3
     f82:	80 81       	ld	r24, Z
     f84:	88 60       	ori	r24, 0x08	; 8
     f86:	80 83       	st	Z, r24
	PCMSK0 = PCMSK0 | (1<<PCINT4);		//Enable pin change interrupt on PB4 für Schalter
     f88:	80 81       	ld	r24, Z
     f8a:	80 61       	ori	r24, 0x10	; 16
     f8c:	80 83       	st	Z, r24

	
	//Externer Interrupt für Umschalter
	EICRA = EICRA | (1<<ISC00);		//Interrupt bei low pegel
     f8e:	e9 e6       	ldi	r30, 0x69	; 105
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	81 60       	ori	r24, 0x01	; 1
     f96:	80 83       	st	Z, r24
	EICRA = EICRA &~ (1<<ISC01);
     f98:	80 81       	ld	r24, Z
     f9a:	8d 7f       	andi	r24, 0xFD	; 253
     f9c:	80 83       	st	Z, r24
	
	EIMSK = EIMSK | (1<<INT0);		//Externer Interrupt 0 freischalten
     f9e:	e8 9a       	sbi	0x1d, 0	; 29
     fa0:	08 95       	ret

00000fa2 <Init_ADC>:
	
 }
 void Init_ADC(void)
 {
	 ADMUX = ADMUX | (1<<REFS0);  //Vref=AVCC
     fa2:	ec e7       	ldi	r30, 0x7C	; 124
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	80 64       	ori	r24, 0x40	; 64
     faa:	80 83       	st	Z, r24
	 ADMUX = ADMUX &~(1<<REFS1);
     fac:	80 81       	ld	r24, Z
     fae:	8f 77       	andi	r24, 0x7F	; 127
     fb0:	80 83       	st	Z, r24
	 
	 ADMUX  = ADMUX | (1<<ADLAR);  //linksbündig
     fb2:	80 81       	ld	r24, Z
     fb4:	80 62       	ori	r24, 0x20	; 32
     fb6:	80 83       	st	Z, r24
	 
	 ADMUX = ADMUX &~ (1<<MUX0);	//single ended measurement
     fb8:	80 81       	ld	r24, Z
     fba:	8e 7f       	andi	r24, 0xFE	; 254
     fbc:	80 83       	st	Z, r24
	 ADMUX = ADMUX &~ (1<<MUX1);	//auf ADC0 (PF0)
     fbe:	80 81       	ld	r24, Z
     fc0:	8d 7f       	andi	r24, 0xFD	; 253
     fc2:	80 83       	st	Z, r24
	 ADMUX = ADMUX &~ (1<<MUX2);
     fc4:	80 81       	ld	r24, Z
     fc6:	8b 7f       	andi	r24, 0xFB	; 251
     fc8:	80 83       	st	Z, r24
	 ADMUX = ADMUX &~ (1<<MUX3);
     fca:	80 81       	ld	r24, Z
     fcc:	87 7f       	andi	r24, 0xF7	; 247
     fce:	80 83       	st	Z, r24
	 ADMUX = ADMUX &~ (1<<MUX4);
     fd0:	80 81       	ld	r24, Z
     fd2:	8f 7e       	andi	r24, 0xEF	; 239
     fd4:	80 83       	st	Z, r24
	 ADCSRB = ADCSRB &~ (1<<MUX5);
     fd6:	eb e7       	ldi	r30, 0x7B	; 123
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8f 7d       	andi	r24, 0xDF	; 223
     fde:	80 83       	st	Z, r24
	 
	 ADCSRA = ADCSRA | (1<<ADEN);		//ADC einschalten
     fe0:	ea e7       	ldi	r30, 0x7A	; 122
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	80 68       	ori	r24, 0x80	; 128
     fe8:	80 83       	st	Z, r24
	 ADCSRA = ADCSRA | (1<<ADIE);	//ADC Interrupt freischalten
     fea:	80 81       	ld	r24, Z
     fec:	88 60       	ori	r24, 0x08	; 8
     fee:	80 83       	st	Z, r24
	 
	 ADCSRA = ADCSRA &~ (1<<ADPS0);	//Prescaler für ADC-Clock
     ff0:	80 81       	ld	r24, Z
     ff2:	8e 7f       	andi	r24, 0xFE	; 254
     ff4:	80 83       	st	Z, r24
	 ADCSRA = ADCSRA | (1<<ADPS1);	//64 Teiler
     ff6:	80 81       	ld	r24, Z
     ff8:	82 60       	ori	r24, 0x02	; 2
     ffa:	80 83       	st	Z, r24
	 ADCSRA = ADCSRA | (1<<ADPS2);
     ffc:	80 81       	ld	r24, Z
     ffe:	84 60       	ori	r24, 0x04	; 4
    1000:	80 83       	st	Z, r24
	 
	 ADCSRA = ADCSRA | (1<<ADSC);	//Wandlung starten
    1002:	80 81       	ld	r24, Z
    1004:	80 64       	ori	r24, 0x40	; 64
    1006:	80 83       	st	Z, r24
    1008:	08 95       	ret

0000100a <Hallsensoren_abfragen>:
	 
 }
void Hallsensoren_abfragen(void)
{
	stufe = PINB & 0x0e;
    100a:	83 b1       	in	r24, 0x03	; 3
	stufe = stufe/2;		//herunterbrechen von XXX0 -> 0XXXX			z.b. 1110 -> 0111
    100c:	8e 70       	andi	r24, 0x0E	; 14
    100e:	86 95       	lsr	r24
    1010:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <stufe>
	
	
	
	if (umschalt_null())		//Drehzahl abfrage
    1014:	0e 94 aa 02 	call	0x554	; 0x554 <umschalt_null>
    1018:	88 23       	and	r24, r24
    101a:	49 f0       	breq	.+18     	; 0x102e <Hallsensoren_abfragen+0x24>
	{
		//Abrage mit Drehzahl noch nötig
		if((PINB & (1<<PINB4)) == 0x00)
    101c:	1c 99       	sbic	0x03, 4	; 3
    101e:	04 c0       	rjmp	.+8      	; 0x1028 <Hallsensoren_abfragen+0x1e>
		{
			vor = 1;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <vor>
    1026:	08 c0       	rjmp	.+16     	; 0x1038 <Hallsensoren_abfragen+0x2e>
		}
		else
		{
			vor = 0;
    1028:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <vor>
    102c:	6d c0       	rjmp	.+218    	; 0x1108 <Hallsensoren_abfragen+0xfe>
		}
	}
	
	
	if(vor)		//Schalter AUS(vorwärts)	ACHTUNG: es wird PINB abgefragt nicht sufe (0x10)
    102e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <vor>
    1032:	88 23       	and	r24, r24
    1034:	09 f4       	brne	.+2      	; 0x1038 <Hallsensoren_abfragen+0x2e>
    1036:	68 c0       	rjmp	.+208    	; 0x1108 <Hallsensoren_abfragen+0xfe>
	{
		
		switch(stufe)
    1038:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <stufe>
    103c:	83 30       	cpi	r24, 0x03	; 3
    103e:	49 f1       	breq	.+82     	; 0x1092 <Hallsensoren_abfragen+0x88>
    1040:	28 f4       	brcc	.+10     	; 0x104c <Hallsensoren_abfragen+0x42>
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	c1 f0       	breq	.+48     	; 0x1076 <Hallsensoren_abfragen+0x6c>
    1046:	82 30       	cpi	r24, 0x02	; 2
    1048:	91 f1       	breq	.+100    	; 0x10ae <Hallsensoren_abfragen+0xa4>
    104a:	5b c0       	rjmp	.+182    	; 0x1102 <Hallsensoren_abfragen+0xf8>
    104c:	85 30       	cpi	r24, 0x05	; 5
    104e:	29 f0       	breq	.+10     	; 0x105a <Hallsensoren_abfragen+0x50>
    1050:	08 f4       	brcc	.+2      	; 0x1054 <Hallsensoren_abfragen+0x4a>
    1052:	49 c0       	rjmp	.+146    	; 0x10e6 <Hallsensoren_abfragen+0xdc>
    1054:	86 30       	cpi	r24, 0x06	; 6
    1056:	c9 f1       	breq	.+114    	; 0x10ca <Hallsensoren_abfragen+0xc0>
    1058:	54 c0       	rjmp	.+168    	; 0x1102 <Hallsensoren_abfragen+0xf8>
		{
			case 0x05:				//HALL_A + HALL_C
			{
				TCCR4E = 0x00;
    105a:	e4 ec       	ldi	r30, 0xC4	; 196
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	10 82       	st	Z, r1
				PORTB = PHASE_B_OFF;
    1060:	85 b1       	in	r24, 0x05	; 5
    1062:	8f 79       	andi	r24, 0x9F	; 159
    1064:	85 b9       	out	0x05, r24	; 5
				//PORTD = PHASE_C_GND1;
				//PORTD = PHASE_C_GND2;
				PORTD = PHASE_C_GND;
    1066:	8b b1       	in	r24, 0x0b	; 11
    1068:	8f 73       	andi	r24, 0x3F	; 63
    106a:	80 64       	ori	r24, 0x40	; 64
    106c:	8b b9       	out	0x0b, r24	; 11
				//TCCR4E = TCCR4E | (1<<OC4OE0)|(1<<OC4OE1);
				TCCR4E = PHASE_A_PWM;
    106e:	80 81       	ld	r24, Z
    1070:	83 60       	ori	r24, 0x03	; 3
    1072:	80 83       	st	Z, r24
				break;
    1074:	08 95       	ret
			}
			case 0x01:				//HALL_A
			{
				TCCR4E = 0x00;
    1076:	e4 ec       	ldi	r30, 0xC4	; 196
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	10 82       	st	Z, r1
				PORTC = PHASE_A_OFF;
    107c:	88 b1       	in	r24, 0x08	; 8
    107e:	8f 73       	andi	r24, 0x3F	; 63
    1080:	88 b9       	out	0x08, r24	; 8
				//PORTD = PHASE_C_GND1;
				//PORTD = PHASE_C_GND2;
				PORTD = PHASE_C_GND;
    1082:	8b b1       	in	r24, 0x0b	; 11
    1084:	8f 73       	andi	r24, 0x3F	; 63
    1086:	80 64       	ori	r24, 0x40	; 64
    1088:	8b b9       	out	0x0b, r24	; 11
				//TCCR4E = TCCR4E | (1<<OC4OE2) | (1<<OC4OE3);
				TCCR4E = PHASE_B_PWM;
    108a:	80 81       	ld	r24, Z
    108c:	8c 60       	ori	r24, 0x0C	; 12
    108e:	80 83       	st	Z, r24
				break;
    1090:	08 95       	ret
			}
			case 0x03:				//HALL_A + HALL_B
			{
				TCCR4E = 0x00;
    1092:	e4 ec       	ldi	r30, 0xC4	; 196
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	10 82       	st	Z, r1
				PORTD = PHASE_C_OFF;
    1098:	8b b1       	in	r24, 0x0b	; 11
    109a:	8f 73       	andi	r24, 0x3F	; 63
    109c:	8b b9       	out	0x0b, r24	; 11
				//PORTC = PHASE_A_GND1;
				//PORTC = PHASE_A_GND2;
				PORTC = PHASE_A_GND;
    109e:	88 b1       	in	r24, 0x08	; 8
    10a0:	8f 73       	andi	r24, 0x3F	; 63
    10a2:	80 64       	ori	r24, 0x40	; 64
    10a4:	88 b9       	out	0x08, r24	; 8
				//TCCR4E = TCCR4E | (1<<OC4OE2) | (1<<OC4OE3);
				TCCR4E = PHASE_B_PWM;
    10a6:	80 81       	ld	r24, Z
    10a8:	8c 60       	ori	r24, 0x0C	; 12
    10aa:	80 83       	st	Z, r24
				break;
    10ac:	08 95       	ret
			}
			case 0x02:				//HALL_B
			{
				TCCR4E = 0x00;
    10ae:	e4 ec       	ldi	r30, 0xC4	; 196
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	10 82       	st	Z, r1
				PORTB = PHASE_B_OFF;
    10b4:	85 b1       	in	r24, 0x05	; 5
    10b6:	8f 79       	andi	r24, 0x9F	; 159
    10b8:	85 b9       	out	0x05, r24	; 5
				//PORTC = PHASE_A_GND1;
				//PORTC = PHASE_A_GND2;
				PORTC = PHASE_A_GND;
    10ba:	88 b1       	in	r24, 0x08	; 8
    10bc:	8f 73       	andi	r24, 0x3F	; 63
    10be:	80 64       	ori	r24, 0x40	; 64
    10c0:	88 b9       	out	0x08, r24	; 8
				//TCCR4E = TCCR4E | (1<<OC4OE5)|(1<<OC4OE4);
				TCCR4E = PHASE_C_PWM;
    10c2:	80 81       	ld	r24, Z
    10c4:	80 63       	ori	r24, 0x30	; 48
    10c6:	80 83       	st	Z, r24
				break;
    10c8:	08 95       	ret
			}
			case 0x06:			//HALL_B + HALL_C
			{
				TCCR4E = 0x00;
    10ca:	e4 ec       	ldi	r30, 0xC4	; 196
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	10 82       	st	Z, r1
				PORTC = PHASE_A_OFF;
    10d0:	88 b1       	in	r24, 0x08	; 8
    10d2:	8f 73       	andi	r24, 0x3F	; 63
    10d4:	88 b9       	out	0x08, r24	; 8
				//PORTB = PHASE_B_GND1;
				//PORTB = PHASE_B_GND2;
				PORTB = PHASE_B_GND;
    10d6:	85 b1       	in	r24, 0x05	; 5
    10d8:	8f 79       	andi	r24, 0x9F	; 159
    10da:	80 62       	ori	r24, 0x20	; 32
    10dc:	85 b9       	out	0x05, r24	; 5
				//TCCR4E = TCCR4E | (1<<OC4OE5)|(1<<OC4OE4);
				TCCR4E = PHASE_C_PWM;
    10de:	80 81       	ld	r24, Z
    10e0:	80 63       	ori	r24, 0x30	; 48
    10e2:	80 83       	st	Z, r24
				break;
    10e4:	08 95       	ret
			}
			case 0x04:			//HALL_C
			{
				TCCR4E = 0x00;
    10e6:	e4 ec       	ldi	r30, 0xC4	; 196
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	10 82       	st	Z, r1
				PORTD = PHASE_C_OFF;
    10ec:	8b b1       	in	r24, 0x0b	; 11
    10ee:	8f 73       	andi	r24, 0x3F	; 63
    10f0:	8b b9       	out	0x0b, r24	; 11
				//PORTB = PHASE_B_GND1;
				//PORTB = PHASE_B_GND2;
				PORTB = PHASE_B_GND;
    10f2:	85 b1       	in	r24, 0x05	; 5
    10f4:	8f 79       	andi	r24, 0x9F	; 159
    10f6:	80 62       	ori	r24, 0x20	; 32
    10f8:	85 b9       	out	0x05, r24	; 5
				//TCCR4E = TCCR4E | (1<<OC4OE0)|(1<<OC4OE1);
				TCCR4E = PHASE_A_PWM;
    10fa:	80 81       	ld	r24, Z
    10fc:	83 60       	ori	r24, 0x03	; 3
    10fe:	80 83       	st	Z, r24
				break;
    1100:	08 95       	ret
			}
			default:
			{
				TCCR4E = 0x00;
    1102:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1106:	08 95       	ret
		}	//Klammen Switch
		
	}	//Klemmen if
	else			//Schalter EIN(rückwärts) LOW-AKTIV		ACHTUNG: es wird PINB abgefragt nicht stufe (0x10)
	{
		switch(stufe)
    1108:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <stufe>
    110c:	83 30       	cpi	r24, 0x03	; 3
    110e:	49 f1       	breq	.+82     	; 0x1162 <Hallsensoren_abfragen+0x158>
    1110:	28 f4       	brcc	.+10     	; 0x111c <Hallsensoren_abfragen+0x112>
    1112:	81 30       	cpi	r24, 0x01	; 1
    1114:	c1 f0       	breq	.+48     	; 0x1146 <Hallsensoren_abfragen+0x13c>
    1116:	82 30       	cpi	r24, 0x02	; 2
    1118:	91 f1       	breq	.+100    	; 0x117e <Hallsensoren_abfragen+0x174>
    111a:	5b c0       	rjmp	.+182    	; 0x11d2 <Hallsensoren_abfragen+0x1c8>
    111c:	85 30       	cpi	r24, 0x05	; 5
    111e:	29 f0       	breq	.+10     	; 0x112a <Hallsensoren_abfragen+0x120>
    1120:	08 f4       	brcc	.+2      	; 0x1124 <Hallsensoren_abfragen+0x11a>
    1122:	49 c0       	rjmp	.+146    	; 0x11b6 <Hallsensoren_abfragen+0x1ac>
    1124:	86 30       	cpi	r24, 0x06	; 6
    1126:	c9 f1       	breq	.+114    	; 0x119a <Hallsensoren_abfragen+0x190>
    1128:	54 c0       	rjmp	.+168    	; 0x11d2 <Hallsensoren_abfragen+0x1c8>
		{
			case 0x05:			//HALL_A + HALL_C
			{
				TCCR4E = 0x00;
    112a:	e4 ec       	ldi	r30, 0xC4	; 196
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	10 82       	st	Z, r1
				PORTB = PHASE_B_OFF;
    1130:	85 b1       	in	r24, 0x05	; 5
    1132:	8f 79       	andi	r24, 0x9F	; 159
    1134:	85 b9       	out	0x05, r24	; 5
				//PORTC = PHASE_A_GND1;
				//PORTC = PHASE_A_GND2;
				PORTC = PHASE_A_GND;
    1136:	88 b1       	in	r24, 0x08	; 8
    1138:	8f 73       	andi	r24, 0x3F	; 63
    113a:	80 64       	ori	r24, 0x40	; 64
    113c:	88 b9       	out	0x08, r24	; 8
				//TCCR4E = TCCR4E | (1<<OC4OE5)|(1<<OC4OE4);
				TCCR4E = PHASE_C_PWM;
    113e:	80 81       	ld	r24, Z
    1140:	80 63       	ori	r24, 0x30	; 48
    1142:	80 83       	st	Z, r24
				break;
    1144:	08 95       	ret
			}
			case 0x01:			//HALL_A
			{
				TCCR4E = 0x00;
    1146:	e4 ec       	ldi	r30, 0xC4	; 196
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	10 82       	st	Z, r1
				PORTC = PHASE_A_OFF;
    114c:	88 b1       	in	r24, 0x08	; 8
    114e:	8f 73       	andi	r24, 0x3F	; 63
    1150:	88 b9       	out	0x08, r24	; 8
				//PORTB = PHASE_B_GND1;
				//PORTB = PHASE_B_GND2;
				PORTB = PHASE_B_GND;
    1152:	85 b1       	in	r24, 0x05	; 5
    1154:	8f 79       	andi	r24, 0x9F	; 159
    1156:	80 62       	ori	r24, 0x20	; 32
    1158:	85 b9       	out	0x05, r24	; 5
				//TCCR4E = TCCR4E | (1<<OC4OE5)|(1<<OC4OE4);
				TCCR4E = PHASE_C_PWM;
    115a:	80 81       	ld	r24, Z
    115c:	80 63       	ori	r24, 0x30	; 48
    115e:	80 83       	st	Z, r24
				break;
    1160:	08 95       	ret
			}
			case 0x03:			//HALL_A + HALL_B
			{
				TCCR4E = 0x00;
    1162:	e4 ec       	ldi	r30, 0xC4	; 196
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	10 82       	st	Z, r1
				PORTD = PHASE_C_OFF;
    1168:	8b b1       	in	r24, 0x0b	; 11
    116a:	8f 73       	andi	r24, 0x3F	; 63
    116c:	8b b9       	out	0x0b, r24	; 11
				//PORTB = PHASE_B_GND1;
				//PORTB = PHASE_B_GND2;
				PORTB = PHASE_B_GND;
    116e:	85 b1       	in	r24, 0x05	; 5
    1170:	8f 79       	andi	r24, 0x9F	; 159
    1172:	80 62       	ori	r24, 0x20	; 32
    1174:	85 b9       	out	0x05, r24	; 5
				//TCCR4E = TCCR4E | (1<<OC4OE0)|(1<<OC4OE1);
				TCCR4E = PHASE_A_PWM;
    1176:	80 81       	ld	r24, Z
    1178:	83 60       	ori	r24, 0x03	; 3
    117a:	80 83       	st	Z, r24
				break;
    117c:	08 95       	ret
			}
			case 0x02:			//HALL_B
			{
				TCCR4E = 0x00;
    117e:	e4 ec       	ldi	r30, 0xC4	; 196
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	10 82       	st	Z, r1
				PORTB = PHASE_B_OFF;
    1184:	85 b1       	in	r24, 0x05	; 5
    1186:	8f 79       	andi	r24, 0x9F	; 159
    1188:	85 b9       	out	0x05, r24	; 5
				//PORTD = PHASE_C_GND1;
				//PORTD = PHASE_C_GND2;
				PORTD = PHASE_C_GND;
    118a:	8b b1       	in	r24, 0x0b	; 11
    118c:	8f 73       	andi	r24, 0x3F	; 63
    118e:	80 64       	ori	r24, 0x40	; 64
    1190:	8b b9       	out	0x0b, r24	; 11
				//TCCR4E = TCCR4E | (1<<OC4OE0)|(1<<OC4OE1);
				TCCR4E = PHASE_A_PWM;
    1192:	80 81       	ld	r24, Z
    1194:	83 60       	ori	r24, 0x03	; 3
    1196:	80 83       	st	Z, r24
				break;
    1198:	08 95       	ret
			}
			case 0x06:			//HALL_B + HALL_C
			{
				TCCR4E = 0x00;
    119a:	e4 ec       	ldi	r30, 0xC4	; 196
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	10 82       	st	Z, r1
				PORTC = PHASE_A_OFF;
    11a0:	88 b1       	in	r24, 0x08	; 8
    11a2:	8f 73       	andi	r24, 0x3F	; 63
    11a4:	88 b9       	out	0x08, r24	; 8
				//PORTD = PHASE_C_GND1;
				//PORTD = PHASE_C_GND2;
				PORTD = PHASE_C_GND;
    11a6:	8b b1       	in	r24, 0x0b	; 11
    11a8:	8f 73       	andi	r24, 0x3F	; 63
    11aa:	80 64       	ori	r24, 0x40	; 64
    11ac:	8b b9       	out	0x0b, r24	; 11
				//TCCR4E = TCCR4E | (1<<OC4OE2) | (1<<OC4OE3);
				TCCR4E = PHASE_B_PWM;
    11ae:	80 81       	ld	r24, Z
    11b0:	8c 60       	ori	r24, 0x0C	; 12
    11b2:	80 83       	st	Z, r24
				break;
    11b4:	08 95       	ret
			}
			case 0x04:			//HALL_C
			{
				TCCR4E = 0x00;
    11b6:	e4 ec       	ldi	r30, 0xC4	; 196
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	10 82       	st	Z, r1
				PORTD = PHASE_C_OFF;
    11bc:	8b b1       	in	r24, 0x0b	; 11
    11be:	8f 73       	andi	r24, 0x3F	; 63
    11c0:	8b b9       	out	0x0b, r24	; 11
				//PORTC = PHASE_A_GND1;
				//PORTC = PHASE_A_GND2;
				PORTC = PHASE_A_GND;
    11c2:	88 b1       	in	r24, 0x08	; 8
    11c4:	8f 73       	andi	r24, 0x3F	; 63
    11c6:	80 64       	ori	r24, 0x40	; 64
    11c8:	88 b9       	out	0x08, r24	; 8
				//TCCR4E = TCCR4E | (1<<OC4OE2) | (1<<OC4OE3);
				TCCR4E = PHASE_B_PWM;
    11ca:	80 81       	ld	r24, Z
    11cc:	8c 60       	ori	r24, 0x0C	; 12
    11ce:	80 83       	st	Z, r24
				break;
    11d0:	08 95       	ret
			}
			default:
			{
				TCCR4E = 0x00;
    11d2:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    11d6:	08 95       	ret

000011d8 <__vector_9>:
	}
}


ISR(PCINT0_vect)
{
    11d8:	1f 92       	push	r1
    11da:	0f 92       	push	r0
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	0f 92       	push	r0
    11e0:	11 24       	eor	r1, r1
    11e2:	2f 93       	push	r18
    11e4:	3f 93       	push	r19
    11e6:	4f 93       	push	r20
    11e8:	5f 93       	push	r21
    11ea:	6f 93       	push	r22
    11ec:	7f 93       	push	r23
    11ee:	8f 93       	push	r24
    11f0:	9f 93       	push	r25
    11f2:	af 93       	push	r26
    11f4:	bf 93       	push	r27
    11f6:	ef 93       	push	r30
    11f8:	ff 93       	push	r31
	
	Hallsensoren_abfragen();
    11fa:	0e 94 05 08 	call	0x100a	; 0x100a <Hallsensoren_abfragen>
	
	geschwindigkeit_auslesen();
    11fe:	0e 94 86 00 	call	0x10c	; 0x10c <geschwindigkeit_auslesen>
	drehzahl_berechnung();
    1202:	0e 94 93 00 	call	0x126	; 0x126 <drehzahl_berechnung>

	
}	//Klammer Pin change
    1206:	ff 91       	pop	r31
    1208:	ef 91       	pop	r30
    120a:	bf 91       	pop	r27
    120c:	af 91       	pop	r26
    120e:	9f 91       	pop	r25
    1210:	8f 91       	pop	r24
    1212:	7f 91       	pop	r23
    1214:	6f 91       	pop	r22
    1216:	5f 91       	pop	r21
    1218:	4f 91       	pop	r20
    121a:	3f 91       	pop	r19
    121c:	2f 91       	pop	r18
    121e:	0f 90       	pop	r0
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	0f 90       	pop	r0
    1224:	1f 90       	pop	r1
    1226:	18 95       	reti

00001228 <__vector_1>:
ISR(INT0_vect)
{
    1228:	1f 92       	push	r1
    122a:	0f 92       	push	r0
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	0f 92       	push	r0
    1230:	11 24       	eor	r1, r1
    1232:	8f 93       	push	r24
	///		Vorwärts - Rückwärts	 ///
	if((PIND & (1<<PIND0)) == 0x01)		//Schalter AUS(vorwärts)	ACHTUNG: es wird PINB abgefragt nicht sufe (0x10)
    1234:	48 9b       	sbis	0x09, 0	; 9
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <__vector_1+0x18>
	{
			richtung = 1;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <richtung>
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <__vector_1+0x1c>
	}
	else
	{
			richtung = 0;
    1240:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <richtung>
	}

}
    1244:	8f 91       	pop	r24
    1246:	0f 90       	pop	r0
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	0f 90       	pop	r0
    124c:	1f 90       	pop	r1
    124e:	18 95       	reti

00001250 <__vector_29>:
ISR(ADC_vect)						//Löst aus, wenn die Konversation beendet ist
{
    1250:	1f 92       	push	r1
    1252:	0f 92       	push	r0
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	0f 92       	push	r0
    1258:	11 24       	eor	r1, r1
    125a:	2f 93       	push	r18
    125c:	3f 93       	push	r19
    125e:	4f 93       	push	r20
    1260:	5f 93       	push	r21
    1262:	6f 93       	push	r22
    1264:	7f 93       	push	r23
    1266:	8f 93       	push	r24
    1268:	9f 93       	push	r25
    126a:	af 93       	push	r26
    126c:	bf 93       	push	r27
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	ef 93       	push	r30
    1274:	ff 93       	push	r31

	
	adc_low = ADCL;					//zuerst immer Low Bits holen
    1276:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    127a:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <adc_low>
	adc_high = ADCH;				//dann High Bits holen
    127e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	if(adc_high >= 250)
    1282:	8a 3f       	cpi	r24, 0xFA	; 250
    1284:	18 f4       	brcc	.+6      	; 0x128c <__vector_29+0x3c>
ISR(ADC_vect)						//Löst aus, wenn die Konversation beendet ist
{

	
	adc_low = ADCL;					//zuerst immer Low Bits holen
	adc_high = ADCH;				//dann High Bits holen
    1286:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <adc_high>
    128a:	03 c0       	rjmp	.+6      	; 0x1292 <__vector_29+0x42>
	if(adc_high >= 250)
	{
		adc_high = 250;
    128c:	8a ef       	ldi	r24, 0xFA	; 250
    128e:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <adc_high>
	
	//OCR4A = adc_high;
	
	
	
	if (adc_counter >= 20)
    1292:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <adc_counter>
    1296:	84 31       	cpi	r24, 0x14	; 20
    1298:	80 f0       	brcs	.+32     	; 0x12ba <__vector_29+0x6a>
	{
		adc_counter = 0;
    129a:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <adc_counter>
		
		current_adc_wert = OCR4A;
    129e:	cf ec       	ldi	r28, 0xCF	; 207
    12a0:	d0 e0       	ldi	r29, 0x00	; 0
    12a2:	68 81       	ld	r22, Y
    12a4:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <current_adc_wert>
		
		
		
		OCR4A = geschwindigkeits_regulierung(adc_high,current_adc_wert);
    12a8:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <adc_high>
    12ac:	0e 94 0a 03 	call	0x614	; 0x614 <geschwindigkeits_regulierung>
    12b0:	88 83       	st	Y, r24
		
		hilfe = OCR4A;
    12b2:	88 81       	ld	r24, Y
    12b4:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <hilfe>
    12b8:	03 c0       	rjmp	.+6      	; 0x12c0 <__vector_29+0x70>
				
	}
	else
	{
		adc_counter++;
    12ba:	8f 5f       	subi	r24, 0xFF	; 255
    12bc:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <adc_counter>
	}
	

	ADCSRA = ADCSRA | (1<<ADSC);	//Wandlung starten
    12c0:	ea e7       	ldi	r30, 0x7A	; 122
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	80 64       	ori	r24, 0x40	; 64
    12c8:	80 83       	st	Z, r24
}
    12ca:	ff 91       	pop	r31
    12cc:	ef 91       	pop	r30
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	bf 91       	pop	r27
    12d4:	af 91       	pop	r26
    12d6:	9f 91       	pop	r25
    12d8:	8f 91       	pop	r24
    12da:	7f 91       	pop	r23
    12dc:	6f 91       	pop	r22
    12de:	5f 91       	pop	r21
    12e0:	4f 91       	pop	r20
    12e2:	3f 91       	pop	r19
    12e4:	2f 91       	pop	r18
    12e6:	0f 90       	pop	r0
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	0f 90       	pop	r0
    12ec:	1f 90       	pop	r1
    12ee:	18 95       	reti

000012f0 <__subsf3>:
    12f0:	50 58       	subi	r21, 0x80	; 128

000012f2 <__addsf3>:
    12f2:	bb 27       	eor	r27, r27
    12f4:	aa 27       	eor	r26, r26
    12f6:	0e 94 90 09 	call	0x1320	; 0x1320 <__addsf3x>
    12fa:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__fp_round>
    12fe:	0e 94 35 0b 	call	0x166a	; 0x166a <__fp_pscA>
    1302:	38 f0       	brcs	.+14     	; 0x1312 <__addsf3+0x20>
    1304:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__fp_pscB>
    1308:	20 f0       	brcs	.+8      	; 0x1312 <__addsf3+0x20>
    130a:	39 f4       	brne	.+14     	; 0x131a <__addsf3+0x28>
    130c:	9f 3f       	cpi	r25, 0xFF	; 255
    130e:	19 f4       	brne	.+6      	; 0x1316 <__addsf3+0x24>
    1310:	26 f4       	brtc	.+8      	; 0x131a <__addsf3+0x28>
    1312:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__fp_nan>
    1316:	0e f4       	brtc	.+2      	; 0x131a <__addsf3+0x28>
    1318:	e0 95       	com	r30
    131a:	e7 fb       	bst	r30, 7
    131c:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__fp_inf>

00001320 <__addsf3x>:
    1320:	e9 2f       	mov	r30, r25
    1322:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fp_split3>
    1326:	58 f3       	brcs	.-42     	; 0x12fe <__addsf3+0xc>
    1328:	ba 17       	cp	r27, r26
    132a:	62 07       	cpc	r22, r18
    132c:	73 07       	cpc	r23, r19
    132e:	84 07       	cpc	r24, r20
    1330:	95 07       	cpc	r25, r21
    1332:	20 f0       	brcs	.+8      	; 0x133c <__addsf3x+0x1c>
    1334:	79 f4       	brne	.+30     	; 0x1354 <__addsf3x+0x34>
    1336:	a6 f5       	brtc	.+104    	; 0x13a0 <__addsf3x+0x80>
    1338:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__fp_zero>
    133c:	0e f4       	brtc	.+2      	; 0x1340 <__addsf3x+0x20>
    133e:	e0 95       	com	r30
    1340:	0b 2e       	mov	r0, r27
    1342:	ba 2f       	mov	r27, r26
    1344:	a0 2d       	mov	r26, r0
    1346:	0b 01       	movw	r0, r22
    1348:	b9 01       	movw	r22, r18
    134a:	90 01       	movw	r18, r0
    134c:	0c 01       	movw	r0, r24
    134e:	ca 01       	movw	r24, r20
    1350:	a0 01       	movw	r20, r0
    1352:	11 24       	eor	r1, r1
    1354:	ff 27       	eor	r31, r31
    1356:	59 1b       	sub	r21, r25
    1358:	99 f0       	breq	.+38     	; 0x1380 <__addsf3x+0x60>
    135a:	59 3f       	cpi	r21, 0xF9	; 249
    135c:	50 f4       	brcc	.+20     	; 0x1372 <__addsf3x+0x52>
    135e:	50 3e       	cpi	r21, 0xE0	; 224
    1360:	68 f1       	brcs	.+90     	; 0x13bc <__addsf3x+0x9c>
    1362:	1a 16       	cp	r1, r26
    1364:	f0 40       	sbci	r31, 0x00	; 0
    1366:	a2 2f       	mov	r26, r18
    1368:	23 2f       	mov	r18, r19
    136a:	34 2f       	mov	r19, r20
    136c:	44 27       	eor	r20, r20
    136e:	58 5f       	subi	r21, 0xF8	; 248
    1370:	f3 cf       	rjmp	.-26     	; 0x1358 <__addsf3x+0x38>
    1372:	46 95       	lsr	r20
    1374:	37 95       	ror	r19
    1376:	27 95       	ror	r18
    1378:	a7 95       	ror	r26
    137a:	f0 40       	sbci	r31, 0x00	; 0
    137c:	53 95       	inc	r21
    137e:	c9 f7       	brne	.-14     	; 0x1372 <__addsf3x+0x52>
    1380:	7e f4       	brtc	.+30     	; 0x13a0 <__addsf3x+0x80>
    1382:	1f 16       	cp	r1, r31
    1384:	ba 0b       	sbc	r27, r26
    1386:	62 0b       	sbc	r22, r18
    1388:	73 0b       	sbc	r23, r19
    138a:	84 0b       	sbc	r24, r20
    138c:	ba f0       	brmi	.+46     	; 0x13bc <__addsf3x+0x9c>
    138e:	91 50       	subi	r25, 0x01	; 1
    1390:	a1 f0       	breq	.+40     	; 0x13ba <__addsf3x+0x9a>
    1392:	ff 0f       	add	r31, r31
    1394:	bb 1f       	adc	r27, r27
    1396:	66 1f       	adc	r22, r22
    1398:	77 1f       	adc	r23, r23
    139a:	88 1f       	adc	r24, r24
    139c:	c2 f7       	brpl	.-16     	; 0x138e <__addsf3x+0x6e>
    139e:	0e c0       	rjmp	.+28     	; 0x13bc <__addsf3x+0x9c>
    13a0:	ba 0f       	add	r27, r26
    13a2:	62 1f       	adc	r22, r18
    13a4:	73 1f       	adc	r23, r19
    13a6:	84 1f       	adc	r24, r20
    13a8:	48 f4       	brcc	.+18     	; 0x13bc <__addsf3x+0x9c>
    13aa:	87 95       	ror	r24
    13ac:	77 95       	ror	r23
    13ae:	67 95       	ror	r22
    13b0:	b7 95       	ror	r27
    13b2:	f7 95       	ror	r31
    13b4:	9e 3f       	cpi	r25, 0xFE	; 254
    13b6:	08 f0       	brcs	.+2      	; 0x13ba <__addsf3x+0x9a>
    13b8:	b0 cf       	rjmp	.-160    	; 0x131a <__addsf3+0x28>
    13ba:	93 95       	inc	r25
    13bc:	88 0f       	add	r24, r24
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <__addsf3x+0xa2>
    13c0:	99 27       	eor	r25, r25
    13c2:	ee 0f       	add	r30, r30
    13c4:	97 95       	ror	r25
    13c6:	87 95       	ror	r24
    13c8:	08 95       	ret

000013ca <ceil>:
    13ca:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__fp_trunc>
    13ce:	90 f0       	brcs	.+36     	; 0x13f4 <ceil+0x2a>
    13d0:	9f 37       	cpi	r25, 0x7F	; 127
    13d2:	48 f4       	brcc	.+18     	; 0x13e6 <ceil+0x1c>
    13d4:	91 11       	cpse	r25, r1
    13d6:	16 f4       	brtc	.+4      	; 0x13dc <ceil+0x12>
    13d8:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__fp_szero>
    13dc:	60 e0       	ldi	r22, 0x00	; 0
    13de:	70 e0       	ldi	r23, 0x00	; 0
    13e0:	80 e8       	ldi	r24, 0x80	; 128
    13e2:	9f e3       	ldi	r25, 0x3F	; 63
    13e4:	08 95       	ret
    13e6:	26 f0       	brts	.+8      	; 0x13f0 <ceil+0x26>
    13e8:	1b 16       	cp	r1, r27
    13ea:	61 1d       	adc	r22, r1
    13ec:	71 1d       	adc	r23, r1
    13ee:	81 1d       	adc	r24, r1
    13f0:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__fp_mintl>
    13f4:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_mpack>

000013f8 <__cmpsf2>:
    13f8:	0e 94 df 0a 	call	0x15be	; 0x15be <__fp_cmp>
    13fc:	08 f4       	brcc	.+2      	; 0x1400 <__cmpsf2+0x8>
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	08 95       	ret

00001402 <__divsf3>:
    1402:	0e 94 15 0a 	call	0x142a	; 0x142a <__divsf3x>
    1406:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__fp_round>
    140a:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__fp_pscB>
    140e:	58 f0       	brcs	.+22     	; 0x1426 <__divsf3+0x24>
    1410:	0e 94 35 0b 	call	0x166a	; 0x166a <__fp_pscA>
    1414:	40 f0       	brcs	.+16     	; 0x1426 <__divsf3+0x24>
    1416:	29 f4       	brne	.+10     	; 0x1422 <__divsf3+0x20>
    1418:	5f 3f       	cpi	r21, 0xFF	; 255
    141a:	29 f0       	breq	.+10     	; 0x1426 <__divsf3+0x24>
    141c:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__fp_inf>
    1420:	51 11       	cpse	r21, r1
    1422:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__fp_szero>
    1426:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__fp_nan>

0000142a <__divsf3x>:
    142a:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fp_split3>
    142e:	68 f3       	brcs	.-38     	; 0x140a <__divsf3+0x8>

00001430 <__divsf3_pse>:
    1430:	99 23       	and	r25, r25
    1432:	b1 f3       	breq	.-20     	; 0x1420 <__divsf3+0x1e>
    1434:	55 23       	and	r21, r21
    1436:	91 f3       	breq	.-28     	; 0x141c <__divsf3+0x1a>
    1438:	95 1b       	sub	r25, r21
    143a:	55 0b       	sbc	r21, r21
    143c:	bb 27       	eor	r27, r27
    143e:	aa 27       	eor	r26, r26
    1440:	62 17       	cp	r22, r18
    1442:	73 07       	cpc	r23, r19
    1444:	84 07       	cpc	r24, r20
    1446:	38 f0       	brcs	.+14     	; 0x1456 <__divsf3_pse+0x26>
    1448:	9f 5f       	subi	r25, 0xFF	; 255
    144a:	5f 4f       	sbci	r21, 0xFF	; 255
    144c:	22 0f       	add	r18, r18
    144e:	33 1f       	adc	r19, r19
    1450:	44 1f       	adc	r20, r20
    1452:	aa 1f       	adc	r26, r26
    1454:	a9 f3       	breq	.-22     	; 0x1440 <__divsf3_pse+0x10>
    1456:	35 d0       	rcall	.+106    	; 0x14c2 <__divsf3_pse+0x92>
    1458:	0e 2e       	mov	r0, r30
    145a:	3a f0       	brmi	.+14     	; 0x146a <__divsf3_pse+0x3a>
    145c:	e0 e8       	ldi	r30, 0x80	; 128
    145e:	32 d0       	rcall	.+100    	; 0x14c4 <__divsf3_pse+0x94>
    1460:	91 50       	subi	r25, 0x01	; 1
    1462:	50 40       	sbci	r21, 0x00	; 0
    1464:	e6 95       	lsr	r30
    1466:	00 1c       	adc	r0, r0
    1468:	ca f7       	brpl	.-14     	; 0x145c <__divsf3_pse+0x2c>
    146a:	2b d0       	rcall	.+86     	; 0x14c2 <__divsf3_pse+0x92>
    146c:	fe 2f       	mov	r31, r30
    146e:	29 d0       	rcall	.+82     	; 0x14c2 <__divsf3_pse+0x92>
    1470:	66 0f       	add	r22, r22
    1472:	77 1f       	adc	r23, r23
    1474:	88 1f       	adc	r24, r24
    1476:	bb 1f       	adc	r27, r27
    1478:	26 17       	cp	r18, r22
    147a:	37 07       	cpc	r19, r23
    147c:	48 07       	cpc	r20, r24
    147e:	ab 07       	cpc	r26, r27
    1480:	b0 e8       	ldi	r27, 0x80	; 128
    1482:	09 f0       	breq	.+2      	; 0x1486 <__divsf3_pse+0x56>
    1484:	bb 0b       	sbc	r27, r27
    1486:	80 2d       	mov	r24, r0
    1488:	bf 01       	movw	r22, r30
    148a:	ff 27       	eor	r31, r31
    148c:	93 58       	subi	r25, 0x83	; 131
    148e:	5f 4f       	sbci	r21, 0xFF	; 255
    1490:	3a f0       	brmi	.+14     	; 0x14a0 <__divsf3_pse+0x70>
    1492:	9e 3f       	cpi	r25, 0xFE	; 254
    1494:	51 05       	cpc	r21, r1
    1496:	78 f0       	brcs	.+30     	; 0x14b6 <__divsf3_pse+0x86>
    1498:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__fp_inf>
    149c:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__fp_szero>
    14a0:	5f 3f       	cpi	r21, 0xFF	; 255
    14a2:	e4 f3       	brlt	.-8      	; 0x149c <__divsf3_pse+0x6c>
    14a4:	98 3e       	cpi	r25, 0xE8	; 232
    14a6:	d4 f3       	brlt	.-12     	; 0x149c <__divsf3_pse+0x6c>
    14a8:	86 95       	lsr	r24
    14aa:	77 95       	ror	r23
    14ac:	67 95       	ror	r22
    14ae:	b7 95       	ror	r27
    14b0:	f7 95       	ror	r31
    14b2:	9f 5f       	subi	r25, 0xFF	; 255
    14b4:	c9 f7       	brne	.-14     	; 0x14a8 <__divsf3_pse+0x78>
    14b6:	88 0f       	add	r24, r24
    14b8:	91 1d       	adc	r25, r1
    14ba:	96 95       	lsr	r25
    14bc:	87 95       	ror	r24
    14be:	97 f9       	bld	r25, 7
    14c0:	08 95       	ret
    14c2:	e1 e0       	ldi	r30, 0x01	; 1
    14c4:	66 0f       	add	r22, r22
    14c6:	77 1f       	adc	r23, r23
    14c8:	88 1f       	adc	r24, r24
    14ca:	bb 1f       	adc	r27, r27
    14cc:	62 17       	cp	r22, r18
    14ce:	73 07       	cpc	r23, r19
    14d0:	84 07       	cpc	r24, r20
    14d2:	ba 07       	cpc	r27, r26
    14d4:	20 f0       	brcs	.+8      	; 0x14de <__divsf3_pse+0xae>
    14d6:	62 1b       	sub	r22, r18
    14d8:	73 0b       	sbc	r23, r19
    14da:	84 0b       	sbc	r24, r20
    14dc:	ba 0b       	sbc	r27, r26
    14de:	ee 1f       	adc	r30, r30
    14e0:	88 f7       	brcc	.-30     	; 0x14c4 <__divsf3_pse+0x94>
    14e2:	e0 95       	com	r30
    14e4:	08 95       	ret

000014e6 <__fixunssfsi>:
    14e6:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__fp_splitA>
    14ea:	88 f0       	brcs	.+34     	; 0x150e <__fixunssfsi+0x28>
    14ec:	9f 57       	subi	r25, 0x7F	; 127
    14ee:	98 f0       	brcs	.+38     	; 0x1516 <__fixunssfsi+0x30>
    14f0:	b9 2f       	mov	r27, r25
    14f2:	99 27       	eor	r25, r25
    14f4:	b7 51       	subi	r27, 0x17	; 23
    14f6:	b0 f0       	brcs	.+44     	; 0x1524 <__fixunssfsi+0x3e>
    14f8:	e1 f0       	breq	.+56     	; 0x1532 <__fixunssfsi+0x4c>
    14fa:	66 0f       	add	r22, r22
    14fc:	77 1f       	adc	r23, r23
    14fe:	88 1f       	adc	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	1a f0       	brmi	.+6      	; 0x150a <__fixunssfsi+0x24>
    1504:	ba 95       	dec	r27
    1506:	c9 f7       	brne	.-14     	; 0x14fa <__fixunssfsi+0x14>
    1508:	14 c0       	rjmp	.+40     	; 0x1532 <__fixunssfsi+0x4c>
    150a:	b1 30       	cpi	r27, 0x01	; 1
    150c:	91 f0       	breq	.+36     	; 0x1532 <__fixunssfsi+0x4c>
    150e:	0e 94 8e 0b 	call	0x171c	; 0x171c <__fp_zero>
    1512:	b1 e0       	ldi	r27, 0x01	; 1
    1514:	08 95       	ret
    1516:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__fp_zero>
    151a:	67 2f       	mov	r22, r23
    151c:	78 2f       	mov	r23, r24
    151e:	88 27       	eor	r24, r24
    1520:	b8 5f       	subi	r27, 0xF8	; 248
    1522:	39 f0       	breq	.+14     	; 0x1532 <__fixunssfsi+0x4c>
    1524:	b9 3f       	cpi	r27, 0xF9	; 249
    1526:	cc f3       	brlt	.-14     	; 0x151a <__fixunssfsi+0x34>
    1528:	86 95       	lsr	r24
    152a:	77 95       	ror	r23
    152c:	67 95       	ror	r22
    152e:	b3 95       	inc	r27
    1530:	d9 f7       	brne	.-10     	; 0x1528 <__fixunssfsi+0x42>
    1532:	3e f4       	brtc	.+14     	; 0x1542 <__fixunssfsi+0x5c>
    1534:	90 95       	com	r25
    1536:	80 95       	com	r24
    1538:	70 95       	com	r23
    153a:	61 95       	neg	r22
    153c:	7f 4f       	sbci	r23, 0xFF	; 255
    153e:	8f 4f       	sbci	r24, 0xFF	; 255
    1540:	9f 4f       	sbci	r25, 0xFF	; 255
    1542:	08 95       	ret

00001544 <__floatunsisf>:
    1544:	e8 94       	clt
    1546:	09 c0       	rjmp	.+18     	; 0x155a <__floatsisf+0x12>

00001548 <__floatsisf>:
    1548:	97 fb       	bst	r25, 7
    154a:	3e f4       	brtc	.+14     	; 0x155a <__floatsisf+0x12>
    154c:	90 95       	com	r25
    154e:	80 95       	com	r24
    1550:	70 95       	com	r23
    1552:	61 95       	neg	r22
    1554:	7f 4f       	sbci	r23, 0xFF	; 255
    1556:	8f 4f       	sbci	r24, 0xFF	; 255
    1558:	9f 4f       	sbci	r25, 0xFF	; 255
    155a:	99 23       	and	r25, r25
    155c:	a9 f0       	breq	.+42     	; 0x1588 <__floatsisf+0x40>
    155e:	f9 2f       	mov	r31, r25
    1560:	96 e9       	ldi	r25, 0x96	; 150
    1562:	bb 27       	eor	r27, r27
    1564:	93 95       	inc	r25
    1566:	f6 95       	lsr	r31
    1568:	87 95       	ror	r24
    156a:	77 95       	ror	r23
    156c:	67 95       	ror	r22
    156e:	b7 95       	ror	r27
    1570:	f1 11       	cpse	r31, r1
    1572:	f8 cf       	rjmp	.-16     	; 0x1564 <__floatsisf+0x1c>
    1574:	fa f4       	brpl	.+62     	; 0x15b4 <__floatsisf+0x6c>
    1576:	bb 0f       	add	r27, r27
    1578:	11 f4       	brne	.+4      	; 0x157e <__floatsisf+0x36>
    157a:	60 ff       	sbrs	r22, 0
    157c:	1b c0       	rjmp	.+54     	; 0x15b4 <__floatsisf+0x6c>
    157e:	6f 5f       	subi	r22, 0xFF	; 255
    1580:	7f 4f       	sbci	r23, 0xFF	; 255
    1582:	8f 4f       	sbci	r24, 0xFF	; 255
    1584:	9f 4f       	sbci	r25, 0xFF	; 255
    1586:	16 c0       	rjmp	.+44     	; 0x15b4 <__floatsisf+0x6c>
    1588:	88 23       	and	r24, r24
    158a:	11 f0       	breq	.+4      	; 0x1590 <__floatsisf+0x48>
    158c:	96 e9       	ldi	r25, 0x96	; 150
    158e:	11 c0       	rjmp	.+34     	; 0x15b2 <__floatsisf+0x6a>
    1590:	77 23       	and	r23, r23
    1592:	21 f0       	breq	.+8      	; 0x159c <__floatsisf+0x54>
    1594:	9e e8       	ldi	r25, 0x8E	; 142
    1596:	87 2f       	mov	r24, r23
    1598:	76 2f       	mov	r23, r22
    159a:	05 c0       	rjmp	.+10     	; 0x15a6 <__floatsisf+0x5e>
    159c:	66 23       	and	r22, r22
    159e:	71 f0       	breq	.+28     	; 0x15bc <__floatsisf+0x74>
    15a0:	96 e8       	ldi	r25, 0x86	; 134
    15a2:	86 2f       	mov	r24, r22
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	2a f0       	brmi	.+10     	; 0x15b4 <__floatsisf+0x6c>
    15aa:	9a 95       	dec	r25
    15ac:	66 0f       	add	r22, r22
    15ae:	77 1f       	adc	r23, r23
    15b0:	88 1f       	adc	r24, r24
    15b2:	da f7       	brpl	.-10     	; 0x15aa <__floatsisf+0x62>
    15b4:	88 0f       	add	r24, r24
    15b6:	96 95       	lsr	r25
    15b8:	87 95       	ror	r24
    15ba:	97 f9       	bld	r25, 7
    15bc:	08 95       	ret

000015be <__fp_cmp>:
    15be:	99 0f       	add	r25, r25
    15c0:	00 08       	sbc	r0, r0
    15c2:	55 0f       	add	r21, r21
    15c4:	aa 0b       	sbc	r26, r26
    15c6:	e0 e8       	ldi	r30, 0x80	; 128
    15c8:	fe ef       	ldi	r31, 0xFE	; 254
    15ca:	16 16       	cp	r1, r22
    15cc:	17 06       	cpc	r1, r23
    15ce:	e8 07       	cpc	r30, r24
    15d0:	f9 07       	cpc	r31, r25
    15d2:	c0 f0       	brcs	.+48     	; 0x1604 <__fp_cmp+0x46>
    15d4:	12 16       	cp	r1, r18
    15d6:	13 06       	cpc	r1, r19
    15d8:	e4 07       	cpc	r30, r20
    15da:	f5 07       	cpc	r31, r21
    15dc:	98 f0       	brcs	.+38     	; 0x1604 <__fp_cmp+0x46>
    15de:	62 1b       	sub	r22, r18
    15e0:	73 0b       	sbc	r23, r19
    15e2:	84 0b       	sbc	r24, r20
    15e4:	95 0b       	sbc	r25, r21
    15e6:	39 f4       	brne	.+14     	; 0x15f6 <__fp_cmp+0x38>
    15e8:	0a 26       	eor	r0, r26
    15ea:	61 f0       	breq	.+24     	; 0x1604 <__fp_cmp+0x46>
    15ec:	23 2b       	or	r18, r19
    15ee:	24 2b       	or	r18, r20
    15f0:	25 2b       	or	r18, r21
    15f2:	21 f4       	brne	.+8      	; 0x15fc <__fp_cmp+0x3e>
    15f4:	08 95       	ret
    15f6:	0a 26       	eor	r0, r26
    15f8:	09 f4       	brne	.+2      	; 0x15fc <__fp_cmp+0x3e>
    15fa:	a1 40       	sbci	r26, 0x01	; 1
    15fc:	a6 95       	lsr	r26
    15fe:	8f ef       	ldi	r24, 0xFF	; 255
    1600:	81 1d       	adc	r24, r1
    1602:	81 1d       	adc	r24, r1
    1604:	08 95       	ret

00001606 <__fp_inf>:
    1606:	97 f9       	bld	r25, 7
    1608:	9f 67       	ori	r25, 0x7F	; 127
    160a:	80 e8       	ldi	r24, 0x80	; 128
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	08 95       	ret

00001612 <__fp_mintl>:
    1612:	88 23       	and	r24, r24
    1614:	71 f4       	brne	.+28     	; 0x1632 <__fp_mintl+0x20>
    1616:	77 23       	and	r23, r23
    1618:	21 f0       	breq	.+8      	; 0x1622 <__fp_mintl+0x10>
    161a:	98 50       	subi	r25, 0x08	; 8
    161c:	87 2b       	or	r24, r23
    161e:	76 2f       	mov	r23, r22
    1620:	07 c0       	rjmp	.+14     	; 0x1630 <__fp_mintl+0x1e>
    1622:	66 23       	and	r22, r22
    1624:	11 f4       	brne	.+4      	; 0x162a <__fp_mintl+0x18>
    1626:	99 27       	eor	r25, r25
    1628:	0d c0       	rjmp	.+26     	; 0x1644 <__fp_mintl+0x32>
    162a:	90 51       	subi	r25, 0x10	; 16
    162c:	86 2b       	or	r24, r22
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	2a f0       	brmi	.+10     	; 0x163e <__fp_mintl+0x2c>
    1634:	9a 95       	dec	r25
    1636:	66 0f       	add	r22, r22
    1638:	77 1f       	adc	r23, r23
    163a:	88 1f       	adc	r24, r24
    163c:	da f7       	brpl	.-10     	; 0x1634 <__fp_mintl+0x22>
    163e:	88 0f       	add	r24, r24
    1640:	96 95       	lsr	r25
    1642:	87 95       	ror	r24
    1644:	97 f9       	bld	r25, 7
    1646:	08 95       	ret

00001648 <__fp_mpack>:
    1648:	9f 3f       	cpi	r25, 0xFF	; 255
    164a:	31 f0       	breq	.+12     	; 0x1658 <__fp_mpack_finite+0xc>

0000164c <__fp_mpack_finite>:
    164c:	91 50       	subi	r25, 0x01	; 1
    164e:	20 f4       	brcc	.+8      	; 0x1658 <__fp_mpack_finite+0xc>
    1650:	87 95       	ror	r24
    1652:	77 95       	ror	r23
    1654:	67 95       	ror	r22
    1656:	b7 95       	ror	r27
    1658:	88 0f       	add	r24, r24
    165a:	91 1d       	adc	r25, r1
    165c:	96 95       	lsr	r25
    165e:	87 95       	ror	r24
    1660:	97 f9       	bld	r25, 7
    1662:	08 95       	ret

00001664 <__fp_nan>:
    1664:	9f ef       	ldi	r25, 0xFF	; 255
    1666:	80 ec       	ldi	r24, 0xC0	; 192
    1668:	08 95       	ret

0000166a <__fp_pscA>:
    166a:	00 24       	eor	r0, r0
    166c:	0a 94       	dec	r0
    166e:	16 16       	cp	r1, r22
    1670:	17 06       	cpc	r1, r23
    1672:	18 06       	cpc	r1, r24
    1674:	09 06       	cpc	r0, r25
    1676:	08 95       	ret

00001678 <__fp_pscB>:
    1678:	00 24       	eor	r0, r0
    167a:	0a 94       	dec	r0
    167c:	12 16       	cp	r1, r18
    167e:	13 06       	cpc	r1, r19
    1680:	14 06       	cpc	r1, r20
    1682:	05 06       	cpc	r0, r21
    1684:	08 95       	ret

00001686 <__fp_round>:
    1686:	09 2e       	mov	r0, r25
    1688:	03 94       	inc	r0
    168a:	00 0c       	add	r0, r0
    168c:	11 f4       	brne	.+4      	; 0x1692 <__fp_round+0xc>
    168e:	88 23       	and	r24, r24
    1690:	52 f0       	brmi	.+20     	; 0x16a6 <__fp_round+0x20>
    1692:	bb 0f       	add	r27, r27
    1694:	40 f4       	brcc	.+16     	; 0x16a6 <__fp_round+0x20>
    1696:	bf 2b       	or	r27, r31
    1698:	11 f4       	brne	.+4      	; 0x169e <__fp_round+0x18>
    169a:	60 ff       	sbrs	r22, 0
    169c:	04 c0       	rjmp	.+8      	; 0x16a6 <__fp_round+0x20>
    169e:	6f 5f       	subi	r22, 0xFF	; 255
    16a0:	7f 4f       	sbci	r23, 0xFF	; 255
    16a2:	8f 4f       	sbci	r24, 0xFF	; 255
    16a4:	9f 4f       	sbci	r25, 0xFF	; 255
    16a6:	08 95       	ret

000016a8 <__fp_split3>:
    16a8:	57 fd       	sbrc	r21, 7
    16aa:	90 58       	subi	r25, 0x80	; 128
    16ac:	44 0f       	add	r20, r20
    16ae:	55 1f       	adc	r21, r21
    16b0:	59 f0       	breq	.+22     	; 0x16c8 <__fp_splitA+0x10>
    16b2:	5f 3f       	cpi	r21, 0xFF	; 255
    16b4:	71 f0       	breq	.+28     	; 0x16d2 <__fp_splitA+0x1a>
    16b6:	47 95       	ror	r20

000016b8 <__fp_splitA>:
    16b8:	88 0f       	add	r24, r24
    16ba:	97 fb       	bst	r25, 7
    16bc:	99 1f       	adc	r25, r25
    16be:	61 f0       	breq	.+24     	; 0x16d8 <__fp_splitA+0x20>
    16c0:	9f 3f       	cpi	r25, 0xFF	; 255
    16c2:	79 f0       	breq	.+30     	; 0x16e2 <__fp_splitA+0x2a>
    16c4:	87 95       	ror	r24
    16c6:	08 95       	ret
    16c8:	12 16       	cp	r1, r18
    16ca:	13 06       	cpc	r1, r19
    16cc:	14 06       	cpc	r1, r20
    16ce:	55 1f       	adc	r21, r21
    16d0:	f2 cf       	rjmp	.-28     	; 0x16b6 <__fp_split3+0xe>
    16d2:	46 95       	lsr	r20
    16d4:	f1 df       	rcall	.-30     	; 0x16b8 <__fp_splitA>
    16d6:	08 c0       	rjmp	.+16     	; 0x16e8 <__fp_splitA+0x30>
    16d8:	16 16       	cp	r1, r22
    16da:	17 06       	cpc	r1, r23
    16dc:	18 06       	cpc	r1, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	f1 cf       	rjmp	.-30     	; 0x16c4 <__fp_splitA+0xc>
    16e2:	86 95       	lsr	r24
    16e4:	71 05       	cpc	r23, r1
    16e6:	61 05       	cpc	r22, r1
    16e8:	08 94       	sec
    16ea:	08 95       	ret

000016ec <__fp_trunc>:
    16ec:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__fp_splitA>
    16f0:	a0 f0       	brcs	.+40     	; 0x171a <__fp_trunc+0x2e>
    16f2:	be e7       	ldi	r27, 0x7E	; 126
    16f4:	b9 17       	cp	r27, r25
    16f6:	88 f4       	brcc	.+34     	; 0x171a <__fp_trunc+0x2e>
    16f8:	bb 27       	eor	r27, r27
    16fa:	9f 38       	cpi	r25, 0x8F	; 143
    16fc:	60 f4       	brcc	.+24     	; 0x1716 <__fp_trunc+0x2a>
    16fe:	16 16       	cp	r1, r22
    1700:	b1 1d       	adc	r27, r1
    1702:	67 2f       	mov	r22, r23
    1704:	78 2f       	mov	r23, r24
    1706:	88 27       	eor	r24, r24
    1708:	98 5f       	subi	r25, 0xF8	; 248
    170a:	f7 cf       	rjmp	.-18     	; 0x16fa <__fp_trunc+0xe>
    170c:	86 95       	lsr	r24
    170e:	77 95       	ror	r23
    1710:	67 95       	ror	r22
    1712:	b1 1d       	adc	r27, r1
    1714:	93 95       	inc	r25
    1716:	96 39       	cpi	r25, 0x96	; 150
    1718:	c8 f3       	brcs	.-14     	; 0x170c <__fp_trunc+0x20>
    171a:	08 95       	ret

0000171c <__fp_zero>:
    171c:	e8 94       	clt

0000171e <__fp_szero>:
    171e:	bb 27       	eor	r27, r27
    1720:	66 27       	eor	r22, r22
    1722:	77 27       	eor	r23, r23
    1724:	cb 01       	movw	r24, r22
    1726:	97 f9       	bld	r25, 7
    1728:	08 95       	ret

0000172a <__gesf2>:
    172a:	0e 94 df 0a 	call	0x15be	; 0x15be <__fp_cmp>
    172e:	08 f4       	brcc	.+2      	; 0x1732 <__gesf2+0x8>
    1730:	8f ef       	ldi	r24, 0xFF	; 255
    1732:	08 95       	ret

00001734 <__mulsf3>:
    1734:	0e 94 ad 0b 	call	0x175a	; 0x175a <__mulsf3x>
    1738:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__fp_round>
    173c:	0e 94 35 0b 	call	0x166a	; 0x166a <__fp_pscA>
    1740:	38 f0       	brcs	.+14     	; 0x1750 <__mulsf3+0x1c>
    1742:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__fp_pscB>
    1746:	20 f0       	brcs	.+8      	; 0x1750 <__mulsf3+0x1c>
    1748:	95 23       	and	r25, r21
    174a:	11 f0       	breq	.+4      	; 0x1750 <__mulsf3+0x1c>
    174c:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__fp_inf>
    1750:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__fp_nan>
    1754:	11 24       	eor	r1, r1
    1756:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__fp_szero>

0000175a <__mulsf3x>:
    175a:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fp_split3>
    175e:	70 f3       	brcs	.-36     	; 0x173c <__mulsf3+0x8>

00001760 <__mulsf3_pse>:
    1760:	95 9f       	mul	r25, r21
    1762:	c1 f3       	breq	.-16     	; 0x1754 <__mulsf3+0x20>
    1764:	95 0f       	add	r25, r21
    1766:	50 e0       	ldi	r21, 0x00	; 0
    1768:	55 1f       	adc	r21, r21
    176a:	62 9f       	mul	r22, r18
    176c:	f0 01       	movw	r30, r0
    176e:	72 9f       	mul	r23, r18
    1770:	bb 27       	eor	r27, r27
    1772:	f0 0d       	add	r31, r0
    1774:	b1 1d       	adc	r27, r1
    1776:	63 9f       	mul	r22, r19
    1778:	aa 27       	eor	r26, r26
    177a:	f0 0d       	add	r31, r0
    177c:	b1 1d       	adc	r27, r1
    177e:	aa 1f       	adc	r26, r26
    1780:	64 9f       	mul	r22, r20
    1782:	66 27       	eor	r22, r22
    1784:	b0 0d       	add	r27, r0
    1786:	a1 1d       	adc	r26, r1
    1788:	66 1f       	adc	r22, r22
    178a:	82 9f       	mul	r24, r18
    178c:	22 27       	eor	r18, r18
    178e:	b0 0d       	add	r27, r0
    1790:	a1 1d       	adc	r26, r1
    1792:	62 1f       	adc	r22, r18
    1794:	73 9f       	mul	r23, r19
    1796:	b0 0d       	add	r27, r0
    1798:	a1 1d       	adc	r26, r1
    179a:	62 1f       	adc	r22, r18
    179c:	83 9f       	mul	r24, r19
    179e:	a0 0d       	add	r26, r0
    17a0:	61 1d       	adc	r22, r1
    17a2:	22 1f       	adc	r18, r18
    17a4:	74 9f       	mul	r23, r20
    17a6:	33 27       	eor	r19, r19
    17a8:	a0 0d       	add	r26, r0
    17aa:	61 1d       	adc	r22, r1
    17ac:	23 1f       	adc	r18, r19
    17ae:	84 9f       	mul	r24, r20
    17b0:	60 0d       	add	r22, r0
    17b2:	21 1d       	adc	r18, r1
    17b4:	82 2f       	mov	r24, r18
    17b6:	76 2f       	mov	r23, r22
    17b8:	6a 2f       	mov	r22, r26
    17ba:	11 24       	eor	r1, r1
    17bc:	9f 57       	subi	r25, 0x7F	; 127
    17be:	50 40       	sbci	r21, 0x00	; 0
    17c0:	9a f0       	brmi	.+38     	; 0x17e8 <__mulsf3_pse+0x88>
    17c2:	f1 f0       	breq	.+60     	; 0x1800 <__mulsf3_pse+0xa0>
    17c4:	88 23       	and	r24, r24
    17c6:	4a f0       	brmi	.+18     	; 0x17da <__mulsf3_pse+0x7a>
    17c8:	ee 0f       	add	r30, r30
    17ca:	ff 1f       	adc	r31, r31
    17cc:	bb 1f       	adc	r27, r27
    17ce:	66 1f       	adc	r22, r22
    17d0:	77 1f       	adc	r23, r23
    17d2:	88 1f       	adc	r24, r24
    17d4:	91 50       	subi	r25, 0x01	; 1
    17d6:	50 40       	sbci	r21, 0x00	; 0
    17d8:	a9 f7       	brne	.-22     	; 0x17c4 <__mulsf3_pse+0x64>
    17da:	9e 3f       	cpi	r25, 0xFE	; 254
    17dc:	51 05       	cpc	r21, r1
    17de:	80 f0       	brcs	.+32     	; 0x1800 <__mulsf3_pse+0xa0>
    17e0:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__fp_inf>
    17e4:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__fp_szero>
    17e8:	5f 3f       	cpi	r21, 0xFF	; 255
    17ea:	e4 f3       	brlt	.-8      	; 0x17e4 <__mulsf3_pse+0x84>
    17ec:	98 3e       	cpi	r25, 0xE8	; 232
    17ee:	d4 f3       	brlt	.-12     	; 0x17e4 <__mulsf3_pse+0x84>
    17f0:	86 95       	lsr	r24
    17f2:	77 95       	ror	r23
    17f4:	67 95       	ror	r22
    17f6:	b7 95       	ror	r27
    17f8:	f7 95       	ror	r31
    17fa:	e7 95       	ror	r30
    17fc:	9f 5f       	subi	r25, 0xFF	; 255
    17fe:	c1 f7       	brne	.-16     	; 0x17f0 <__mulsf3_pse+0x90>
    1800:	fe 2b       	or	r31, r30
    1802:	88 0f       	add	r24, r24
    1804:	91 1d       	adc	r25, r1
    1806:	96 95       	lsr	r25
    1808:	87 95       	ror	r24
    180a:	97 f9       	bld	r25, 7
    180c:	08 95       	ret

0000180e <__divmodsi4>:
    180e:	05 2e       	mov	r0, r21
    1810:	97 fb       	bst	r25, 7
    1812:	1e f4       	brtc	.+6      	; 0x181a <__divmodsi4+0xc>
    1814:	00 94       	com	r0
    1816:	0e 94 1e 0c 	call	0x183c	; 0x183c <__negsi2>
    181a:	57 fd       	sbrc	r21, 7
    181c:	07 d0       	rcall	.+14     	; 0x182c <__divmodsi4_neg2>
    181e:	0e 94 26 0c 	call	0x184c	; 0x184c <__udivmodsi4>
    1822:	07 fc       	sbrc	r0, 7
    1824:	03 d0       	rcall	.+6      	; 0x182c <__divmodsi4_neg2>
    1826:	4e f4       	brtc	.+18     	; 0x183a <__divmodsi4_exit>
    1828:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <__negsi2>

0000182c <__divmodsi4_neg2>:
    182c:	50 95       	com	r21
    182e:	40 95       	com	r20
    1830:	30 95       	com	r19
    1832:	21 95       	neg	r18
    1834:	3f 4f       	sbci	r19, 0xFF	; 255
    1836:	4f 4f       	sbci	r20, 0xFF	; 255
    1838:	5f 4f       	sbci	r21, 0xFF	; 255

0000183a <__divmodsi4_exit>:
    183a:	08 95       	ret

0000183c <__negsi2>:
    183c:	90 95       	com	r25
    183e:	80 95       	com	r24
    1840:	70 95       	com	r23
    1842:	61 95       	neg	r22
    1844:	7f 4f       	sbci	r23, 0xFF	; 255
    1846:	8f 4f       	sbci	r24, 0xFF	; 255
    1848:	9f 4f       	sbci	r25, 0xFF	; 255
    184a:	08 95       	ret

0000184c <__udivmodsi4>:
    184c:	a1 e2       	ldi	r26, 0x21	; 33
    184e:	1a 2e       	mov	r1, r26
    1850:	aa 1b       	sub	r26, r26
    1852:	bb 1b       	sub	r27, r27
    1854:	fd 01       	movw	r30, r26
    1856:	0d c0       	rjmp	.+26     	; 0x1872 <__udivmodsi4_ep>

00001858 <__udivmodsi4_loop>:
    1858:	aa 1f       	adc	r26, r26
    185a:	bb 1f       	adc	r27, r27
    185c:	ee 1f       	adc	r30, r30
    185e:	ff 1f       	adc	r31, r31
    1860:	a2 17       	cp	r26, r18
    1862:	b3 07       	cpc	r27, r19
    1864:	e4 07       	cpc	r30, r20
    1866:	f5 07       	cpc	r31, r21
    1868:	20 f0       	brcs	.+8      	; 0x1872 <__udivmodsi4_ep>
    186a:	a2 1b       	sub	r26, r18
    186c:	b3 0b       	sbc	r27, r19
    186e:	e4 0b       	sbc	r30, r20
    1870:	f5 0b       	sbc	r31, r21

00001872 <__udivmodsi4_ep>:
    1872:	66 1f       	adc	r22, r22
    1874:	77 1f       	adc	r23, r23
    1876:	88 1f       	adc	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	1a 94       	dec	r1
    187c:	69 f7       	brne	.-38     	; 0x1858 <__udivmodsi4_loop>
    187e:	60 95       	com	r22
    1880:	70 95       	com	r23
    1882:	80 95       	com	r24
    1884:	90 95       	com	r25
    1886:	9b 01       	movw	r18, r22
    1888:	ac 01       	movw	r20, r24
    188a:	bd 01       	movw	r22, r26
    188c:	cf 01       	movw	r24, r30
    188e:	08 95       	ret

00001890 <sprintf>:
    1890:	ae e0       	ldi	r26, 0x0E	; 14
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	ee e4       	ldi	r30, 0x4E	; 78
    1896:	fc e0       	ldi	r31, 0x0C	; 12
    1898:	0c 94 09 0f 	jmp	0x1e12	; 0x1e12 <__prologue_saves__+0x1c>
    189c:	0d 89       	ldd	r16, Y+21	; 0x15
    189e:	1e 89       	ldd	r17, Y+22	; 0x16
    18a0:	86 e0       	ldi	r24, 0x06	; 6
    18a2:	8c 83       	std	Y+4, r24	; 0x04
    18a4:	1a 83       	std	Y+2, r17	; 0x02
    18a6:	09 83       	std	Y+1, r16	; 0x01
    18a8:	8f ef       	ldi	r24, 0xFF	; 255
    18aa:	9f e7       	ldi	r25, 0x7F	; 127
    18ac:	9e 83       	std	Y+6, r25	; 0x06
    18ae:	8d 83       	std	Y+5, r24	; 0x05
    18b0:	ae 01       	movw	r20, r28
    18b2:	47 5e       	subi	r20, 0xE7	; 231
    18b4:	5f 4f       	sbci	r21, 0xFF	; 255
    18b6:	6f 89       	ldd	r22, Y+23	; 0x17
    18b8:	78 8d       	ldd	r23, Y+24	; 0x18
    18ba:	ce 01       	movw	r24, r28
    18bc:	01 96       	adiw	r24, 0x01	; 1
    18be:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <vfprintf>
    18c2:	ef 81       	ldd	r30, Y+7	; 0x07
    18c4:	f8 85       	ldd	r31, Y+8	; 0x08
    18c6:	e0 0f       	add	r30, r16
    18c8:	f1 1f       	adc	r31, r17
    18ca:	10 82       	st	Z, r1
    18cc:	2e 96       	adiw	r28, 0x0e	; 14
    18ce:	e4 e0       	ldi	r30, 0x04	; 4
    18d0:	0c 94 25 0f 	jmp	0x1e4a	; 0x1e4a <__epilogue_restores__+0x1c>

000018d4 <vfprintf>:
    18d4:	ab e0       	ldi	r26, 0x0B	; 11
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e0 e7       	ldi	r30, 0x70	; 112
    18da:	fc e0       	ldi	r31, 0x0C	; 12
    18dc:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <__prologue_saves__>
    18e0:	6c 01       	movw	r12, r24
    18e2:	7b 01       	movw	r14, r22
    18e4:	8a 01       	movw	r16, r20
    18e6:	fc 01       	movw	r30, r24
    18e8:	17 82       	std	Z+7, r1	; 0x07
    18ea:	16 82       	std	Z+6, r1	; 0x06
    18ec:	83 81       	ldd	r24, Z+3	; 0x03
    18ee:	81 ff       	sbrs	r24, 1
    18f0:	cc c1       	rjmp	.+920    	; 0x1c8a <vfprintf+0x3b6>
    18f2:	ce 01       	movw	r24, r28
    18f4:	01 96       	adiw	r24, 0x01	; 1
    18f6:	3c 01       	movw	r6, r24
    18f8:	f6 01       	movw	r30, r12
    18fa:	93 81       	ldd	r25, Z+3	; 0x03
    18fc:	f7 01       	movw	r30, r14
    18fe:	93 fd       	sbrc	r25, 3
    1900:	85 91       	lpm	r24, Z+
    1902:	93 ff       	sbrs	r25, 3
    1904:	81 91       	ld	r24, Z+
    1906:	7f 01       	movw	r14, r30
    1908:	88 23       	and	r24, r24
    190a:	09 f4       	brne	.+2      	; 0x190e <vfprintf+0x3a>
    190c:	ba c1       	rjmp	.+884    	; 0x1c82 <vfprintf+0x3ae>
    190e:	85 32       	cpi	r24, 0x25	; 37
    1910:	39 f4       	brne	.+14     	; 0x1920 <vfprintf+0x4c>
    1912:	93 fd       	sbrc	r25, 3
    1914:	85 91       	lpm	r24, Z+
    1916:	93 ff       	sbrs	r25, 3
    1918:	81 91       	ld	r24, Z+
    191a:	7f 01       	movw	r14, r30
    191c:	85 32       	cpi	r24, 0x25	; 37
    191e:	29 f4       	brne	.+10     	; 0x192a <vfprintf+0x56>
    1920:	b6 01       	movw	r22, r12
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <fputc>
    1928:	e7 cf       	rjmp	.-50     	; 0x18f8 <vfprintf+0x24>
    192a:	91 2c       	mov	r9, r1
    192c:	21 2c       	mov	r2, r1
    192e:	31 2c       	mov	r3, r1
    1930:	ff e1       	ldi	r31, 0x1F	; 31
    1932:	f3 15       	cp	r31, r3
    1934:	d8 f0       	brcs	.+54     	; 0x196c <vfprintf+0x98>
    1936:	8b 32       	cpi	r24, 0x2B	; 43
    1938:	79 f0       	breq	.+30     	; 0x1958 <vfprintf+0x84>
    193a:	38 f4       	brcc	.+14     	; 0x194a <vfprintf+0x76>
    193c:	80 32       	cpi	r24, 0x20	; 32
    193e:	79 f0       	breq	.+30     	; 0x195e <vfprintf+0x8a>
    1940:	83 32       	cpi	r24, 0x23	; 35
    1942:	a1 f4       	brne	.+40     	; 0x196c <vfprintf+0x98>
    1944:	23 2d       	mov	r18, r3
    1946:	20 61       	ori	r18, 0x10	; 16
    1948:	1d c0       	rjmp	.+58     	; 0x1984 <vfprintf+0xb0>
    194a:	8d 32       	cpi	r24, 0x2D	; 45
    194c:	61 f0       	breq	.+24     	; 0x1966 <vfprintf+0x92>
    194e:	80 33       	cpi	r24, 0x30	; 48
    1950:	69 f4       	brne	.+26     	; 0x196c <vfprintf+0x98>
    1952:	23 2d       	mov	r18, r3
    1954:	21 60       	ori	r18, 0x01	; 1
    1956:	16 c0       	rjmp	.+44     	; 0x1984 <vfprintf+0xb0>
    1958:	83 2d       	mov	r24, r3
    195a:	82 60       	ori	r24, 0x02	; 2
    195c:	38 2e       	mov	r3, r24
    195e:	e3 2d       	mov	r30, r3
    1960:	e4 60       	ori	r30, 0x04	; 4
    1962:	3e 2e       	mov	r3, r30
    1964:	2a c0       	rjmp	.+84     	; 0x19ba <vfprintf+0xe6>
    1966:	f3 2d       	mov	r31, r3
    1968:	f8 60       	ori	r31, 0x08	; 8
    196a:	1d c0       	rjmp	.+58     	; 0x19a6 <vfprintf+0xd2>
    196c:	37 fc       	sbrc	r3, 7
    196e:	2d c0       	rjmp	.+90     	; 0x19ca <vfprintf+0xf6>
    1970:	20 ed       	ldi	r18, 0xD0	; 208
    1972:	28 0f       	add	r18, r24
    1974:	2a 30       	cpi	r18, 0x0A	; 10
    1976:	40 f0       	brcs	.+16     	; 0x1988 <vfprintf+0xb4>
    1978:	8e 32       	cpi	r24, 0x2E	; 46
    197a:	b9 f4       	brne	.+46     	; 0x19aa <vfprintf+0xd6>
    197c:	36 fc       	sbrc	r3, 6
    197e:	81 c1       	rjmp	.+770    	; 0x1c82 <vfprintf+0x3ae>
    1980:	23 2d       	mov	r18, r3
    1982:	20 64       	ori	r18, 0x40	; 64
    1984:	32 2e       	mov	r3, r18
    1986:	19 c0       	rjmp	.+50     	; 0x19ba <vfprintf+0xe6>
    1988:	36 fe       	sbrs	r3, 6
    198a:	06 c0       	rjmp	.+12     	; 0x1998 <vfprintf+0xc4>
    198c:	8a e0       	ldi	r24, 0x0A	; 10
    198e:	98 9e       	mul	r9, r24
    1990:	20 0d       	add	r18, r0
    1992:	11 24       	eor	r1, r1
    1994:	92 2e       	mov	r9, r18
    1996:	11 c0       	rjmp	.+34     	; 0x19ba <vfprintf+0xe6>
    1998:	ea e0       	ldi	r30, 0x0A	; 10
    199a:	2e 9e       	mul	r2, r30
    199c:	20 0d       	add	r18, r0
    199e:	11 24       	eor	r1, r1
    19a0:	22 2e       	mov	r2, r18
    19a2:	f3 2d       	mov	r31, r3
    19a4:	f0 62       	ori	r31, 0x20	; 32
    19a6:	3f 2e       	mov	r3, r31
    19a8:	08 c0       	rjmp	.+16     	; 0x19ba <vfprintf+0xe6>
    19aa:	8c 36       	cpi	r24, 0x6C	; 108
    19ac:	21 f4       	brne	.+8      	; 0x19b6 <vfprintf+0xe2>
    19ae:	83 2d       	mov	r24, r3
    19b0:	80 68       	ori	r24, 0x80	; 128
    19b2:	38 2e       	mov	r3, r24
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <vfprintf+0xe6>
    19b6:	88 36       	cpi	r24, 0x68	; 104
    19b8:	41 f4       	brne	.+16     	; 0x19ca <vfprintf+0xf6>
    19ba:	f7 01       	movw	r30, r14
    19bc:	93 fd       	sbrc	r25, 3
    19be:	85 91       	lpm	r24, Z+
    19c0:	93 ff       	sbrs	r25, 3
    19c2:	81 91       	ld	r24, Z+
    19c4:	7f 01       	movw	r14, r30
    19c6:	81 11       	cpse	r24, r1
    19c8:	b3 cf       	rjmp	.-154    	; 0x1930 <vfprintf+0x5c>
    19ca:	98 2f       	mov	r25, r24
    19cc:	9f 7d       	andi	r25, 0xDF	; 223
    19ce:	95 54       	subi	r25, 0x45	; 69
    19d0:	93 30       	cpi	r25, 0x03	; 3
    19d2:	28 f4       	brcc	.+10     	; 0x19de <vfprintf+0x10a>
    19d4:	0c 5f       	subi	r16, 0xFC	; 252
    19d6:	1f 4f       	sbci	r17, 0xFF	; 255
    19d8:	9f e3       	ldi	r25, 0x3F	; 63
    19da:	99 83       	std	Y+1, r25	; 0x01
    19dc:	0d c0       	rjmp	.+26     	; 0x19f8 <vfprintf+0x124>
    19de:	83 36       	cpi	r24, 0x63	; 99
    19e0:	31 f0       	breq	.+12     	; 0x19ee <vfprintf+0x11a>
    19e2:	83 37       	cpi	r24, 0x73	; 115
    19e4:	71 f0       	breq	.+28     	; 0x1a02 <vfprintf+0x12e>
    19e6:	83 35       	cpi	r24, 0x53	; 83
    19e8:	09 f0       	breq	.+2      	; 0x19ec <vfprintf+0x118>
    19ea:	59 c0       	rjmp	.+178    	; 0x1a9e <vfprintf+0x1ca>
    19ec:	21 c0       	rjmp	.+66     	; 0x1a30 <vfprintf+0x15c>
    19ee:	f8 01       	movw	r30, r16
    19f0:	80 81       	ld	r24, Z
    19f2:	89 83       	std	Y+1, r24	; 0x01
    19f4:	0e 5f       	subi	r16, 0xFE	; 254
    19f6:	1f 4f       	sbci	r17, 0xFF	; 255
    19f8:	88 24       	eor	r8, r8
    19fa:	83 94       	inc	r8
    19fc:	91 2c       	mov	r9, r1
    19fe:	53 01       	movw	r10, r6
    1a00:	13 c0       	rjmp	.+38     	; 0x1a28 <vfprintf+0x154>
    1a02:	28 01       	movw	r4, r16
    1a04:	f2 e0       	ldi	r31, 0x02	; 2
    1a06:	4f 0e       	add	r4, r31
    1a08:	51 1c       	adc	r5, r1
    1a0a:	f8 01       	movw	r30, r16
    1a0c:	a0 80       	ld	r10, Z
    1a0e:	b1 80       	ldd	r11, Z+1	; 0x01
    1a10:	36 fe       	sbrs	r3, 6
    1a12:	03 c0       	rjmp	.+6      	; 0x1a1a <vfprintf+0x146>
    1a14:	69 2d       	mov	r22, r9
    1a16:	70 e0       	ldi	r23, 0x00	; 0
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <vfprintf+0x14a>
    1a1a:	6f ef       	ldi	r22, 0xFF	; 255
    1a1c:	7f ef       	ldi	r23, 0xFF	; 255
    1a1e:	c5 01       	movw	r24, r10
    1a20:	0e 94 56 0e 	call	0x1cac	; 0x1cac <strnlen>
    1a24:	4c 01       	movw	r8, r24
    1a26:	82 01       	movw	r16, r4
    1a28:	f3 2d       	mov	r31, r3
    1a2a:	ff 77       	andi	r31, 0x7F	; 127
    1a2c:	3f 2e       	mov	r3, r31
    1a2e:	16 c0       	rjmp	.+44     	; 0x1a5c <vfprintf+0x188>
    1a30:	28 01       	movw	r4, r16
    1a32:	22 e0       	ldi	r18, 0x02	; 2
    1a34:	42 0e       	add	r4, r18
    1a36:	51 1c       	adc	r5, r1
    1a38:	f8 01       	movw	r30, r16
    1a3a:	a0 80       	ld	r10, Z
    1a3c:	b1 80       	ldd	r11, Z+1	; 0x01
    1a3e:	36 fe       	sbrs	r3, 6
    1a40:	03 c0       	rjmp	.+6      	; 0x1a48 <vfprintf+0x174>
    1a42:	69 2d       	mov	r22, r9
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <vfprintf+0x178>
    1a48:	6f ef       	ldi	r22, 0xFF	; 255
    1a4a:	7f ef       	ldi	r23, 0xFF	; 255
    1a4c:	c5 01       	movw	r24, r10
    1a4e:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <strnlen_P>
    1a52:	4c 01       	movw	r8, r24
    1a54:	f3 2d       	mov	r31, r3
    1a56:	f0 68       	ori	r31, 0x80	; 128
    1a58:	3f 2e       	mov	r3, r31
    1a5a:	82 01       	movw	r16, r4
    1a5c:	33 fc       	sbrc	r3, 3
    1a5e:	1b c0       	rjmp	.+54     	; 0x1a96 <vfprintf+0x1c2>
    1a60:	82 2d       	mov	r24, r2
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	88 16       	cp	r8, r24
    1a66:	99 06       	cpc	r9, r25
    1a68:	b0 f4       	brcc	.+44     	; 0x1a96 <vfprintf+0x1c2>
    1a6a:	b6 01       	movw	r22, r12
    1a6c:	80 e2       	ldi	r24, 0x20	; 32
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <fputc>
    1a74:	2a 94       	dec	r2
    1a76:	f4 cf       	rjmp	.-24     	; 0x1a60 <vfprintf+0x18c>
    1a78:	f5 01       	movw	r30, r10
    1a7a:	37 fc       	sbrc	r3, 7
    1a7c:	85 91       	lpm	r24, Z+
    1a7e:	37 fe       	sbrs	r3, 7
    1a80:	81 91       	ld	r24, Z+
    1a82:	5f 01       	movw	r10, r30
    1a84:	b6 01       	movw	r22, r12
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <fputc>
    1a8c:	21 10       	cpse	r2, r1
    1a8e:	2a 94       	dec	r2
    1a90:	21 e0       	ldi	r18, 0x01	; 1
    1a92:	82 1a       	sub	r8, r18
    1a94:	91 08       	sbc	r9, r1
    1a96:	81 14       	cp	r8, r1
    1a98:	91 04       	cpc	r9, r1
    1a9a:	71 f7       	brne	.-36     	; 0x1a78 <vfprintf+0x1a4>
    1a9c:	e8 c0       	rjmp	.+464    	; 0x1c6e <vfprintf+0x39a>
    1a9e:	84 36       	cpi	r24, 0x64	; 100
    1aa0:	11 f0       	breq	.+4      	; 0x1aa6 <vfprintf+0x1d2>
    1aa2:	89 36       	cpi	r24, 0x69	; 105
    1aa4:	41 f5       	brne	.+80     	; 0x1af6 <vfprintf+0x222>
    1aa6:	f8 01       	movw	r30, r16
    1aa8:	37 fe       	sbrs	r3, 7
    1aaa:	07 c0       	rjmp	.+14     	; 0x1aba <vfprintf+0x1e6>
    1aac:	60 81       	ld	r22, Z
    1aae:	71 81       	ldd	r23, Z+1	; 0x01
    1ab0:	82 81       	ldd	r24, Z+2	; 0x02
    1ab2:	93 81       	ldd	r25, Z+3	; 0x03
    1ab4:	0c 5f       	subi	r16, 0xFC	; 252
    1ab6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab8:	08 c0       	rjmp	.+16     	; 0x1aca <vfprintf+0x1f6>
    1aba:	60 81       	ld	r22, Z
    1abc:	71 81       	ldd	r23, Z+1	; 0x01
    1abe:	07 2e       	mov	r0, r23
    1ac0:	00 0c       	add	r0, r0
    1ac2:	88 0b       	sbc	r24, r24
    1ac4:	99 0b       	sbc	r25, r25
    1ac6:	0e 5f       	subi	r16, 0xFE	; 254
    1ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aca:	f3 2d       	mov	r31, r3
    1acc:	ff 76       	andi	r31, 0x6F	; 111
    1ace:	3f 2e       	mov	r3, r31
    1ad0:	97 ff       	sbrs	r25, 7
    1ad2:	09 c0       	rjmp	.+18     	; 0x1ae6 <vfprintf+0x212>
    1ad4:	90 95       	com	r25
    1ad6:	80 95       	com	r24
    1ad8:	70 95       	com	r23
    1ada:	61 95       	neg	r22
    1adc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ade:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae2:	f0 68       	ori	r31, 0x80	; 128
    1ae4:	3f 2e       	mov	r3, r31
    1ae6:	2a e0       	ldi	r18, 0x0A	; 10
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	a3 01       	movw	r20, r6
    1aec:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__ultoa_invert>
    1af0:	88 2e       	mov	r8, r24
    1af2:	86 18       	sub	r8, r6
    1af4:	45 c0       	rjmp	.+138    	; 0x1b80 <vfprintf+0x2ac>
    1af6:	85 37       	cpi	r24, 0x75	; 117
    1af8:	31 f4       	brne	.+12     	; 0x1b06 <vfprintf+0x232>
    1afa:	23 2d       	mov	r18, r3
    1afc:	2f 7e       	andi	r18, 0xEF	; 239
    1afe:	b2 2e       	mov	r11, r18
    1b00:	2a e0       	ldi	r18, 0x0A	; 10
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	25 c0       	rjmp	.+74     	; 0x1b50 <vfprintf+0x27c>
    1b06:	93 2d       	mov	r25, r3
    1b08:	99 7f       	andi	r25, 0xF9	; 249
    1b0a:	b9 2e       	mov	r11, r25
    1b0c:	8f 36       	cpi	r24, 0x6F	; 111
    1b0e:	c1 f0       	breq	.+48     	; 0x1b40 <vfprintf+0x26c>
    1b10:	18 f4       	brcc	.+6      	; 0x1b18 <vfprintf+0x244>
    1b12:	88 35       	cpi	r24, 0x58	; 88
    1b14:	79 f0       	breq	.+30     	; 0x1b34 <vfprintf+0x260>
    1b16:	b5 c0       	rjmp	.+362    	; 0x1c82 <vfprintf+0x3ae>
    1b18:	80 37       	cpi	r24, 0x70	; 112
    1b1a:	19 f0       	breq	.+6      	; 0x1b22 <vfprintf+0x24e>
    1b1c:	88 37       	cpi	r24, 0x78	; 120
    1b1e:	21 f0       	breq	.+8      	; 0x1b28 <vfprintf+0x254>
    1b20:	b0 c0       	rjmp	.+352    	; 0x1c82 <vfprintf+0x3ae>
    1b22:	e9 2f       	mov	r30, r25
    1b24:	e0 61       	ori	r30, 0x10	; 16
    1b26:	be 2e       	mov	r11, r30
    1b28:	b4 fe       	sbrs	r11, 4
    1b2a:	0d c0       	rjmp	.+26     	; 0x1b46 <vfprintf+0x272>
    1b2c:	fb 2d       	mov	r31, r11
    1b2e:	f4 60       	ori	r31, 0x04	; 4
    1b30:	bf 2e       	mov	r11, r31
    1b32:	09 c0       	rjmp	.+18     	; 0x1b46 <vfprintf+0x272>
    1b34:	34 fe       	sbrs	r3, 4
    1b36:	0a c0       	rjmp	.+20     	; 0x1b4c <vfprintf+0x278>
    1b38:	29 2f       	mov	r18, r25
    1b3a:	26 60       	ori	r18, 0x06	; 6
    1b3c:	b2 2e       	mov	r11, r18
    1b3e:	06 c0       	rjmp	.+12     	; 0x1b4c <vfprintf+0x278>
    1b40:	28 e0       	ldi	r18, 0x08	; 8
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	05 c0       	rjmp	.+10     	; 0x1b50 <vfprintf+0x27c>
    1b46:	20 e1       	ldi	r18, 0x10	; 16
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <vfprintf+0x27c>
    1b4c:	20 e1       	ldi	r18, 0x10	; 16
    1b4e:	32 e0       	ldi	r19, 0x02	; 2
    1b50:	f8 01       	movw	r30, r16
    1b52:	b7 fe       	sbrs	r11, 7
    1b54:	07 c0       	rjmp	.+14     	; 0x1b64 <vfprintf+0x290>
    1b56:	60 81       	ld	r22, Z
    1b58:	71 81       	ldd	r23, Z+1	; 0x01
    1b5a:	82 81       	ldd	r24, Z+2	; 0x02
    1b5c:	93 81       	ldd	r25, Z+3	; 0x03
    1b5e:	0c 5f       	subi	r16, 0xFC	; 252
    1b60:	1f 4f       	sbci	r17, 0xFF	; 255
    1b62:	06 c0       	rjmp	.+12     	; 0x1b70 <vfprintf+0x29c>
    1b64:	60 81       	ld	r22, Z
    1b66:	71 81       	ldd	r23, Z+1	; 0x01
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	0e 5f       	subi	r16, 0xFE	; 254
    1b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b70:	a3 01       	movw	r20, r6
    1b72:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__ultoa_invert>
    1b76:	88 2e       	mov	r8, r24
    1b78:	86 18       	sub	r8, r6
    1b7a:	fb 2d       	mov	r31, r11
    1b7c:	ff 77       	andi	r31, 0x7F	; 127
    1b7e:	3f 2e       	mov	r3, r31
    1b80:	36 fe       	sbrs	r3, 6
    1b82:	0d c0       	rjmp	.+26     	; 0x1b9e <vfprintf+0x2ca>
    1b84:	23 2d       	mov	r18, r3
    1b86:	2e 7f       	andi	r18, 0xFE	; 254
    1b88:	a2 2e       	mov	r10, r18
    1b8a:	89 14       	cp	r8, r9
    1b8c:	58 f4       	brcc	.+22     	; 0x1ba4 <vfprintf+0x2d0>
    1b8e:	34 fe       	sbrs	r3, 4
    1b90:	0b c0       	rjmp	.+22     	; 0x1ba8 <vfprintf+0x2d4>
    1b92:	32 fc       	sbrc	r3, 2
    1b94:	09 c0       	rjmp	.+18     	; 0x1ba8 <vfprintf+0x2d4>
    1b96:	83 2d       	mov	r24, r3
    1b98:	8e 7e       	andi	r24, 0xEE	; 238
    1b9a:	a8 2e       	mov	r10, r24
    1b9c:	05 c0       	rjmp	.+10     	; 0x1ba8 <vfprintf+0x2d4>
    1b9e:	b8 2c       	mov	r11, r8
    1ba0:	a3 2c       	mov	r10, r3
    1ba2:	03 c0       	rjmp	.+6      	; 0x1baa <vfprintf+0x2d6>
    1ba4:	b8 2c       	mov	r11, r8
    1ba6:	01 c0       	rjmp	.+2      	; 0x1baa <vfprintf+0x2d6>
    1ba8:	b9 2c       	mov	r11, r9
    1baa:	a4 fe       	sbrs	r10, 4
    1bac:	0f c0       	rjmp	.+30     	; 0x1bcc <vfprintf+0x2f8>
    1bae:	fe 01       	movw	r30, r28
    1bb0:	e8 0d       	add	r30, r8
    1bb2:	f1 1d       	adc	r31, r1
    1bb4:	80 81       	ld	r24, Z
    1bb6:	80 33       	cpi	r24, 0x30	; 48
    1bb8:	21 f4       	brne	.+8      	; 0x1bc2 <vfprintf+0x2ee>
    1bba:	9a 2d       	mov	r25, r10
    1bbc:	99 7e       	andi	r25, 0xE9	; 233
    1bbe:	a9 2e       	mov	r10, r25
    1bc0:	09 c0       	rjmp	.+18     	; 0x1bd4 <vfprintf+0x300>
    1bc2:	a2 fe       	sbrs	r10, 2
    1bc4:	06 c0       	rjmp	.+12     	; 0x1bd2 <vfprintf+0x2fe>
    1bc6:	b3 94       	inc	r11
    1bc8:	b3 94       	inc	r11
    1bca:	04 c0       	rjmp	.+8      	; 0x1bd4 <vfprintf+0x300>
    1bcc:	8a 2d       	mov	r24, r10
    1bce:	86 78       	andi	r24, 0x86	; 134
    1bd0:	09 f0       	breq	.+2      	; 0x1bd4 <vfprintf+0x300>
    1bd2:	b3 94       	inc	r11
    1bd4:	a3 fc       	sbrc	r10, 3
    1bd6:	11 c0       	rjmp	.+34     	; 0x1bfa <vfprintf+0x326>
    1bd8:	a0 fe       	sbrs	r10, 0
    1bda:	06 c0       	rjmp	.+12     	; 0x1be8 <vfprintf+0x314>
    1bdc:	b2 14       	cp	r11, r2
    1bde:	88 f4       	brcc	.+34     	; 0x1c02 <vfprintf+0x32e>
    1be0:	28 0c       	add	r2, r8
    1be2:	92 2c       	mov	r9, r2
    1be4:	9b 18       	sub	r9, r11
    1be6:	0e c0       	rjmp	.+28     	; 0x1c04 <vfprintf+0x330>
    1be8:	b2 14       	cp	r11, r2
    1bea:	60 f4       	brcc	.+24     	; 0x1c04 <vfprintf+0x330>
    1bec:	b6 01       	movw	r22, r12
    1bee:	80 e2       	ldi	r24, 0x20	; 32
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <fputc>
    1bf6:	b3 94       	inc	r11
    1bf8:	f7 cf       	rjmp	.-18     	; 0x1be8 <vfprintf+0x314>
    1bfa:	b2 14       	cp	r11, r2
    1bfc:	18 f4       	brcc	.+6      	; 0x1c04 <vfprintf+0x330>
    1bfe:	2b 18       	sub	r2, r11
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <vfprintf+0x332>
    1c02:	98 2c       	mov	r9, r8
    1c04:	21 2c       	mov	r2, r1
    1c06:	a4 fe       	sbrs	r10, 4
    1c08:	10 c0       	rjmp	.+32     	; 0x1c2a <vfprintf+0x356>
    1c0a:	b6 01       	movw	r22, r12
    1c0c:	80 e3       	ldi	r24, 0x30	; 48
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <fputc>
    1c14:	a2 fe       	sbrs	r10, 2
    1c16:	17 c0       	rjmp	.+46     	; 0x1c46 <vfprintf+0x372>
    1c18:	a1 fc       	sbrc	r10, 1
    1c1a:	03 c0       	rjmp	.+6      	; 0x1c22 <vfprintf+0x34e>
    1c1c:	88 e7       	ldi	r24, 0x78	; 120
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <vfprintf+0x352>
    1c22:	88 e5       	ldi	r24, 0x58	; 88
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	b6 01       	movw	r22, r12
    1c28:	0c c0       	rjmp	.+24     	; 0x1c42 <vfprintf+0x36e>
    1c2a:	8a 2d       	mov	r24, r10
    1c2c:	86 78       	andi	r24, 0x86	; 134
    1c2e:	59 f0       	breq	.+22     	; 0x1c46 <vfprintf+0x372>
    1c30:	a1 fe       	sbrs	r10, 1
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <vfprintf+0x364>
    1c34:	8b e2       	ldi	r24, 0x2B	; 43
    1c36:	01 c0       	rjmp	.+2      	; 0x1c3a <vfprintf+0x366>
    1c38:	80 e2       	ldi	r24, 0x20	; 32
    1c3a:	a7 fc       	sbrc	r10, 7
    1c3c:	8d e2       	ldi	r24, 0x2D	; 45
    1c3e:	b6 01       	movw	r22, r12
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <fputc>
    1c46:	89 14       	cp	r8, r9
    1c48:	38 f4       	brcc	.+14     	; 0x1c58 <vfprintf+0x384>
    1c4a:	b6 01       	movw	r22, r12
    1c4c:	80 e3       	ldi	r24, 0x30	; 48
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <fputc>
    1c54:	9a 94       	dec	r9
    1c56:	f7 cf       	rjmp	.-18     	; 0x1c46 <vfprintf+0x372>
    1c58:	8a 94       	dec	r8
    1c5a:	f3 01       	movw	r30, r6
    1c5c:	e8 0d       	add	r30, r8
    1c5e:	f1 1d       	adc	r31, r1
    1c60:	80 81       	ld	r24, Z
    1c62:	b6 01       	movw	r22, r12
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <fputc>
    1c6a:	81 10       	cpse	r8, r1
    1c6c:	f5 cf       	rjmp	.-22     	; 0x1c58 <vfprintf+0x384>
    1c6e:	22 20       	and	r2, r2
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <vfprintf+0x3a0>
    1c72:	42 ce       	rjmp	.-892    	; 0x18f8 <vfprintf+0x24>
    1c74:	b6 01       	movw	r22, r12
    1c76:	80 e2       	ldi	r24, 0x20	; 32
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <fputc>
    1c7e:	2a 94       	dec	r2
    1c80:	f6 cf       	rjmp	.-20     	; 0x1c6e <vfprintf+0x39a>
    1c82:	f6 01       	movw	r30, r12
    1c84:	86 81       	ldd	r24, Z+6	; 0x06
    1c86:	97 81       	ldd	r25, Z+7	; 0x07
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <vfprintf+0x3ba>
    1c8a:	8f ef       	ldi	r24, 0xFF	; 255
    1c8c:	9f ef       	ldi	r25, 0xFF	; 255
    1c8e:	2b 96       	adiw	r28, 0x0b	; 11
    1c90:	e2 e1       	ldi	r30, 0x12	; 18
    1c92:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__epilogue_restores__>

00001c96 <strnlen_P>:
    1c96:	fc 01       	movw	r30, r24
    1c98:	05 90       	lpm	r0, Z+
    1c9a:	61 50       	subi	r22, 0x01	; 1
    1c9c:	70 40       	sbci	r23, 0x00	; 0
    1c9e:	01 10       	cpse	r0, r1
    1ca0:	d8 f7       	brcc	.-10     	; 0x1c98 <strnlen_P+0x2>
    1ca2:	80 95       	com	r24
    1ca4:	90 95       	com	r25
    1ca6:	8e 0f       	add	r24, r30
    1ca8:	9f 1f       	adc	r25, r31
    1caa:	08 95       	ret

00001cac <strnlen>:
    1cac:	fc 01       	movw	r30, r24
    1cae:	61 50       	subi	r22, 0x01	; 1
    1cb0:	70 40       	sbci	r23, 0x00	; 0
    1cb2:	01 90       	ld	r0, Z+
    1cb4:	01 10       	cpse	r0, r1
    1cb6:	d8 f7       	brcc	.-10     	; 0x1cae <strnlen+0x2>
    1cb8:	80 95       	com	r24
    1cba:	90 95       	com	r25
    1cbc:	8e 0f       	add	r24, r30
    1cbe:	9f 1f       	adc	r25, r31
    1cc0:	08 95       	ret

00001cc2 <fputc>:
    1cc2:	0f 93       	push	r16
    1cc4:	1f 93       	push	r17
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
    1cca:	fb 01       	movw	r30, r22
    1ccc:	23 81       	ldd	r18, Z+3	; 0x03
    1cce:	21 fd       	sbrc	r18, 1
    1cd0:	03 c0       	rjmp	.+6      	; 0x1cd8 <fputc+0x16>
    1cd2:	8f ef       	ldi	r24, 0xFF	; 255
    1cd4:	9f ef       	ldi	r25, 0xFF	; 255
    1cd6:	2c c0       	rjmp	.+88     	; 0x1d30 <fputc+0x6e>
    1cd8:	22 ff       	sbrs	r18, 2
    1cda:	16 c0       	rjmp	.+44     	; 0x1d08 <fputc+0x46>
    1cdc:	46 81       	ldd	r20, Z+6	; 0x06
    1cde:	57 81       	ldd	r21, Z+7	; 0x07
    1ce0:	24 81       	ldd	r18, Z+4	; 0x04
    1ce2:	35 81       	ldd	r19, Z+5	; 0x05
    1ce4:	42 17       	cp	r20, r18
    1ce6:	53 07       	cpc	r21, r19
    1ce8:	44 f4       	brge	.+16     	; 0x1cfa <fputc+0x38>
    1cea:	a0 81       	ld	r26, Z
    1cec:	b1 81       	ldd	r27, Z+1	; 0x01
    1cee:	9d 01       	movw	r18, r26
    1cf0:	2f 5f       	subi	r18, 0xFF	; 255
    1cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf4:	31 83       	std	Z+1, r19	; 0x01
    1cf6:	20 83       	st	Z, r18
    1cf8:	8c 93       	st	X, r24
    1cfa:	26 81       	ldd	r18, Z+6	; 0x06
    1cfc:	37 81       	ldd	r19, Z+7	; 0x07
    1cfe:	2f 5f       	subi	r18, 0xFF	; 255
    1d00:	3f 4f       	sbci	r19, 0xFF	; 255
    1d02:	37 83       	std	Z+7, r19	; 0x07
    1d04:	26 83       	std	Z+6, r18	; 0x06
    1d06:	14 c0       	rjmp	.+40     	; 0x1d30 <fputc+0x6e>
    1d08:	8b 01       	movw	r16, r22
    1d0a:	ec 01       	movw	r28, r24
    1d0c:	fb 01       	movw	r30, r22
    1d0e:	00 84       	ldd	r0, Z+8	; 0x08
    1d10:	f1 85       	ldd	r31, Z+9	; 0x09
    1d12:	e0 2d       	mov	r30, r0
    1d14:	09 95       	icall
    1d16:	89 2b       	or	r24, r25
    1d18:	e1 f6       	brne	.-72     	; 0x1cd2 <fputc+0x10>
    1d1a:	d8 01       	movw	r26, r16
    1d1c:	16 96       	adiw	r26, 0x06	; 6
    1d1e:	8d 91       	ld	r24, X+
    1d20:	9c 91       	ld	r25, X
    1d22:	17 97       	sbiw	r26, 0x07	; 7
    1d24:	01 96       	adiw	r24, 0x01	; 1
    1d26:	17 96       	adiw	r26, 0x07	; 7
    1d28:	9c 93       	st	X, r25
    1d2a:	8e 93       	st	-X, r24
    1d2c:	16 97       	sbiw	r26, 0x06	; 6
    1d2e:	ce 01       	movw	r24, r28
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	1f 91       	pop	r17
    1d36:	0f 91       	pop	r16
    1d38:	08 95       	ret

00001d3a <__ultoa_invert>:
    1d3a:	fa 01       	movw	r30, r20
    1d3c:	aa 27       	eor	r26, r26
    1d3e:	28 30       	cpi	r18, 0x08	; 8
    1d40:	51 f1       	breq	.+84     	; 0x1d96 <__ultoa_invert+0x5c>
    1d42:	20 31       	cpi	r18, 0x10	; 16
    1d44:	81 f1       	breq	.+96     	; 0x1da6 <__ultoa_invert+0x6c>
    1d46:	e8 94       	clt
    1d48:	6f 93       	push	r22
    1d4a:	6e 7f       	andi	r22, 0xFE	; 254
    1d4c:	6e 5f       	subi	r22, 0xFE	; 254
    1d4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d50:	8f 4f       	sbci	r24, 0xFF	; 255
    1d52:	9f 4f       	sbci	r25, 0xFF	; 255
    1d54:	af 4f       	sbci	r26, 0xFF	; 255
    1d56:	b1 e0       	ldi	r27, 0x01	; 1
    1d58:	3e d0       	rcall	.+124    	; 0x1dd6 <__ultoa_invert+0x9c>
    1d5a:	b4 e0       	ldi	r27, 0x04	; 4
    1d5c:	3c d0       	rcall	.+120    	; 0x1dd6 <__ultoa_invert+0x9c>
    1d5e:	67 0f       	add	r22, r23
    1d60:	78 1f       	adc	r23, r24
    1d62:	89 1f       	adc	r24, r25
    1d64:	9a 1f       	adc	r25, r26
    1d66:	a1 1d       	adc	r26, r1
    1d68:	68 0f       	add	r22, r24
    1d6a:	79 1f       	adc	r23, r25
    1d6c:	8a 1f       	adc	r24, r26
    1d6e:	91 1d       	adc	r25, r1
    1d70:	a1 1d       	adc	r26, r1
    1d72:	6a 0f       	add	r22, r26
    1d74:	71 1d       	adc	r23, r1
    1d76:	81 1d       	adc	r24, r1
    1d78:	91 1d       	adc	r25, r1
    1d7a:	a1 1d       	adc	r26, r1
    1d7c:	20 d0       	rcall	.+64     	; 0x1dbe <__ultoa_invert+0x84>
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <__ultoa_invert+0x48>
    1d80:	68 94       	set
    1d82:	3f 91       	pop	r19
    1d84:	2a e0       	ldi	r18, 0x0A	; 10
    1d86:	26 9f       	mul	r18, r22
    1d88:	11 24       	eor	r1, r1
    1d8a:	30 19       	sub	r19, r0
    1d8c:	30 5d       	subi	r19, 0xD0	; 208
    1d8e:	31 93       	st	Z+, r19
    1d90:	de f6       	brtc	.-74     	; 0x1d48 <__ultoa_invert+0xe>
    1d92:	cf 01       	movw	r24, r30
    1d94:	08 95       	ret
    1d96:	46 2f       	mov	r20, r22
    1d98:	47 70       	andi	r20, 0x07	; 7
    1d9a:	40 5d       	subi	r20, 0xD0	; 208
    1d9c:	41 93       	st	Z+, r20
    1d9e:	b3 e0       	ldi	r27, 0x03	; 3
    1da0:	0f d0       	rcall	.+30     	; 0x1dc0 <__ultoa_invert+0x86>
    1da2:	c9 f7       	brne	.-14     	; 0x1d96 <__ultoa_invert+0x5c>
    1da4:	f6 cf       	rjmp	.-20     	; 0x1d92 <__ultoa_invert+0x58>
    1da6:	46 2f       	mov	r20, r22
    1da8:	4f 70       	andi	r20, 0x0F	; 15
    1daa:	40 5d       	subi	r20, 0xD0	; 208
    1dac:	4a 33       	cpi	r20, 0x3A	; 58
    1dae:	18 f0       	brcs	.+6      	; 0x1db6 <__ultoa_invert+0x7c>
    1db0:	49 5d       	subi	r20, 0xD9	; 217
    1db2:	31 fd       	sbrc	r19, 1
    1db4:	40 52       	subi	r20, 0x20	; 32
    1db6:	41 93       	st	Z+, r20
    1db8:	02 d0       	rcall	.+4      	; 0x1dbe <__ultoa_invert+0x84>
    1dba:	a9 f7       	brne	.-22     	; 0x1da6 <__ultoa_invert+0x6c>
    1dbc:	ea cf       	rjmp	.-44     	; 0x1d92 <__ultoa_invert+0x58>
    1dbe:	b4 e0       	ldi	r27, 0x04	; 4
    1dc0:	a6 95       	lsr	r26
    1dc2:	97 95       	ror	r25
    1dc4:	87 95       	ror	r24
    1dc6:	77 95       	ror	r23
    1dc8:	67 95       	ror	r22
    1dca:	ba 95       	dec	r27
    1dcc:	c9 f7       	brne	.-14     	; 0x1dc0 <__ultoa_invert+0x86>
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	61 05       	cpc	r22, r1
    1dd2:	71 05       	cpc	r23, r1
    1dd4:	08 95       	ret
    1dd6:	9b 01       	movw	r18, r22
    1dd8:	ac 01       	movw	r20, r24
    1dda:	0a 2e       	mov	r0, r26
    1ddc:	06 94       	lsr	r0
    1dde:	57 95       	ror	r21
    1de0:	47 95       	ror	r20
    1de2:	37 95       	ror	r19
    1de4:	27 95       	ror	r18
    1de6:	ba 95       	dec	r27
    1de8:	c9 f7       	brne	.-14     	; 0x1ddc <__ultoa_invert+0xa2>
    1dea:	62 0f       	add	r22, r18
    1dec:	73 1f       	adc	r23, r19
    1dee:	84 1f       	adc	r24, r20
    1df0:	95 1f       	adc	r25, r21
    1df2:	a0 1d       	adc	r26, r0
    1df4:	08 95       	ret

00001df6 <__prologue_saves__>:
    1df6:	2f 92       	push	r2
    1df8:	3f 92       	push	r3
    1dfa:	4f 92       	push	r4
    1dfc:	5f 92       	push	r5
    1dfe:	6f 92       	push	r6
    1e00:	7f 92       	push	r7
    1e02:	8f 92       	push	r8
    1e04:	9f 92       	push	r9
    1e06:	af 92       	push	r10
    1e08:	bf 92       	push	r11
    1e0a:	cf 92       	push	r12
    1e0c:	df 92       	push	r13
    1e0e:	ef 92       	push	r14
    1e10:	ff 92       	push	r15
    1e12:	0f 93       	push	r16
    1e14:	1f 93       	push	r17
    1e16:	cf 93       	push	r28
    1e18:	df 93       	push	r29
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	ca 1b       	sub	r28, r26
    1e20:	db 0b       	sbc	r29, r27
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	09 94       	ijmp

00001e2e <__epilogue_restores__>:
    1e2e:	2a 88       	ldd	r2, Y+18	; 0x12
    1e30:	39 88       	ldd	r3, Y+17	; 0x11
    1e32:	48 88       	ldd	r4, Y+16	; 0x10
    1e34:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e36:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e38:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e40:	b9 84       	ldd	r11, Y+9	; 0x09
    1e42:	c8 84       	ldd	r12, Y+8	; 0x08
    1e44:	df 80       	ldd	r13, Y+7	; 0x07
    1e46:	ee 80       	ldd	r14, Y+6	; 0x06
    1e48:	fd 80       	ldd	r15, Y+5	; 0x05
    1e4a:	0c 81       	ldd	r16, Y+4	; 0x04
    1e4c:	1b 81       	ldd	r17, Y+3	; 0x03
    1e4e:	aa 81       	ldd	r26, Y+2	; 0x02
    1e50:	b9 81       	ldd	r27, Y+1	; 0x01
    1e52:	ce 0f       	add	r28, r30
    1e54:	d1 1d       	adc	r29, r1
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	ed 01       	movw	r28, r26
    1e62:	08 95       	ret

00001e64 <_exit>:
    1e64:	f8 94       	cli

00001e66 <__stop_program>:
    1e66:	ff cf       	rjmp	.-2      	; 0x1e66 <__stop_program>
