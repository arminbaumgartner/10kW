
ansteuerung.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001c94  00001d28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  00800128  00800128  00001d50  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001dac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00001dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b9f  00000000  00000000  00001fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001081  00000000  00000000  00003b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001365  00000000  00000000  00004bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000540  00000000  00000000  00005f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a64  00000000  00000000  00006484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b97  00000000  00000000  00006ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00007a7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <__vector_1>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 3d 08 	jmp	0x107a	; 0x107a <__vector_9>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 be 02 	jmp	0x57c	; 0x57c <__vector_20>
      54:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__vector_21>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 92 04 	jmp	0x924	; 0x924 <__vector_25>
      68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      74:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__vector_29>
      78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      80:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__vector_32>
      84:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__vector_33>
      88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	da e0       	ldi	r29, 0x0A	; 10
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	e4 e9       	ldi	r30, 0x94	; 148
      c0:	fc e1       	ldi	r31, 0x1C	; 28
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a8 32       	cpi	r26, 0x28	; 40
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	21 e0       	ldi	r18, 0x01	; 1
      d0:	a8 e2       	ldi	r26, 0x28	; 40
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a4 37       	cpi	r26, 0x74	; 116
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 35 06 	call	0xc6a	; 0xc6a <main>
      e2:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <Init_Timer1>:
char ausgabe[10];


void Init_Timer1 (void)
{
	TCCR1B = TCCR1B | (1<<CS10);		// Teiler 256 (16MHz / 64 = 4µs)
      ea:	e1 e8       	ldi	r30, 0x81	; 129
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	80 81       	ld	r24, Z
      f0:	81 60       	ori	r24, 0x01	; 1
      f2:	80 83       	st	Z, r24
	TCCR1B = TCCR1B | (1<<CS11);		//Kleiner Schritt 4µs		(1*4µs)
      f4:	80 81       	ld	r24, Z
      f6:	82 60       	ori	r24, 0x02	; 2
      f8:	80 83       	st	Z, r24
	TCCR1B = TCCR1B &~ (1<<CS12);		//Größter Schritt 262ms	(65535*4µs)
      fa:	80 81       	ld	r24, Z
      fc:	8b 7f       	andi	r24, 0xFB	; 251
      fe:	80 83       	st	Z, r24
	
	TIMSK1 = TIMSK1 | (1<<TOIE1);		//OVERFLOW-Interrupt aktivieren
     100:	ef e6       	ldi	r30, 0x6F	; 111
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	80 81       	ld	r24, Z
     106:	81 60       	ori	r24, 0x01	; 1
     108:	80 83       	st	Z, r24
     10a:	08 95       	ret

0000010c <geschwindigkeit_auslesen>:
}
void geschwindigkeit_auslesen(void)
{
	
	overflow = 0;
     10c:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <overflow>
	steps = TCNT1;
     110:	e4 e8       	ldi	r30, 0x84	; 132
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	91 81       	ldd	r25, Z+1	; 0x01
     118:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <steps+0x1>
     11c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <steps>
	TCNT1 = 0;
     120:	11 82       	std	Z+1, r1	; 0x01
     122:	10 82       	st	Z, r1
     124:	08 95       	ret

00000126 <drehzahl_berechnung>:
	

}
void drehzahl_berechnung (void)
{
     126:	8f 92       	push	r8
     128:	9f 92       	push	r9
     12a:	af 92       	push	r10
     12c:	bf 92       	push	r11
     12e:	cf 92       	push	r12
     130:	df 92       	push	r13
     132:	ef 92       	push	r14
     134:	ff 92       	push	r15
	if(overflow)
     136:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <overflow>
     13a:	88 23       	and	r24, r24
     13c:	e9 f0       	breq	.+58     	; 0x178 <drehzahl_berechnung+0x52>
	{
		steps = 0;
     13e:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <steps+0x1>
     142:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <steps>
		drehzahl = 0;
     146:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <drehzahl>
     14a:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <drehzahl+0x1>
     14e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <drehzahl+0x2>
     152:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <drehzahl+0x3>
		drehzahl_pro_sekunde = 0;
     156:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <drehzahl_pro_sekunde>
     15a:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <drehzahl_pro_sekunde+0x1>
     15e:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <drehzahl_pro_sekunde+0x2>
     162:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <drehzahl_pro_sekunde+0x3>
		step_dauer = 0;
     166:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <step_dauer>
     16a:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <step_dauer+0x1>
     16e:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <step_dauer+0x2>
     172:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <step_dauer+0x3>
     176:	b6 c0       	rjmp	.+364    	; 0x2e4 <drehzahl_berechnung+0x1be>
	}
	else
	{
		if(steps <= 25)			//Geschwindigkeits überhohung abfangen -> 25*4 = 100
     178:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <steps>
     17c:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <steps+0x1>
     180:	4a 97       	sbiw	r24, 0x1a	; 26
     182:	30 f4       	brcc	.+12     	; 0x190 <drehzahl_berechnung+0x6a>
		{
			steps = 25;
     184:	89 e1       	ldi	r24, 0x19	; 25
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <steps+0x1>
     18c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <steps>
		}
		
		
		if(steps >= 15500)		//Geschwindigkeits unterschreitung -> 13.750 nötig um 1 U/s zu generieren
     190:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <steps>
     194:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <steps+0x1>
     198:	8c 38       	cpi	r24, 0x8C	; 140
     19a:	9c 43       	sbci	r25, 0x3C	; 60
     19c:	30 f0       	brcs	.+12     	; 0x1aa <drehzahl_berechnung+0x84>
		{
			steps=15500;
     19e:	8c e8       	ldi	r24, 0x8C	; 140
     1a0:	9c e3       	ldi	r25, 0x3C	; 60
     1a2:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <steps+0x1>
     1a6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <steps>
		}
		

		step_dauer = steps*timer1_teiler_mult;		//Werte von max 55.000µs um auf 1U/s zu kommen
     1aa:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <steps>
     1ae:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <steps+0x1>
     1b2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <timer1_teiler_mult>
     1b6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <timer1_teiler_mult+0x1>
     1ba:	28 9f       	mul	r18, r24
     1bc:	b0 01       	movw	r22, r0
     1be:	29 9f       	mul	r18, r25
     1c0:	70 0d       	add	r23, r0
     1c2:	38 9f       	mul	r19, r24
     1c4:	70 0d       	add	r23, r0
     1c6:	11 24       	eor	r1, r1
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__floatunsisf>
     1d0:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <step_dauer>
     1d4:	70 93 4f 01 	sts	0x014F, r23	; 0x80014f <step_dauer+0x1>
     1d8:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <step_dauer+0x2>
     1dc:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <step_dauer+0x3>
		step_dauer = step_dauer/100;				//Werte von 1 bis 550				///////ab hier korriegieren /// Teiler vieleicht auf 64 statt 256
     1e0:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <step_dauer>
     1e4:	70 91 4f 01 	lds	r23, 0x014F	; 0x80014f <step_dauer+0x1>
     1e8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <step_dauer+0x2>
     1ec:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <step_dauer+0x3>
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	48 ec       	ldi	r20, 0xC8	; 200
     1f6:	52 e4       	ldi	r21, 0x42	; 66
     1f8:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__divsf3>
     1fc:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <step_dauer>
     200:	70 93 4f 01 	sts	0x014F, r23	; 0x80014f <step_dauer+0x1>
     204:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <step_dauer+0x2>
     208:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <step_dauer+0x3>
		
		
		step_dauer_help = (step_dauer*6*motor_teiler);	//Werte von 18 bis 9900
     20c:	80 90 4e 01 	lds	r8, 0x014E	; 0x80014e <step_dauer>
     210:	90 90 4f 01 	lds	r9, 0x014F	; 0x80014f <step_dauer+0x1>
     214:	a0 90 50 01 	lds	r10, 0x0150	; 0x800150 <step_dauer+0x2>
     218:	b0 90 51 01 	lds	r11, 0x0151	; 0x800151 <step_dauer+0x3>
     21c:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <motor_teiler>
     220:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <motor_teiler+0x1>
     224:	07 2e       	mov	r0, r23
     226:	00 0c       	add	r0, r0
     228:	88 0b       	sbc	r24, r24
     22a:	99 0b       	sbc	r25, r25
     22c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__floatsisf>
     230:	6b 01       	movw	r12, r22
     232:	7c 01       	movw	r14, r24
     234:	20 e0       	ldi	r18, 0x00	; 0
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	40 ec       	ldi	r20, 0xC0	; 192
     23a:	50 e4       	ldi	r21, 0x40	; 64
     23c:	c5 01       	movw	r24, r10
     23e:	b4 01       	movw	r22, r8
     240:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__mulsf3>
     244:	9b 01       	movw	r18, r22
     246:	ac 01       	movw	r20, r24
     248:	c7 01       	movw	r24, r14
     24a:	b6 01       	movw	r22, r12
     24c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__mulsf3>
     250:	60 93 52 01 	sts	0x0152, r22	; 0x800152 <step_dauer_help>
     254:	70 93 53 01 	sts	0x0153, r23	; 0x800153 <step_dauer_help+0x1>
     258:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <step_dauer_help+0x2>
     25c:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <step_dauer_help+0x3>
		step_dauer_help = step_dauer_help/10;			//Werte von 1 bis 990
     260:	60 91 52 01 	lds	r22, 0x0152	; 0x800152 <step_dauer_help>
     264:	70 91 53 01 	lds	r23, 0x0153	; 0x800153 <step_dauer_help+0x1>
     268:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <step_dauer_help+0x2>
     26c:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <step_dauer_help+0x3>
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	40 e2       	ldi	r20, 0x20	; 32
     276:	51 e4       	ldi	r21, 0x41	; 65
     278:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__divsf3>
     27c:	60 93 52 01 	sts	0x0152, r22	; 0x800152 <step_dauer_help>
     280:	70 93 53 01 	sts	0x0153, r23	; 0x800153 <step_dauer_help+0x1>
     284:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <step_dauer_help+0x2>
     288:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <step_dauer_help+0x3>
		
		drehzahl_pro_sekunde = 1000/step_dauer_help;	//Werte von 1 bis 1000
     28c:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <step_dauer_help>
     290:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <step_dauer_help+0x1>
     294:	40 91 54 01 	lds	r20, 0x0154	; 0x800154 <step_dauer_help+0x2>
     298:	50 91 55 01 	lds	r21, 0x0155	; 0x800155 <step_dauer_help+0x3>
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	8a e7       	ldi	r24, 0x7A	; 122
     2a2:	94 e4       	ldi	r25, 0x44	; 68
     2a4:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__divsf3>
     2a8:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <drehzahl_pro_sekunde>
     2ac:	70 93 57 01 	sts	0x0157, r23	; 0x800157 <drehzahl_pro_sekunde+0x1>
     2b0:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <drehzahl_pro_sekunde+0x2>
     2b4:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <drehzahl_pro_sekunde+0x3>
		
		drehzahl = drehzahl_pro_sekunde*60;
     2b8:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <drehzahl_pro_sekunde>
     2bc:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <drehzahl_pro_sekunde+0x1>
     2c0:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <drehzahl_pro_sekunde+0x2>
     2c4:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <drehzahl_pro_sekunde+0x3>
     2c8:	20 e0       	ldi	r18, 0x00	; 0
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	40 e7       	ldi	r20, 0x70	; 112
     2ce:	52 e4       	ldi	r21, 0x42	; 66
     2d0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__mulsf3>
     2d4:	60 93 31 01 	sts	0x0131, r22	; 0x800131 <drehzahl>
     2d8:	70 93 32 01 	sts	0x0132, r23	; 0x800132 <drehzahl+0x1>
     2dc:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <drehzahl+0x2>
     2e0:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <drehzahl+0x3>
	
	}
}
     2e4:	ff 90       	pop	r15
     2e6:	ef 90       	pop	r14
     2e8:	df 90       	pop	r13
     2ea:	cf 90       	pop	r12
     2ec:	bf 90       	pop	r11
     2ee:	af 90       	pop	r10
     2f0:	9f 90       	pop	r9
     2f2:	8f 90       	pop	r8
     2f4:	08 95       	ret

000002f6 <geschwindigkeit_berechnung>:
void geschwindigkeit_berechnung(void)
{
     2f6:	8f 92       	push	r8
     2f8:	9f 92       	push	r9
     2fa:	af 92       	push	r10
     2fc:	bf 92       	push	r11
     2fe:	cf 92       	push	r12
     300:	df 92       	push	r13
     302:	ef 92       	push	r14
     304:	ff 92       	push	r15
	
	if(overflow)
     306:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <overflow>
     30a:	88 23       	and	r24, r24
     30c:	29 f1       	breq	.+74     	; 0x358 <geschwindigkeit_berechnung+0x62>
	{
		steps = 0;
     30e:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <steps+0x1>
     312:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <steps>
		geschwindigkeit = 0;
     316:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <geschwindigkeit>
     31a:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <geschwindigkeit+0x1>
     31e:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <geschwindigkeit+0x2>
     322:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <geschwindigkeit+0x3>
		drehzahl = 0;
     326:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <drehzahl>
     32a:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <drehzahl+0x1>
     32e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <drehzahl+0x2>
     332:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <drehzahl+0x3>
		drehzahl_pro_sekunde = 0;
     336:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <drehzahl_pro_sekunde>
     33a:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <drehzahl_pro_sekunde+0x1>
     33e:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <drehzahl_pro_sekunde+0x2>
     342:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <drehzahl_pro_sekunde+0x3>
		step_dauer = 0;
     346:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <step_dauer>
     34a:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <step_dauer+0x1>
     34e:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <step_dauer+0x2>
     352:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <step_dauer+0x3>
     356:	86 c0       	rjmp	.+268    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
	
		drehzahl = drehzahl_pro_sekunde*60;
		
		*/
		
		drehzahl_ausgabe_01 = (uint16_t)drehzahl;
     358:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <drehzahl>
     35c:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <drehzahl+0x1>
     360:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <drehzahl+0x2>
     364:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <drehzahl+0x3>
     368:	0e 94 ca 09 	call	0x1394	; 0x1394 <__fixunssfsi>
     36c:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <drehzahl_ausgabe_01+0x1>
     370:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <drehzahl_ausgabe_01>
	
		geschwindigkeit_help = ((drehzahl_pro_sekunde*raddurchmesser*3.14)/uebersetzung) * 3.6;
     374:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <drehzahl_pro_sekunde>
     378:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <drehzahl_pro_sekunde+0x1>
     37c:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <drehzahl_pro_sekunde+0x2>
     380:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <drehzahl_pro_sekunde+0x3>
     384:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
     388:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
     38c:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_start+0x2>
     390:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_start+0x3>
     394:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <uebersetzung>
     398:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <uebersetzung+0x1>
     39c:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <uebersetzung+0x2>
     3a0:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <uebersetzung+0x3>
     3a4:	a5 01       	movw	r20, r10
     3a6:	94 01       	movw	r18, r8
     3a8:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__mulsf3>
     3ac:	23 ec       	ldi	r18, 0xC3	; 195
     3ae:	35 ef       	ldi	r19, 0xF5	; 245
     3b0:	48 e4       	ldi	r20, 0x48	; 72
     3b2:	50 e4       	ldi	r21, 0x40	; 64
     3b4:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__mulsf3>
     3b8:	a7 01       	movw	r20, r14
     3ba:	96 01       	movw	r18, r12
     3bc:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__divsf3>
     3c0:	26 e6       	ldi	r18, 0x66	; 102
     3c2:	36 e6       	ldi	r19, 0x66	; 102
     3c4:	46 e6       	ldi	r20, 0x66	; 102
     3c6:	50 e4       	ldi	r21, 0x40	; 64
     3c8:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__mulsf3>
     3cc:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <geschwindigkeit_help>
     3d0:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <geschwindigkeit_help+0x1>
     3d4:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <geschwindigkeit_help+0x2>
     3d8:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <geschwindigkeit_help+0x3>
	
	
		//drehzahl = ceil(drehzahl);
	
		geschwindigkeit_help = ((drehzahl_pro_sekunde * raddurchmesser * 3.14) / uebersetzung) * 3.6;
     3dc:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <drehzahl_pro_sekunde>
     3e0:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <drehzahl_pro_sekunde+0x1>
     3e4:	40 91 58 01 	lds	r20, 0x0158	; 0x800158 <drehzahl_pro_sekunde+0x2>
     3e8:	50 91 59 01 	lds	r21, 0x0159	; 0x800159 <drehzahl_pro_sekunde+0x3>
     3ec:	c5 01       	movw	r24, r10
     3ee:	b4 01       	movw	r22, r8
     3f0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__mulsf3>
     3f4:	23 ec       	ldi	r18, 0xC3	; 195
     3f6:	35 ef       	ldi	r19, 0xF5	; 245
     3f8:	48 e4       	ldi	r20, 0x48	; 72
     3fa:	50 e4       	ldi	r21, 0x40	; 64
     3fc:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__mulsf3>
     400:	a7 01       	movw	r20, r14
     402:	96 01       	movw	r18, r12
     404:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__divsf3>
     408:	26 e6       	ldi	r18, 0x66	; 102
     40a:	36 e6       	ldi	r19, 0x66	; 102
     40c:	46 e6       	ldi	r20, 0x66	; 102
     40e:	50 e4       	ldi	r21, 0x40	; 64
     410:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__mulsf3>
     414:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <geschwindigkeit_help>
     418:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <geschwindigkeit_help+0x1>
     41c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <geschwindigkeit_help+0x2>
     420:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <geschwindigkeit_help+0x3>
		geschwindigkeit = ceil (geschwindigkeit_help);
     424:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <geschwindigkeit_help>
     428:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <geschwindigkeit_help+0x1>
     42c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <geschwindigkeit_help+0x2>
     430:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <geschwindigkeit_help+0x3>
     434:	0e 94 3c 09 	call	0x1278	; 0x1278 <ceil>
     438:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <geschwindigkeit>
     43c:	70 93 38 01 	sts	0x0138, r23	; 0x800138 <geschwindigkeit+0x1>
     440:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <geschwindigkeit+0x2>
     444:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <geschwindigkeit+0x3>
		
		geschwindigkeit_ausgabe = (uint16_t)geschwindigkeit;
     448:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <geschwindigkeit>
     44c:	70 91 38 01 	lds	r23, 0x0138	; 0x800138 <geschwindigkeit+0x1>
     450:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <geschwindigkeit+0x2>
     454:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <geschwindigkeit+0x3>
     458:	0e 94 ca 09 	call	0x1394	; 0x1394 <__fixunssfsi>
     45c:	70 93 4d 01 	sts	0x014D, r23	; 0x80014d <geschwindigkeit_ausgabe+0x1>
     460:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <geschwindigkeit_ausgabe>
	
		}
	
	
}
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	df 90       	pop	r13
     46a:	cf 90       	pop	r12
     46c:	bf 90       	pop	r11
     46e:	af 90       	pop	r10
     470:	9f 90       	pop	r9
     472:	8f 90       	pop	r8
     474:	08 95       	ret

00000476 <drehzahl_ausgabe>:

void drehzahl_ausgabe (void)
{
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
	sprintf(ausgabe,"    ");
     47a:	cb e3       	ldi	r28, 0x3B	; 59
     47c:	d1 e0       	ldi	r29, 0x01	; 1
     47e:	85 e0       	ldi	r24, 0x05	; 5
     480:	e0 e1       	ldi	r30, 0x10	; 16
     482:	f1 e0       	ldi	r31, 0x01	; 1
     484:	de 01       	movw	r26, r28
     486:	01 90       	ld	r0, Z+
     488:	0d 92       	st	X+, r0
     48a:	8a 95       	dec	r24
     48c:	e1 f7       	brne	.-8      	; 0x486 <drehzahl_ausgabe+0x10>
	LCD_cmd(0x8b);   //gehe zu 1. Zeile, 25. Position
     48e:	8b e8       	ldi	r24, 0x8B	; 139
     490:	0e 94 c0 05 	call	0xb80	; 0xb80 <LCD_cmd>
	LCD_string(ausgabe);
     494:	ce 01       	movw	r24, r28
     496:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <LCD_string>
	
	sprintf(ausgabe,"%d",drehzahl_ausgabe_01);
     49a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <drehzahl_ausgabe_01>
     49e:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <drehzahl_ausgabe_01+0x1>
     4a2:	9f 93       	push	r25
     4a4:	8f 93       	push	r24
     4a6:	85 e1       	ldi	r24, 0x15	; 21
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	9f 93       	push	r25
     4ac:	8f 93       	push	r24
     4ae:	df 93       	push	r29
     4b0:	cf 93       	push	r28
     4b2:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <sprintf>
	LCD_cmd(0x8a);   //gehe zu 1. Zeile, 25. Position
     4b6:	8a e8       	ldi	r24, 0x8A	; 138
     4b8:	0e 94 c0 05 	call	0xb80	; 0xb80 <LCD_cmd>
	LCD_string(ausgabe);
     4bc:	ce 01       	movw	r24, r28
     4be:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <LCD_string>
}
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	08 95       	ret

000004d4 <geschwindigkeits_ausgabe>:

void geschwindigkeits_ausgabe (void)
{
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
	sprintf(ausgabe,"    ");
     4d8:	cb e3       	ldi	r28, 0x3B	; 59
     4da:	d1 e0       	ldi	r29, 0x01	; 1
     4dc:	85 e0       	ldi	r24, 0x05	; 5
     4de:	e0 e1       	ldi	r30, 0x10	; 16
     4e0:	f1 e0       	ldi	r31, 0x01	; 1
     4e2:	de 01       	movw	r26, r28
     4e4:	01 90       	ld	r0, Z+
     4e6:	0d 92       	st	X+, r0
     4e8:	8a 95       	dec	r24
     4ea:	e1 f7       	brne	.-8      	; 0x4e4 <geschwindigkeits_ausgabe+0x10>
	LCD_cmd(0xcb);   //gehe zu 2. Zeile, 25. Position
     4ec:	8b ec       	ldi	r24, 0xCB	; 203
     4ee:	0e 94 c0 05 	call	0xb80	; 0xb80 <LCD_cmd>
	LCD_string(ausgabe);
     4f2:	ce 01       	movw	r24, r28
     4f4:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <LCD_string>
	
	sprintf(ausgabe,"%d",geschwindigkeit_ausgabe);
     4f8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <geschwindigkeit_ausgabe>
     4fc:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <geschwindigkeit_ausgabe+0x1>
     500:	9f 93       	push	r25
     502:	8f 93       	push	r24
     504:	85 e1       	ldi	r24, 0x15	; 21
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	9f 93       	push	r25
     50a:	8f 93       	push	r24
     50c:	df 93       	push	r29
     50e:	cf 93       	push	r28
     510:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <sprintf>
	LCD_cmd(0xca);   //gehe zu 2. Zeile, 25. Position
     514:	8a ec       	ldi	r24, 0xCA	; 202
     516:	0e 94 c0 05 	call	0xb80	; 0xb80 <LCD_cmd>
	LCD_string(ausgabe);
     51a:	ce 01       	movw	r24, r28
     51c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <LCD_string>
}
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	08 95       	ret

00000532 <preset_drehzahl_gesch>:
void preset_drehzahl_gesch (void)
{
	drehzahl = 0;
     532:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <drehzahl>
     536:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <drehzahl+0x1>
     53a:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <drehzahl+0x2>
     53e:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <drehzahl+0x3>
	geschwindigkeit = 0;
     542:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <geschwindigkeit>
     546:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <geschwindigkeit+0x1>
     54a:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <geschwindigkeit+0x2>
     54e:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <geschwindigkeit+0x3>
     552:	08 95       	ret

00000554 <umschalt_null>:
}
char umschalt_null (void)
{
     554:	cf 93       	push	r28
	if (drehzahl == 0)
     556:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <drehzahl>
     55a:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <drehzahl+0x1>
     55e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <drehzahl+0x2>
     562:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <drehzahl+0x3>
     566:	c1 e0       	ldi	r28, 0x01	; 1
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	a9 01       	movw	r20, r18
     56e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__cmpsf2>
     572:	81 11       	cpse	r24, r1
     574:	c0 e0       	ldi	r28, 0x00	; 0
	else
	{
		return 0;		//Geschwindigkeit zu hoch
	}
	
}
     576:	8c 2f       	mov	r24, r28
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <__vector_20>:

ISR(TIMER1_OVF_vect)			//Motor steht
{
     57c:	1f 92       	push	r1
     57e:	0f 92       	push	r0
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	0f 92       	push	r0
     584:	11 24       	eor	r1, r1
     586:	8f 93       	push	r24
	
	overflow = 1;
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <overflow>
	
	steps = 0;
     58e:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <steps+0x1>
     592:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <steps>
	geschwindigkeit = 0;
     596:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <geschwindigkeit>
     59a:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <geschwindigkeit+0x1>
     59e:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <geschwindigkeit+0x2>
     5a2:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <geschwindigkeit+0x3>
	geschwindigkeit_ausgabe = 0;
     5a6:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <geschwindigkeit_ausgabe+0x1>
     5aa:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <geschwindigkeit_ausgabe>
	drehzahl = 0;
     5ae:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <drehzahl>
     5b2:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <drehzahl+0x1>
     5b6:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <drehzahl+0x2>
     5ba:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <drehzahl+0x3>
	drehzahl_ausgabe_01 = 0;
     5be:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <drehzahl_ausgabe_01+0x1>
     5c2:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <drehzahl_ausgabe_01>
	drehzahl_pro_sekunde = 0;
     5c6:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <drehzahl_pro_sekunde>
     5ca:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <drehzahl_pro_sekunde+0x1>
     5ce:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <drehzahl_pro_sekunde+0x2>
     5d2:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <drehzahl_pro_sekunde+0x3>
	step_dauer = 0;
     5d6:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <step_dauer>
     5da:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <step_dauer+0x1>
     5de:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <step_dauer+0x2>
     5e2:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <step_dauer+0x3>
	
     5e6:	8f 91       	pop	r24
     5e8:	0f 90       	pop	r0
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	0f 90       	pop	r0
     5ee:	1f 90       	pop	r1
     5f0:	18 95       	reti

000005f2 <akku_ladestand>:
	return ladestand;
	
}

void akku_daten_einbeziehen (uint8_t ladestand, uint8_t temp)
{
     5f2:	80 5f       	subi	r24, 0xF0	; 240
     5f4:	9a 40       	sbci	r25, 0x0A	; 10
     5f6:	96 95       	lsr	r25
     5f8:	87 95       	ror	r24
     5fa:	96 95       	lsr	r25
     5fc:	87 95       	ror	r24
     5fe:	99 27       	eor	r25, r25
     600:	08 95       	ret

00000602 <geschwindigkeits_regulierung>:
		
	}
}

char geschwindigkeits_regulierung(char adc_wert, char adc_wert_alt)
{
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	d8 2f       	mov	r29, r24
	float kennlinie_voltage;
	
	float angleich_gerade_gas;
	
	
	if (drehzahl >= MAXDREHZAHL)		//Überdrehzahl abfangen
     608:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <drehzahl>
     60c:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <drehzahl+0x1>
     610:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <drehzahl+0x2>
     614:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <drehzahl+0x3>
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e4       	ldi	r19, 0x40	; 64
     61c:	4c e9       	ldi	r20, 0x9C	; 156
     61e:	55 e4       	ldi	r21, 0x45	; 69
     620:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <__gesf2>
     624:	88 23       	and	r24, r24
     626:	64 f0       	brlt	.+24     	; 0x640 <geschwindigkeits_regulierung+0x3e>
	{
		drehzahl = MAXDREHZAHL;			//5000 U/min
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e4       	ldi	r25, 0x40	; 64
     62c:	ac e9       	ldi	r26, 0x9C	; 156
     62e:	b5 e4       	ldi	r27, 0x45	; 69
     630:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <drehzahl>
     634:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <drehzahl+0x1>
     638:	a0 93 33 01 	sts	0x0133, r26	; 0x800133 <drehzahl+0x2>
     63c:	b0 93 34 01 	sts	0x0134, r27	; 0x800134 <drehzahl+0x3>
	}
	

	
	if (drehzahl <= 2420)
     640:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <drehzahl>
     644:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <drehzahl+0x1>
     648:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <drehzahl+0x2>
     64c:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <drehzahl+0x3>
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e4       	ldi	r19, 0x40	; 64
     654:	47 e1       	ldi	r20, 0x17	; 23
     656:	55 e4       	ldi	r21, 0x45	; 69
     658:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__cmpsf2>
     65c:	18 16       	cp	r1, r24
     65e:	7c f0       	brlt	.+30     	; 0x67e <geschwindigkeits_regulierung+0x7c>
	{
		kennlinie_voltage = (float)(drehzahl/DREHZAHLTEILER1);		//Teiler = 129
     660:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <drehzahl>
     664:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <drehzahl+0x1>
     668:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <drehzahl+0x2>
     66c:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <drehzahl+0x3>
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	41 e0       	ldi	r20, 0x01	; 1
     676:	53 e4       	ldi	r21, 0x43	; 67
     678:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__divsf3>
     67c:	54 c0       	rjmp	.+168    	; 0x726 <geschwindigkeits_regulierung+0x124>
	}
	else if ((drehzahl >= 2420) && (drehzahl <= 3000))				//Teiler = 59
     67e:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <drehzahl>
     682:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <drehzahl+0x1>
     686:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <drehzahl+0x2>
     68a:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <drehzahl+0x3>
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e4       	ldi	r19, 0x40	; 64
     692:	47 e1       	ldi	r20, 0x17	; 23
     694:	55 e4       	ldi	r21, 0x45	; 69
     696:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <__gesf2>
     69a:	88 23       	and	r24, r24
     69c:	2c f1       	brlt	.+74     	; 0x6e8 <geschwindigkeits_regulierung+0xe6>
     69e:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <drehzahl>
     6a2:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <drehzahl+0x1>
     6a6:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <drehzahl+0x2>
     6aa:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <drehzahl+0x3>
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e8       	ldi	r19, 0x80	; 128
     6b2:	4b e3       	ldi	r20, 0x3B	; 59
     6b4:	55 e4       	ldi	r21, 0x45	; 69
     6b6:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__cmpsf2>
     6ba:	18 16       	cp	r1, r24
     6bc:	ac f0       	brlt	.+42     	; 0x6e8 <geschwindigkeits_regulierung+0xe6>
	{
		kennlinie_voltage = (float)((drehzahl/DREHZAHLTEILER2)-22.3);
     6be:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <drehzahl>
     6c2:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <drehzahl+0x1>
     6c6:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <drehzahl+0x2>
     6ca:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <drehzahl+0x3>
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	4c e6       	ldi	r20, 0x6C	; 108
     6d4:	52 e4       	ldi	r21, 0x42	; 66
     6d6:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__divsf3>
     6da:	26 e6       	ldi	r18, 0x66	; 102
     6dc:	36 e6       	ldi	r19, 0x66	; 102
     6de:	42 eb       	ldi	r20, 0xB2	; 178
     6e0:	51 e4       	ldi	r21, 0x41	; 65
     6e2:	0e 94 cf 08 	call	0x119e	; 0x119e <__subsf3>
     6e6:	1f c0       	rjmp	.+62     	; 0x726 <geschwindigkeits_regulierung+0x124>
	}
	else if (drehzahl >= 3000)										//Teiler = 106
     6e8:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <drehzahl>
     6ec:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <drehzahl+0x1>
     6f0:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <drehzahl+0x2>
     6f4:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <drehzahl+0x3>
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e8       	ldi	r19, 0x80	; 128
     6fc:	4b e3       	ldi	r20, 0x3B	; 59
     6fe:	55 e4       	ldi	r21, 0x45	; 69
     700:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <__gesf2>
     704:	88 23       	and	r24, r24
     706:	0c f4       	brge	.+2      	; 0x70a <geschwindigkeits_regulierung+0x108>
     708:	4a c0       	rjmp	.+148    	; 0x79e <geschwindigkeits_regulierung+0x19c>
	{
		kennlinie_voltage = (float)(drehzahl/DREHZAHLTEILER3);
     70a:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <drehzahl>
     70e:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <drehzahl+0x1>
     712:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <drehzahl+0x2>
     716:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <drehzahl+0x3>
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	44 ed       	ldi	r20, 0xD4	; 212
     720:	52 e4       	ldi	r21, 0x42	; 66
     722:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__divsf3>
	//kennlinie_voltage = (float)(drehzahl/DREHZAHLTEILER1);
	
	//kennlinie_voltage = (float)(drehzahl/DREHZAHLTEILER);		//Teiler = 278	//100W motor
	
	kennlinie_wert_float = kennlinie_voltage * (253/48);			//5,27	// * (gesamtspannung_kom/NENNSPANNUNG)
	kennlinie_wert = (char)kennlinie_wert_float;
     726:	20 e0       	ldi	r18, 0x00	; 0
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	40 ea       	ldi	r20, 0xA0	; 160
     72c:	50 e4       	ldi	r21, 0x40	; 64
     72e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__mulsf3>
     732:	0e 94 ca 09 	call	0x1394	; 0x1394 <__fixunssfsi>
     736:	c6 2f       	mov	r28, r22
	*/
	
	angleich_gerade_gas = SICHERHEITSBEREICH;
	
		
	if (drehzahl == 0 && adc_wert > 20)		//Stillstand
     738:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <drehzahl>
     73c:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <drehzahl+0x1>
     740:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <drehzahl+0x2>
     744:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <drehzahl+0x3>
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	a9 01       	movw	r20, r18
     74e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__cmpsf2>
     752:	81 11       	cpse	r24, r1
     754:	02 c0       	rjmp	.+4      	; 0x75a <geschwindigkeits_regulierung+0x158>
     756:	d5 31       	cpi	r29, 0x15	; 21
     758:	f0 f4       	brcc	.+60     	; 0x796 <geschwindigkeits_regulierung+0x194>
		
		regulierter_wert = WEGFAHR_WERT;	//Wegfahrwert
	}
	else
	{
		if (kennlinie_wert >= (255-SICHERHEITSBEREICH))			//Overflows vermeiden //bei gas
     75a:	cb 3e       	cpi	r28, 0xEB	; 235
     75c:	38 f4       	brcc	.+14     	; 0x76c <geschwindigkeits_regulierung+0x16a>
     75e:	01 c0       	rjmp	.+2      	; 0x762 <geschwindigkeits_regulierung+0x160>
	//kennlinie_voltage = (float)(drehzahl/DREHZAHLTEILER1);
	
	//kennlinie_voltage = (float)(drehzahl/DREHZAHLTEILER);		//Teiler = 278	//100W motor
	
	kennlinie_wert_float = kennlinie_voltage * (253/48);			//5,27	// * (gesamtspannung_kom/NENNSPANNUNG)
	kennlinie_wert = (char)kennlinie_wert_float;
     760:	c0 e0       	ldi	r28, 0x00	; 0
     762:	6c 2f       	mov	r22, r28
     764:	c4 31       	cpi	r28, 0x14	; 20
     766:	18 f4       	brcc	.+6      	; 0x76e <geschwindigkeits_regulierung+0x16c>
     768:	64 e1       	ldi	r22, 0x14	; 20
     76a:	01 c0       	rjmp	.+2      	; 0x76e <geschwindigkeits_regulierung+0x16c>
	}
	else
	{
		if (kennlinie_wert >= (255-SICHERHEITSBEREICH))			//Overflows vermeiden //bei gas
		{
			kennlinie_wert = (255-SICHERHEITSBEREICH);
     76c:	6b ee       	ldi	r22, 0xEB	; 235
		{
			kennlinie_wert = (0+SICHERHEITSBEREICH);
		}
		
		
		if (adc_wert > (kennlinie_wert+(char)angleich_gerade_gas))				//Überbereich
     76e:	2d 2f       	mov	r18, r29
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	86 2f       	mov	r24, r22
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	ac 01       	movw	r20, r24
     778:	4c 5e       	subi	r20, 0xEC	; 236
     77a:	5f 4f       	sbci	r21, 0xFF	; 255
     77c:	42 17       	cp	r20, r18
     77e:	53 07       	cpc	r21, r19
     780:	1c f4       	brge	.+6      	; 0x788 <geschwindigkeits_regulierung+0x186>
		{
				
			regulierter_wert = kennlinie_wert+(char)angleich_gerade_gas;
     782:	d4 e1       	ldi	r29, 0x14	; 20
     784:	d6 0f       	add	r29, r22
     786:	1e c0       	rjmp	.+60     	; 0x7c4 <geschwindigkeits_regulierung+0x1c2>
			
			
		}
		else if (adc_wert < (kennlinie_wert-SICHERHEITSBEREICH))			//Unterberreich		//kann im Stillstand nicht eintretten
     788:	44 97       	sbiw	r24, 0x14	; 20
     78a:	28 17       	cp	r18, r24
     78c:	39 07       	cpc	r19, r25
     78e:	d4 f4       	brge	.+52     	; 0x7c4 <geschwindigkeits_regulierung+0x1c2>
		{
		
			regulierter_wert = kennlinie_wert-SICHERHEITSBEREICH;
     790:	dc ee       	ldi	r29, 0xEC	; 236
     792:	d6 0f       	add	r29, r22
     794:	17 c0       	rjmp	.+46     	; 0x7c4 <geschwindigkeits_regulierung+0x1c2>
	
		
	if (drehzahl == 0 && adc_wert > 20)		//Stillstand
	{
		
		regulierter_wert = WEGFAHR_WERT;	//Wegfahrwert
     796:	d4 e1       	ldi	r29, 0x14	; 20
     798:	15 c0       	rjmp	.+42     	; 0x7c4 <geschwindigkeits_regulierung+0x1c2>
     79a:	d4 e1       	ldi	r29, 0x14	; 20
		}		
	}

	
	
	return regulierter_wert;
     79c:	13 c0       	rjmp	.+38     	; 0x7c4 <geschwindigkeits_regulierung+0x1c2>
	*/
	
	angleich_gerade_gas = SICHERHEITSBEREICH;
	
		
	if (drehzahl == 0 && adc_wert > 20)		//Stillstand
     79e:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <drehzahl>
     7a2:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <drehzahl+0x1>
     7a6:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <drehzahl+0x2>
     7aa:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <drehzahl+0x3>
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	a9 01       	movw	r20, r18
     7b4:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__cmpsf2>
     7b8:	81 11       	cpse	r24, r1
     7ba:	d2 cf       	rjmp	.-92     	; 0x760 <geschwindigkeits_regulierung+0x15e>
     7bc:	d5 31       	cpi	r29, 0x15	; 21
     7be:	68 f7       	brcc	.-38     	; 0x79a <geschwindigkeits_regulierung+0x198>
	//kennlinie_voltage = (float)(drehzahl/DREHZAHLTEILER1);
	
	//kennlinie_voltage = (float)(drehzahl/DREHZAHLTEILER);		//Teiler = 278	//100W motor
	
	kennlinie_wert_float = kennlinie_voltage * (253/48);			//5,27	// * (gesamtspannung_kom/NENNSPANNUNG)
	kennlinie_wert = (char)kennlinie_wert_float;
     7c0:	c0 e0       	ldi	r28, 0x00	; 0
     7c2:	cf cf       	rjmp	.-98     	; 0x762 <geschwindigkeits_regulierung+0x160>

	
	
	return regulierter_wert;
	
}
     7c4:	8d 2f       	mov	r24, r29
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	08 95       	ret

000007cc <ladestand_ausgabe>:

void ladestand_ausgabe (uint8_t ladestand_ubernahme)
{
		sprintf(ausgabe_02,"%d",ladestand_ubernahme);
     7cc:	1f 92       	push	r1
     7ce:	8f 93       	push	r24
     7d0:	85 e1       	ldi	r24, 0x15	; 21
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	9f 93       	push	r25
     7d6:	8f 93       	push	r24
     7d8:	8a e5       	ldi	r24, 0x5A	; 90
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	9f 93       	push	r25
     7de:	8f 93       	push	r24
     7e0:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <sprintf>
		LCD_cmd(0xC0);   //gehe zu 2. Zeile, 1. Position
     7e4:	80 ec       	ldi	r24, 0xC0	; 192
     7e6:	0e 94 c0 05 	call	0xb80	; 0xb80 <LCD_cmd>
		LCD_string(ausgabe_02);
     7ea:	8a e5       	ldi	r24, 0x5A	; 90
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <LCD_string>
}
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	08 95       	ret

00000800 <init_usart>:
	else
	{
		return NENNZELLSPANNUNG;
	}
	
}
     800:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     804:	87 e6       	ldi	r24, 0x67	; 103
     806:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     80a:	a9 ec       	ldi	r26, 0xC9	; 201
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	8c 91       	ld	r24, X
     810:	80 61       	ori	r24, 0x10	; 16
     812:	8c 93       	st	X, r24
     814:	8c 91       	ld	r24, X
     816:	80 68       	ori	r24, 0x80	; 128
     818:	8c 93       	st	X, r24
     81a:	8c 91       	ld	r24, X
     81c:	88 60       	ori	r24, 0x08	; 8
     81e:	8c 93       	st	X, r24
     820:	ea ec       	ldi	r30, 0xCA	; 202
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
     826:	8f 7b       	andi	r24, 0xBF	; 191
     828:	80 83       	st	Z, r24
     82a:	80 81       	ld	r24, Z
     82c:	8f 77       	andi	r24, 0x7F	; 127
     82e:	80 83       	st	Z, r24
     830:	80 81       	ld	r24, Z
     832:	8f 7e       	andi	r24, 0xEF	; 239
     834:	80 83       	st	Z, r24
     836:	80 81       	ld	r24, Z
     838:	80 62       	ori	r24, 0x20	; 32
     83a:	80 83       	st	Z, r24
     83c:	80 81       	ld	r24, Z
     83e:	87 7f       	andi	r24, 0xF7	; 247
     840:	80 83       	st	Z, r24
     842:	80 81       	ld	r24, Z
     844:	82 60       	ori	r24, 0x02	; 2
     846:	80 83       	st	Z, r24
     848:	80 81       	ld	r24, Z
     84a:	84 60       	ori	r24, 0x04	; 4
     84c:	80 83       	st	Z, r24
     84e:	8c 91       	ld	r24, X
     850:	8b 7f       	andi	r24, 0xFB	; 251
     852:	8c 93       	st	X, r24
     854:	80 81       	ld	r24, Z
     856:	80 83       	st	Z, r24
     858:	08 95       	ret

0000085a <init_transmission_timer>:
     85a:	84 b5       	in	r24, 0x24	; 36
     85c:	8f 7b       	andi	r24, 0xBF	; 191
     85e:	84 bd       	out	0x24, r24	; 36
     860:	84 b5       	in	r24, 0x24	; 36
     862:	8f 77       	andi	r24, 0x7F	; 127
     864:	84 bd       	out	0x24, r24	; 36
     866:	84 b5       	in	r24, 0x24	; 36
     868:	8e 7f       	andi	r24, 0xFE	; 254
     86a:	84 bd       	out	0x24, r24	; 36
     86c:	84 b5       	in	r24, 0x24	; 36
     86e:	8d 7f       	andi	r24, 0xFD	; 253
     870:	84 bd       	out	0x24, r24	; 36
     872:	85 b5       	in	r24, 0x25	; 37
     874:	87 7f       	andi	r24, 0xF7	; 247
     876:	85 bd       	out	0x25, r24	; 37
     878:	85 b5       	in	r24, 0x25	; 37
     87a:	8e 7f       	andi	r24, 0xFE	; 254
     87c:	85 bd       	out	0x25, r24	; 37
     87e:	85 b5       	in	r24, 0x25	; 37
     880:	8d 7f       	andi	r24, 0xFD	; 253
     882:	85 bd       	out	0x25, r24	; 37
     884:	85 b5       	in	r24, 0x25	; 37
     886:	84 60       	ori	r24, 0x04	; 4
     888:	85 bd       	out	0x25, r24	; 37
     88a:	84 e6       	ldi	r24, 0x64	; 100
     88c:	87 bd       	out	0x27, r24	; 39
     88e:	ee e6       	ldi	r30, 0x6E	; 110
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	82 60       	ori	r24, 0x02	; 2
     896:	80 83       	st	Z, r24
     898:	08 95       	ret

0000089a <daten_aufteilen>:
     89a:	e8 e6       	ldi	r30, 0x68	; 104
     89c:	f1 e0       	ldi	r31, 0x01	; 1
     89e:	80 81       	ld	r24, Z
     8a0:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <temperatur>
     8a4:	81 81       	ldd	r24, Z+1	; 0x01
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <niedrige_akku_voltage+0x1>
     8ac:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <niedrige_akku_voltage>
     8b0:	22 81       	ldd	r18, Z+2	; 0x02
     8b2:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <niedrige_akku_voltage>
     8b6:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <niedrige_akku_voltage+0x1>
     8ba:	92 2b       	or	r25, r18
     8bc:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <niedrige_akku_voltage+0x1>
     8c0:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <niedrige_akku_voltage>
     8c4:	83 81       	ldd	r24, Z+3	; 0x03
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
     8cc:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
     8d0:	24 81       	ldd	r18, Z+4	; 0x04
     8d2:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     8d6:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
     8da:	92 2b       	or	r25, r18
     8dc:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
     8e0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
     8e4:	08 95       	ret

000008e6 <save_akku_daten>:
     8e6:	a0 e6       	ldi	r26, 0x60	; 96
     8e8:	b1 e0       	ldi	r27, 0x01	; 1
     8ea:	8c 91       	ld	r24, X
     8ec:	e8 e6       	ldi	r30, 0x68	; 104
     8ee:	f1 e0       	ldi	r31, 0x01	; 1
     8f0:	80 83       	st	Z, r24
     8f2:	11 96       	adiw	r26, 0x01	; 1
     8f4:	8c 91       	ld	r24, X
     8f6:	11 97       	sbiw	r26, 0x01	; 1
     8f8:	81 83       	std	Z+1, r24	; 0x01
     8fa:	12 96       	adiw	r26, 0x02	; 2
     8fc:	8c 91       	ld	r24, X
     8fe:	12 97       	sbiw	r26, 0x02	; 2
     900:	82 83       	std	Z+2, r24	; 0x02
     902:	13 96       	adiw	r26, 0x03	; 3
     904:	8c 91       	ld	r24, X
     906:	13 97       	sbiw	r26, 0x03	; 3
     908:	83 83       	std	Z+3, r24	; 0x03
     90a:	14 96       	adiw	r26, 0x04	; 4
     90c:	8c 91       	ld	r24, X
     90e:	84 83       	std	Z+4, r24	; 0x04
     910:	08 95       	ret

00000912 <temperatur_uebertragung>:
uint8_t temperatur_uebertragung(void)
{
	if(temperatur <= MAXTEMPERATUR)
     912:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <temperatur>
     916:	81 3a       	cpi	r24, 0xA1	; 161
     918:	18 f4       	brcc	.+6      	; 0x920 <temperatur_uebertragung+0xe>
	{
		return temperatur;
     91a:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <temperatur>
     91e:	08 95       	ret
	}
	else
	{
		return 20;
     920:	84 e1       	ldi	r24, 0x14	; 20
	}
	
	
}
     922:	08 95       	ret

00000924 <__vector_25>:

ISR(USART1_RX_vect)     //Interrupt für Empfang 
{  
     924:	1f 92       	push	r1
     926:	0f 92       	push	r0
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	0f 92       	push	r0
     92c:	11 24       	eor	r1, r1
     92e:	2f 93       	push	r18
     930:	3f 93       	push	r19
     932:	4f 93       	push	r20
     934:	5f 93       	push	r21
     936:	6f 93       	push	r22
     938:	7f 93       	push	r23
     93a:	8f 93       	push	r24
     93c:	9f 93       	push	r25
     93e:	af 93       	push	r26
     940:	bf 93       	push	r27
     942:	ef 93       	push	r30
     944:	ff 93       	push	r31
	
		
	if((start == 1 && overflow_counter >= 5) || (zahler_uebertragung >= 1))			//Wenn nicht gerade in Daten ist && pause eingehalten wurde		//5*1,6ms = 8ms
     946:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <start>
     94a:	81 30       	cpi	r24, 0x01	; 1
     94c:	21 f4       	brne	.+8      	; 0x956 <__vector_25+0x32>
     94e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <overflow_counter>
     952:	85 30       	cpi	r24, 0x05	; 5
     954:	20 f4       	brcc	.+8      	; 0x95e <__vector_25+0x3a>
     956:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <zahler_uebertragung>
     95a:	88 23       	and	r24, r24
     95c:	b1 f0       	breq	.+44     	; 0x98a <__vector_25+0x66>
	{
		//genaue 8ms können zum Problem werden
		
			overflow_counter = 0;		//Counter wird auf 0 gesetzt
     95e:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <overflow_counter>
			TCNT0 = 0;
     962:	16 bc       	out	0x26, r1	; 38
		
			//while( !(UCSR1A & (1<<RXC1)) );   //warten bis Zeichen fertig empfangen
			empfangs_daten[zahler_uebertragung] = UDR1;		//Zeichen in Variable ablegen	//UDR1 -> 8 Bit daten 9.Bit wäre in UCSR1B			//Temperatur //LOW-Spannung //LOW-Spannung
     964:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <zahler_uebertragung>
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     96e:	e0 5a       	subi	r30, 0xA0	; 160
     970:	fe 4f       	sbci	r31, 0xFE	; 254
     972:	80 83       	st	Z, r24
			
		
			if (zahler_uebertragung == 4)
     974:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <zahler_uebertragung>
     978:	84 30       	cpi	r24, 0x04	; 4
     97a:	11 f4       	brne	.+4      	; 0x980 <__vector_25+0x5c>
			{
				save_akku_daten();
     97c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <save_akku_daten>
			}		
		
			zahler_uebertragung++;
     980:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <zahler_uebertragung>
     984:	8f 5f       	subi	r24, 0xFF	; 255
     986:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <zahler_uebertragung>
		
		}

}
     98a:	ff 91       	pop	r31
     98c:	ef 91       	pop	r30
     98e:	bf 91       	pop	r27
     990:	af 91       	pop	r26
     992:	9f 91       	pop	r25
     994:	8f 91       	pop	r24
     996:	7f 91       	pop	r23
     998:	6f 91       	pop	r22
     99a:	5f 91       	pop	r21
     99c:	4f 91       	pop	r20
     99e:	3f 91       	pop	r19
     9a0:	2f 91       	pop	r18
     9a2:	0f 90       	pop	r0
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	0f 90       	pop	r0
     9a8:	1f 90       	pop	r1
     9aa:	18 95       	reti

000009ac <__vector_21>:
ISR (TIMER0_COMPA_vect)
{
     9ac:	1f 92       	push	r1
     9ae:	0f 92       	push	r0
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	0f 92       	push	r0
     9b4:	11 24       	eor	r1, r1
     9b6:	2f 93       	push	r18
     9b8:	3f 93       	push	r19
     9ba:	4f 93       	push	r20
     9bc:	5f 93       	push	r21
     9be:	6f 93       	push	r22
     9c0:	7f 93       	push	r23
     9c2:	8f 93       	push	r24
     9c4:	9f 93       	push	r25
     9c6:	af 93       	push	r26
     9c8:	bf 93       	push	r27
     9ca:	ef 93       	push	r30
     9cc:	ff 93       	push	r31
	TCNT0 = 0;
     9ce:	16 bc       	out	0x26, r1	; 38
	start = 1;
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <start>

	
	zahler_uebertragung = 0;
     9d6:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <zahler_uebertragung>
	
	
	overflow_counter++;		//Zählen der Overflows
     9da:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <overflow_counter>
     9de:	8f 5f       	subi	r24, 0xFF	; 255
     9e0:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <overflow_counter>
	
	if(overflow_counter == 2)		//nach 3*1,6ms= 4,8ms werden Daten gespeichert
     9e4:	82 30       	cpi	r24, 0x02	; 2
     9e6:	11 f4       	brne	.+4      	; 0x9ec <__vector_21+0x40>
	{
		daten_aufteilen();
     9e8:	0e 94 4d 04 	call	0x89a	; 0x89a <daten_aufteilen>
	}
	
	if (overflow_counter > 250)
     9ec:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <overflow_counter>
     9f0:	8b 3f       	cpi	r24, 0xFB	; 251
     9f2:	18 f0       	brcs	.+6      	; 0x9fa <__vector_21+0x4e>
	{
		overflow_counter = 250;
     9f4:	8a ef       	ldi	r24, 0xFA	; 250
     9f6:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <overflow_counter>
	}
	
     9fa:	ff 91       	pop	r31
     9fc:	ef 91       	pop	r30
     9fe:	bf 91       	pop	r27
     a00:	af 91       	pop	r26
     a02:	9f 91       	pop	r25
     a04:	8f 91       	pop	r24
     a06:	7f 91       	pop	r23
     a08:	6f 91       	pop	r22
     a0a:	5f 91       	pop	r21
     a0c:	4f 91       	pop	r20
     a0e:	3f 91       	pop	r19
     a10:	2f 91       	pop	r18
     a12:	0f 90       	pop	r0
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	0f 90       	pop	r0
     a18:	1f 90       	pop	r1
     a1a:	18 95       	reti

00000a1c <delay_ms>:



void delay_ms (unsigned int ms)   //Hilfsfunktion: Zeitvernichtung 
{  
	for (unsigned int i=0; i<ms; i++)
     a1c:	00 97       	sbiw	r24, 0x00	; 0
     a1e:	69 f0       	breq	.+26     	; 0xa3a <delay_ms+0x1e>
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a24:	ef e9       	ldi	r30, 0x9F	; 159
     a26:	ff e0       	ldi	r31, 0x0F	; 15
     a28:	31 97       	sbiw	r30, 0x01	; 1
     a2a:	f1 f7       	brne	.-4      	; 0xa28 <delay_ms+0xc>
     a2c:	00 c0       	rjmp	.+0      	; 0xa2e <delay_ms+0x12>
     a2e:	00 00       	nop
     a30:	2f 5f       	subi	r18, 0xFF	; 255
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	82 17       	cp	r24, r18
     a36:	93 07       	cpc	r25, r19
     a38:	a9 f7       	brne	.-22     	; 0xa24 <delay_ms+0x8>
     a3a:	08 95       	ret

00000a3c <Enable>:

}

void Enable(void)  //Hilfsfunktion: H=>L Flanke der Enable Leitung (E) 
{  
	PORTF = PORTF | (1<<E); //E = 1   
     a3c:	89 9a       	sbi	0x11, 1	; 17
	delay_ms(5);  
     a3e:	85 e0       	ldi	r24, 0x05	; 5
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 0e 05 	call	0xa1c	; 0xa1c <delay_ms>
	PORTF = PORTF &~(1<<E); //E = 0  
     a46:	89 98       	cbi	0x11, 1	; 17
	delay_ms(5); 
     a48:	85 e0       	ldi	r24, 0x05	; 5
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <delay_ms>
     a50:	08 95       	ret

00000a52 <LCD_init>:
{  
	//DDRF = DDRF | (1<<E);										//E als Ausgang
	//DDRB = DDRB | (1<<RS);										//RS als Ausgang
	//DDRF = DDRF | (1<<DB7) | (1<<DB6) | (1<<DB5) | (1<<DB4);	//DB7..DB4 als Ausgang
	
	delay_ms(50);									//lt. Datenblatt min. 15ms nach Power ON warten  
     a52:	82 e3       	ldi	r24, 0x32	; 50
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 0e 05 	call	0xa1c	; 0xa1c <delay_ms>
	PORTF = PORTF &~ (1<<E);			//E=0 (RW=0 per HW)
     a5a:	89 98       	cbi	0x11, 1	; 17
	PORTB = PORTB &~ (1<<RS);			//RS=0
     a5c:	28 98       	cbi	0x05, 0	; 5
	
	
	// Function Set  
		//DB7..DB4 = 0011  
		PORTF = PORTF & (~(1<<DB7) & ~(1<<DB6));	//Interface auf 8 Bit  
     a5e:	81 b3       	in	r24, 0x11	; 17
     a60:	8f 73       	andi	r24, 0x3F	; 63
     a62:	81 bb       	out	0x11, r24	; 17
		PORTF = PORTF | (1<<DB5) | (1<<DB4);    
     a64:	81 b3       	in	r24, 0x11	; 17
     a66:	80 63       	ori	r24, 0x30	; 48
     a68:	81 bb       	out	0x11, r24	; 17
		Enable();
     a6a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Enable>
	
		//DB7..DB4 = 0011  #
		PORTF = PORTF & (~(1<<DB7) & ~(1<<DB6));	//Interface auf 8 Bit  
     a6e:	81 b3       	in	r24, 0x11	; 17
     a70:	8f 73       	andi	r24, 0x3F	; 63
     a72:	81 bb       	out	0x11, r24	; 17
		PORTF = PORTF | (1<<DB5) | (1<<DB4);    
     a74:	81 b3       	in	r24, 0x11	; 17
     a76:	80 63       	ori	r24, 0x30	; 48
     a78:	81 bb       	out	0x11, r24	; 17
		Enable();
     a7a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Enable>
	
		//DB7..DB4 = 0011  
		PORTF = PORTF & (~(1<<DB7) & ~(1<<DB6));	//Interface auf 8 Bit  
     a7e:	81 b3       	in	r24, 0x11	; 17
     a80:	8f 73       	andi	r24, 0x3F	; 63
     a82:	81 bb       	out	0x11, r24	; 17
		PORTF = PORTF | (1<<DB5) | (1<<DB4);    
     a84:	81 b3       	in	r24, 0x11	; 17
     a86:	80 63       	ori	r24, 0x30	; 48
     a88:	81 bb       	out	0x11, r24	; 17
		Enable();
     a8a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Enable>
	
		//DB7..DB4 = 0010  
		PORTF = PORTF & (~(1<<DB7) & ~(1<<DB6) &~(1<<DB4));  
     a8e:	81 b3       	in	r24, 0x11	; 17
     a90:	8f 72       	andi	r24, 0x2F	; 47
     a92:	81 bb       	out	0x11, r24	; 17
		PORTF = PORTF | (1<<DB5);					//Interface auf 4 Bit  
     a94:	8d 9a       	sbi	0x11, 5	; 17
		Enable();
     a96:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Enable>
		
	// 2-zeilig, 5x8 Matrix //  
	
	//DB7..DB4 = 0010  
	PORTF = PORTF & (~(1<<DB7) & ~(1<<DB6) &~(1<<DB4));  
     a9a:	81 b3       	in	r24, 0x11	; 17
     a9c:	8f 72       	andi	r24, 0x2F	; 47
     a9e:	81 bb       	out	0x11, r24	; 17
	PORTF = PORTF | (1<<DB5);   //Upper Nibble  
     aa0:	8d 9a       	sbi	0x11, 5	; 17
	Enable();
     aa2:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Enable>
	
	//DB7..DB4 = 1000  
	PORTF = PORTF | (1<<DB7);   //Lower Nibble  
     aa6:	8f 9a       	sbi	0x11, 7	; 17
	PORTF = PORTF & (~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4));  
     aa8:	81 b3       	in	r24, 0x11	; 17
     aaa:	8f 78       	andi	r24, 0x8F	; 143
     aac:	81 bb       	out	0x11, r24	; 17
	Enable();
     aae:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Enable>
	
	//Display Off //  
	//DB7..DB4 = 0000  
	PORTF = PORTF & (~(1<<DB7) & ~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4)); //Upper Nibble  
     ab2:	81 b3       	in	r24, 0x11	; 17
     ab4:	8f 70       	andi	r24, 0x0F	; 15
     ab6:	81 bb       	out	0x11, r24	; 17
	Enable();
     ab8:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Enable>
	
	//DB7..DB4 = 1000  
	PORTF = PORTF | (1<<DB7);   //Lower Nibble  
     abc:	8f 9a       	sbi	0x11, 7	; 17
	PORTF = PORTF & (~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4));  
     abe:	81 b3       	in	r24, 0x11	; 17
     ac0:	8f 78       	andi	r24, 0x8F	; 143
     ac2:	81 bb       	out	0x11, r24	; 17
	Enable();
     ac4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Enable>
	
	//Clear Display //  
	//DB7..DB4 = 0000  
	PORTF = PORTF & (~(1<<DB7) & ~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4)); //Upper Nibble  
     ac8:	81 b3       	in	r24, 0x11	; 17
     aca:	8f 70       	andi	r24, 0x0F	; 15
     acc:	81 bb       	out	0x11, r24	; 17
	Enable();
     ace:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Enable>
	
	//DB7..DB4 = 0001  
	PORTF = PORTF & (~(1<<DB7) & ~(1<<DB6) & ~(1<<DB5)); //Lower Nibble  
     ad2:	81 b3       	in	r24, 0x11	; 17
     ad4:	8f 71       	andi	r24, 0x1F	; 31
     ad6:	81 bb       	out	0x11, r24	; 17
	PORTF = PORTF | (1<<DB4);  
     ad8:	8c 9a       	sbi	0x11, 4	; 17
	Enable();
     ada:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Enable>
	
	//No Display Shift //  
	//DB7..DB4 = 0000  
	PORTF = PORTF & (~(1<<DB7) & ~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4)); //Upper Nibble  
     ade:	81 b3       	in	r24, 0x11	; 17
     ae0:	8f 70       	andi	r24, 0x0F	; 15
     ae2:	81 bb       	out	0x11, r24	; 17
	Enable();
     ae4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Enable>
	
	//DB7..DB4 = 0011  
	PORTF = PORTF & (~(1<<DB7) & ~(1<<DB6)); //Lower Nibble  
     ae8:	81 b3       	in	r24, 0x11	; 17
     aea:	8f 73       	andi	r24, 0x3F	; 63
     aec:	81 bb       	out	0x11, r24	; 17
	PORTF = PORTF | (1<<DB5) | (1<<DB4);  
     aee:	81 b3       	in	r24, 0x11	; 17
     af0:	80 63       	ori	r24, 0x30	; 48
     af2:	81 bb       	out	0x11, r24	; 17
	Enable();
     af4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Enable>
	
	// Display ON , Cursor ON, Blinken ON //  
	//DB7..DB4 = 0000  
	PORTF = PORTF & (~(1<<DB7) & ~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4)); //Upper Nibble  
     af8:	81 b3       	in	r24, 0x11	; 17
     afa:	8f 70       	andi	r24, 0x0F	; 15
     afc:	81 bb       	out	0x11, r24	; 17
	Enable();
     afe:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Enable>
	
	//DB7..DB4 = 1111  
	PORTF = PORTF | (1<<DB7) | (1<<DB6) | (1<<DB5) | (1<<DB4); //Lower Nibble  
     b02:	81 b3       	in	r24, 0x11	; 17
     b04:	80 6f       	ori	r24, 0xF0	; 240
     b06:	81 bb       	out	0x11, r24	; 17
	Enable(); 
     b08:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Enable>
     b0c:	08 95       	ret

00000b0e <LCD_send>:
// LCD_send(..) sendet 1 Byte im 4-Bit Mode 
// 
////////////////////////////////////////////////////////////////////////////

void LCD_send(char data) 
{  
     b0e:	cf 93       	push	r28
     b10:	c8 2f       	mov	r28, r24
	char temp = data;
	
	PORTB = PORTB | (1<<RS); //SFR vom LCD mit RS auf Daten umschalten      
     b12:	28 9a       	sbi	0x05, 0	; 5
	
	//Upper Nibble senden   
	if (temp & 0b10000000) { PORTF = PORTF | (1<<DB7);}   
     b14:	88 23       	and	r24, r24
     b16:	14 f4       	brge	.+4      	; 0xb1c <LCD_send+0xe>
     b18:	8f 9a       	sbi	0x11, 7	; 17
     b1a:	01 c0       	rjmp	.+2      	; 0xb1e <LCD_send+0x10>
	else { PORTF = PORTF & ~(1<<DB7); }
     b1c:	8f 98       	cbi	0x11, 7	; 17
	
	if (temp & 0b01000000) { PORTF = PORTF | (1<<DB6); }   
     b1e:	c6 ff       	sbrs	r28, 6
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <LCD_send+0x18>
     b22:	8e 9a       	sbi	0x11, 6	; 17
     b24:	01 c0       	rjmp	.+2      	; 0xb28 <LCD_send+0x1a>
	else { PORTF = PORTF & ~(1<<DB6); }
     b26:	8e 98       	cbi	0x11, 6	; 17
	
	if (temp & 0b00100000) { PORTF = PORTF | (1<<DB5); }   
     b28:	c5 ff       	sbrs	r28, 5
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <LCD_send+0x22>
     b2c:	8d 9a       	sbi	0x11, 5	; 17
     b2e:	01 c0       	rjmp	.+2      	; 0xb32 <LCD_send+0x24>
	else { PORTF = PORTF & ~(1<<DB5); }
     b30:	8d 98       	cbi	0x11, 5	; 17
	
	if (temp & 0b00010000) { PORTF = PORTF | (1<<DB4); }   
     b32:	c4 ff       	sbrs	r28, 4
     b34:	02 c0       	rjmp	.+4      	; 0xb3a <LCD_send+0x2c>
     b36:	8c 9a       	sbi	0x11, 4	; 17
     b38:	01 c0       	rjmp	.+2      	; 0xb3c <LCD_send+0x2e>
	else { PORTF = PORTF & ~(1<<DB4); }
     b3a:	8c 98       	cbi	0x11, 4	; 17
	
	Enable();   
     b3c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Enable>
	delay_ms(1);       
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 0e 05 	call	0xa1c	; 0xa1c <delay_ms>
	
	//Lower Nibble senden   
	if (temp & 0b00001000) { PORTF = PORTF | (1<<DB7); }
     b48:	c3 ff       	sbrs	r28, 3
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <LCD_send+0x42>
     b4c:	8f 9a       	sbi	0x11, 7	; 17
     b4e:	01 c0       	rjmp	.+2      	; 0xb52 <LCD_send+0x44>
	else { PORTF = PORTF & ~(1<<DB7); }
     b50:	8f 98       	cbi	0x11, 7	; 17
	
	if (temp & 0b00000100) { PORTF = PORTF | (1<<DB6); }
     b52:	c2 ff       	sbrs	r28, 2
     b54:	02 c0       	rjmp	.+4      	; 0xb5a <LCD_send+0x4c>
     b56:	8e 9a       	sbi	0x11, 6	; 17
     b58:	01 c0       	rjmp	.+2      	; 0xb5c <LCD_send+0x4e>
	else { PORTF = PORTF & ~(1<<DB6); }
     b5a:	8e 98       	cbi	0x11, 6	; 17
	
	if (temp & 0b00000010) { PORTF = PORTF | (1<<DB5); }
     b5c:	c1 ff       	sbrs	r28, 1
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <LCD_send+0x56>
     b60:	8d 9a       	sbi	0x11, 5	; 17
     b62:	01 c0       	rjmp	.+2      	; 0xb66 <LCD_send+0x58>
	else { PORTF = PORTF & ~(1<<DB5); }
     b64:	8d 98       	cbi	0x11, 5	; 17
	
	if (temp & 0b00000001) { PORTF = PORTF | (1<<DB4); }   
     b66:	c0 ff       	sbrs	r28, 0
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <LCD_send+0x60>
     b6a:	8c 9a       	sbi	0x11, 4	; 17
     b6c:	01 c0       	rjmp	.+2      	; 0xb70 <LCD_send+0x62>
	else { PORTF = PORTF & ~(1<<DB4); }
     b6e:	8c 98       	cbi	0x11, 4	; 17
	
	Enable();   
     b70:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Enable>
	delay_ms(1);
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 0e 05 	call	0xa1c	; 0xa1c <delay_ms>
	
}
     b7c:	cf 91       	pop	r28
     b7e:	08 95       	ret

00000b80 <LCD_cmd>:
// LCD_cmd(..) Befehl senden im 4-Bit Mode 
// 
////////////////////////////////////////////////////////////////////////////

void LCD_cmd(char data) 
{  
     b80:	cf 93       	push	r28
     b82:	c8 2f       	mov	r28, r24
	char temp = data;
	
	PORTB = PORTB &~ (1<<RS); //SFR vom LCD mit RS auf Befehle umschalten
     b84:	28 98       	cbi	0x05, 0	; 5
	      
	//Upper Nibble senden   
	if (temp & 0b10000000) { PORTF = PORTF | (1<<DB7); }   
     b86:	88 23       	and	r24, r24
     b88:	14 f4       	brge	.+4      	; 0xb8e <LCD_cmd+0xe>
     b8a:	8f 9a       	sbi	0x11, 7	; 17
     b8c:	01 c0       	rjmp	.+2      	; 0xb90 <LCD_cmd+0x10>
	else { PORTF = PORTF & ~(1<<DB7); }
     b8e:	8f 98       	cbi	0x11, 7	; 17
	
	if (temp & 0b01000000) { PORTF = PORTF | (1<<DB6); }
     b90:	c6 ff       	sbrs	r28, 6
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <LCD_cmd+0x18>
     b94:	8e 9a       	sbi	0x11, 6	; 17
     b96:	01 c0       	rjmp	.+2      	; 0xb9a <LCD_cmd+0x1a>
	else { PORTF = PORTF & ~(1<<DB6); }
     b98:	8e 98       	cbi	0x11, 6	; 17
	
	if (temp & 0b00100000) { PORTF = PORTF | (1<<DB5); }
     b9a:	c5 ff       	sbrs	r28, 5
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <LCD_cmd+0x22>
     b9e:	8d 9a       	sbi	0x11, 5	; 17
     ba0:	01 c0       	rjmp	.+2      	; 0xba4 <LCD_cmd+0x24>
	else { PORTF = PORTF & ~(1<<DB5); }
     ba2:	8d 98       	cbi	0x11, 5	; 17
	
	if (temp & 0b00010000) { PORTF = PORTF | (1<<DB4); }
     ba4:	c4 ff       	sbrs	r28, 4
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <LCD_cmd+0x2c>
     ba8:	8c 9a       	sbi	0x11, 4	; 17
     baa:	01 c0       	rjmp	.+2      	; 0xbae <LCD_cmd+0x2e>
	else { PORTF = PORTF & ~(1<<DB4); }
     bac:	8c 98       	cbi	0x11, 4	; 17
	
	Enable();   
     bae:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Enable>
	delay_ms(1);       
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	0e 94 0e 05 	call	0xa1c	; 0xa1c <delay_ms>
	
	//Lower Nibble senden   
	if (temp & 0b00001000) { PORTF = PORTF | (1<<DB7); }
     bba:	c3 ff       	sbrs	r28, 3
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <LCD_cmd+0x42>
     bbe:	8f 9a       	sbi	0x11, 7	; 17
     bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <LCD_cmd+0x44>
	else { PORTF = PORTF & ~(1<<DB7); }
     bc2:	8f 98       	cbi	0x11, 7	; 17
	
	if (temp & 0b00000100) { PORTF = PORTF | (1<<DB6); }
     bc4:	c2 ff       	sbrs	r28, 2
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <LCD_cmd+0x4c>
     bc8:	8e 9a       	sbi	0x11, 6	; 17
     bca:	01 c0       	rjmp	.+2      	; 0xbce <LCD_cmd+0x4e>
	else { PORTF = PORTF & ~(1<<DB6); }
     bcc:	8e 98       	cbi	0x11, 6	; 17
	
	if (temp & 0b00000010) { PORTF = PORTF | (1<<DB5); }
     bce:	c1 ff       	sbrs	r28, 1
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <LCD_cmd+0x56>
     bd2:	8d 9a       	sbi	0x11, 5	; 17
     bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <LCD_cmd+0x58>
	else { PORTF = PORTF & ~(1<<DB5); }
     bd6:	8d 98       	cbi	0x11, 5	; 17
	
	if (temp & 0b00000001) { PORTF = PORTF | (1<<DB4); }   
     bd8:	c0 ff       	sbrs	r28, 0
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <LCD_cmd+0x60>
     bdc:	8c 9a       	sbi	0x11, 4	; 17
     bde:	01 c0       	rjmp	.+2      	; 0xbe2 <LCD_cmd+0x62>
	else { PORTF = PORTF & ~(1<<DB4); }
     be0:	8c 98       	cbi	0x11, 4	; 17
	
	Enable();   
     be2:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Enable>
	delay_ms(1);
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 0e 05 	call	0xa1c	; 0xa1c <delay_ms>
	
}
     bee:	cf 91       	pop	r28
     bf0:	08 95       	ret

00000bf2 <LCD_string>:
// LCD_string(..) sendet ganzen String im 4-Bit Mode 
// 
//////////////////////////////////////////////////////////////////////////// 

void LCD_string(char *data) 
{      
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	ec 01       	movw	r28, r24
	while (*data != '\0') //bis zum letzten Zeichen            
     bf8:	88 81       	ld	r24, Y
     bfa:	88 23       	and	r24, r24
     bfc:	31 f0       	breq	.+12     	; 0xc0a <LCD_string+0x18>
     bfe:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_send(*data++);
     c00:	0e 94 87 05 	call	0xb0e	; 0xb0e <LCD_send>
// 
//////////////////////////////////////////////////////////////////////////// 

void LCD_string(char *data) 
{      
	while (*data != '\0') //bis zum letzten Zeichen            
     c04:	89 91       	ld	r24, Y+
     c06:	81 11       	cpse	r24, r1
     c08:	fb cf       	rjmp	.-10     	; 0xc00 <LCD_string+0xe>
	{
		LCD_send(*data++);
	} 
} 
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	08 95       	ret

00000c10 <LCD_Display>:

void LCD_Display(void)
{
	LCD_cmd(0x80);   //gehe zu 1. Zeile, 1. Position
     c10:	80 e8       	ldi	r24, 0x80	; 128
     c12:	0e 94 c0 05 	call	0xb80	; 0xb80 <LCD_cmd>
	LCD_string("Akku:");
     c16:	88 e1       	ldi	r24, 0x18	; 24
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <LCD_string>
	/*
	LCD_cmd(0x80);   //gehe zu 1. Zeile, 1. Position
	LCD_string("Drehzahl: ");
	*/
	
	LCD_cmd(0x8f);
     c1e:	8f e8       	ldi	r24, 0x8F	; 143
     c20:	0e 94 c0 05 	call	0xb80	; 0xb80 <LCD_cmd>
	LCD_string("U/m");
     c24:	8e e1       	ldi	r24, 0x1E	; 30
     c26:	91 e0       	ldi	r25, 0x01	; 1
     c28:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <LCD_string>
	/*
	LCD_cmd(0xC0);   //gehe zu 2. Zeile, 1. Position
	LCD_string("Speed:");
	*/
	
	LCD_cmd(0xcf);
     c2c:	8f ec       	ldi	r24, 0xCF	; 207
     c2e:	0e 94 c0 05 	call	0xb80	; 0xb80 <LCD_cmd>
	LCD_string("km/h");
     c32:	82 e2       	ldi	r24, 0x22	; 34
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <LCD_string>
     c3a:	08 95       	ret

00000c3c <init_timer_zeitlicher_ablauf>:

void init_timer_zeitlicher_ablauf(void)
{
	
	
	TCCR3B = TCCR3B | (1<<CS10);		// Teiler 256 (16MHz / 64 = 4µs)
     c3c:	e1 e9       	ldi	r30, 0x91	; 145
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	81 60       	ori	r24, 0x01	; 1
     c44:	80 83       	st	Z, r24
	TCCR3B = TCCR3B | (1<<CS11);		//Kleiner Schritt 4µs		(1*4µs)
     c46:	80 81       	ld	r24, Z
     c48:	82 60       	ori	r24, 0x02	; 2
     c4a:	80 83       	st	Z, r24
	TCCR3B = TCCR3B &~ (1<<CS12);		//Größter Schritt 262ms	(65535*4µs)
     c4c:	80 81       	ld	r24, Z
     c4e:	8b 7f       	andi	r24, 0xFB	; 251
     c50:	80 83       	st	Z, r24
	
	TIMSK3 = TIMSK3 | (1<<OCIE3A);		//OC3A interrupt
     c52:	e1 e7       	ldi	r30, 0x71	; 113
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	82 60       	ori	r24, 0x02	; 2
     c5a:	80 83       	st	Z, r24
	
	OCR3A = 2500;		//25000*4µs = 100ms
     c5c:	84 ec       	ldi	r24, 0xC4	; 196
     c5e:	99 e0       	ldi	r25, 0x09	; 9
     c60:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     c64:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     c68:	08 95       	ret

00000c6a <main>:
uint16_t nen_test;

int main(void)
{
	
	CLKPR = 0x80;						//Clock prescaler 16MHz
     c6a:	e1 e6       	ldi	r30, 0x61	; 97
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 e8       	ldi	r24, 0x80	; 128
     c70:	80 83       	st	Z, r24
	CLKPR = 0x00;
     c72:	10 82       	st	Z, r1

	MCUCR = MCUCR | (1<<JTD);			//JTD Schnittstelle ausschalten für PWM6 Mode
     c74:	85 b7       	in	r24, 0x35	; 53
     c76:	80 68       	ori	r24, 0x80	; 128
     c78:	85 bf       	out	0x35, r24	; 53
	MCUCR = MCUCR | (1<<JTD);
     c7a:	85 b7       	in	r24, 0x35	; 53
     c7c:	80 68       	ori	r24, 0x80	; 128
     c7e:	85 bf       	out	0x35, r24	; 53
	
	//MOTOR PWM PINS
	DDRC = DDRC | (1<<DDC7);	//OC4A -Pin (PC7) als OUTPUT	//PHASE A
     c80:	3f 9a       	sbi	0x07, 7	; 7
	DDRC = DDRC | (1<<DDC6);	//OC4A#-Pin (PC6) als OUTPUT	//PHASE A
     c82:	3e 9a       	sbi	0x07, 6	; 7
	DDRB = DDRB | (1<<DDB6);	//OC4B -Pin (PB6) als OUTPUT	//PHASE B
     c84:	26 9a       	sbi	0x04, 6	; 4
	DDRB = DDRB | (1<<DDB5);	//OC4B#-Pin (PB5) als OUTPUT	//PHASE B
     c86:	25 9a       	sbi	0x04, 5	; 4
	DDRD = DDRD | (1<<DDD7);	//OC4D -Pin (PD7) als OUTPUT	//PHASE C
     c88:	57 9a       	sbi	0x0a, 7	; 10
	DDRD = DDRD | (1<<DDD6);	//OC4D#-Pin (PD6) als OUTPUT	//PHASE C
     c8a:	56 9a       	sbi	0x0a, 6	; 10
	
	//HALL SENSORS PINS
	DDRB = DDRB &~ (1<<DDB1);	//PCINT1-Pin (PB1) als INPUT	//HALL A
     c8c:	21 98       	cbi	0x04, 1	; 4
	DDRB = DDRB &~ (1<<DDB2);	//PCINT2-Pin (PB2) als INPUT	//HALL B
     c8e:	22 98       	cbi	0x04, 2	; 4
	DDRB = DDRB &~ (1<<DDB3);	//PCINT3-Pin (PB3) als INPUT	//HALL C
     c90:	23 98       	cbi	0x04, 3	; 4
	PORTB = PORTB &~ (1<<PORTB1);	//PULL-UP aus
     c92:	29 98       	cbi	0x05, 1	; 5
	PORTB = PORTB &~ (1<<PORTB2);	//PULL-UP aus
     c94:	2a 98       	cbi	0x05, 2	; 5
	PORTB = PORTB &~ (1<<PORTB3);	//PULL-UP aus
     c96:	2b 98       	cbi	0x05, 3	; 5

	//Vorwärts - Rückwärts Schalter
	DDRD = DDRD &~ (1<<DDD0);		//PD0 als INPUT //vorwärts / rückwärts Schalter
     c98:	50 98       	cbi	0x0a, 0	; 10
	PORTD = PORTD | (1<<PORTD0);		//PULL-UP
     c9a:	58 9a       	sbi	0x0b, 0	; 11
		
	DDRB = DDRB &~ (1<<DDB4);	//PB4 als INPUT		//vorwärts / rückwärst Schalter
     c9c:	24 98       	cbi	0x04, 4	; 4
	PORTB = PORTB | (1<<PORTB4);	//PULL-UP
     c9e:	2c 9a       	sbi	0x05, 4	; 5
	
	//Shutdown Pin	
	DDRE = DDRE | (1<<DDE6);	//Shutdown-Pin (PE6) als OUTPUT
     ca0:	6e 9a       	sbi	0x0d, 6	; 13
	PORTE = PORTE &~ (1<<PORTE6);	//Shutdown-Pin auf HIGH -> da er LOW-AKTIVE ist   //muss noch geändert werden!!!!!
     ca2:	76 98       	cbi	0x0e, 6	; 14
	
	//ADC
	DDRF = DDRF &~ (1<<DDF0);	//ADC0-Pin (PF0) als INPUT
     ca4:	80 98       	cbi	0x10, 0	; 16
	
	//LCD - Pins
	DDRB = DDRB | (1<<PORTB0);		//RS (PB0) als OUTPUT
     ca6:	20 9a       	sbi	0x04, 0	; 4
	DDRF = DDRF | (1<<PORTF1);		//Enable (PF1) als OUTPUT
     ca8:	81 9a       	sbi	0x10, 1	; 16
	DDRF = DDRF | (1<<PORTF7);		//LCD-DB7 (PF7 µC) als OUTPUT
     caa:	87 9a       	sbi	0x10, 7	; 16
	DDRF = DDRF | (1<<PORTF6);		//LCD-DB6 (PF6 µC) als OUTPUT
     cac:	86 9a       	sbi	0x10, 6	; 16
	DDRF = DDRF | (1<<PORTF5);		//LCD-DB5 (PF5 µC) als OUTPUT
     cae:	85 9a       	sbi	0x10, 5	; 16
	DDRF = DDRF | (1<<PORTF4);		//LCD-DB4 (PF4 µC) als OUTPUT
     cb0:	84 9a       	sbi	0x10, 4	; 16
	
	//UART
	PORTD = PORTD | (1<<PORTD2);		// pull up um keine störungen einzufangen
     cb2:	5a 9a       	sbi	0x0b, 2	; 11
	
	//Debug-Pins
	DDRD = DDRD | (1<<DDD4);		
     cb4:	54 9a       	sbi	0x0a, 4	; 10
	DDRB = DDRB | (1<<DDB7);
     cb6:	27 9a       	sbi	0x04, 7	; 4
	
	
	Init_Pinchange();	//Initialisierung Hallsensoren
     cb8:	0e 94 05 07 	call	0xe0a	; 0xe0a <Init_Pinchange>
	
	Init_PWM();			//Initialisierung 6-fach PWM signale
     cbc:	0e 94 c4 06 	call	0xd88	; 0xd88 <Init_PWM>
	
	Init_ADC();			//Initialisierung ADC
     cc0:	0e 94 22 07 	call	0xe44	; 0xe44 <Init_ADC>
	
	Init_Timer1();		//Initialisierung Berechnungen Geschw. Drehzahl
     cc4:	0e 94 75 00 	call	0xea	; 0xea <Init_Timer1>
	
	init_usart();				//Initialisierung von Kommunikationsschnittstelle UART
     cc8:	0e 94 00 04 	call	0x800	; 0x800 <init_usart>
	init_transmission_timer();	//Initaliesierung von Timer0 für UART
     ccc:	0e 94 2d 04 	call	0x85a	; 0x85a <init_transmission_timer>
	
	
	init_timer_zeitlicher_ablauf();
     cd0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <init_timer_zeitlicher_ablauf>
	
	
	LCD_init();			//Initialisierung  LCD
     cd4:	0e 94 29 05 	call	0xa52	; 0xa52 <LCD_init>
	LCD_cmd(0x0C);		//Display ON, Cursor OFF, Blinking OFF 
     cd8:	8c e0       	ldi	r24, 0x0C	; 12
     cda:	0e 94 c0 05 	call	0xb80	; 0xb80 <LCD_cmd>
	
	Hallsensoren_abfragen();
     cde:	0e 94 56 07 	call	0xeac	; 0xeac <Hallsensoren_abfragen>
		
	sei();
     ce2:	78 94       	sei
	
	LCD_Display();		//Drezahl, Geschwindkeit schreiben
     ce4:	0e 94 08 06 	call	0xc10	; 0xc10 <LCD_Display>
     ce8:	2f ef       	ldi	r18, 0xFF	; 255
     cea:	87 ea       	ldi	r24, 0xA7	; 167
     cec:	91 e6       	ldi	r25, 0x61	; 97
     cee:	21 50       	subi	r18, 0x01	; 1
     cf0:	80 40       	sbci	r24, 0x00	; 0
     cf2:	90 40       	sbci	r25, 0x00	; 0
     cf4:	e1 f7       	brne	.-8      	; 0xcee <main+0x84>
     cf6:	00 c0       	rjmp	.+0      	; 0xcf8 <main+0x8e>
     cf8:	00 00       	nop
	
	_delay_ms(2000);
	
	
	//Für Anfangsausgabe
	preset_drehzahl_gesch();
     cfa:	0e 94 99 02 	call	0x532	; 0x532 <preset_drehzahl_gesch>
	
	zeitlicher_ablauf=0;
     cfe:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <zeitlicher_ablauf>
	
    while (1) 
    {	
						
		if(zeitlicher_ablauf >= 10)
     d02:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <zeitlicher_ablauf>
     d06:	8a 30       	cpi	r24, 0x0A	; 10
     d08:	e0 f3       	brcs	.-8      	; 0xd02 <main+0x98>
		{
			

			geschwindigkeit_berechnung();
     d0a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <geschwindigkeit_berechnung>
			ladestand_test = akku_ladestand(testen);
     d0e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <testen>
     d12:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <testen+0x1>
     d16:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <akku_ladestand>
     d1a:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <ladestand_test>
			ladestand_ausgabe(ladestand_test);
     d1e:	0e 94 e6 03 	call	0x7cc	; 0x7cc <ladestand_ausgabe>
			
			nen_test = temperatur_uebertragung();
     d22:	0e 94 89 04 	call	0x912	; 0x912 <temperatur_uebertragung>
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <nen_test+0x1>
     d2c:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <nen_test>
			

			//dtostrf((float)drehzahl, 5, 0, ausgabe);
			drehzahl_ausgabe();	
     d30:	0e 94 3b 02 	call	0x476	; 0x476 <drehzahl_ausgabe>
		
			//dtostrf((float)geschwindigkeit, 5, 0, ausgabe);
			geschwindigkeits_ausgabe();
     d34:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <geschwindigkeits_ausgabe>
			
		
			zeitlicher_ablauf=0;
     d38:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <zeitlicher_ablauf>
     d3c:	e2 cf       	rjmp	.-60     	; 0xd02 <main+0x98>

00000d3e <__vector_32>:
	//OCR3AL = 168;
	
}

ISR(TIMER3_COMPA_vect)
{
     d3e:	1f 92       	push	r1
     d40:	0f 92       	push	r0
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	0f 92       	push	r0
     d46:	11 24       	eor	r1, r1
     d48:	8f 93       	push	r24
	TCNT3 = 0;
     d4a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     d4e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
	
	
	if(zeitlicher_ablauf >= 25)
     d52:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <zeitlicher_ablauf>
     d56:	89 31       	cpi	r24, 0x19	; 25
     d58:	10 f0       	brcs	.+4      	; 0xd5e <__vector_32+0x20>
	{
		
		zeitlicher_ablauf=0;
     d5a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <zeitlicher_ablauf>
	}
	
	zeitlicher_ablauf++;
     d5e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <zeitlicher_ablauf>
     d62:	8f 5f       	subi	r24, 0xFF	; 255
     d64:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <zeitlicher_ablauf>
	

}
     d68:	8f 91       	pop	r24
     d6a:	0f 90       	pop	r0
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	0f 90       	pop	r0
     d70:	1f 90       	pop	r1
     d72:	18 95       	reti

00000d74 <__vector_33>:
ISR(TIMER3_COMPB_vect)
{
     d74:	1f 92       	push	r1
     d76:	0f 92       	push	r0
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	0f 92       	push	r0
     d7c:	11 24       	eor	r1, r1
	
}
     d7e:	0f 90       	pop	r0
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	0f 90       	pop	r0
     d84:	1f 90       	pop	r1
     d86:	18 95       	reti

00000d88 <Init_PWM>:

char adc_counter=0;

char hilfe;

void Init_PWM (void){
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
	
	TCCR4B = TCCR4B &~ (1<<CS40);		//CLKT4 Teiler auf 8 gesetzt -> 2MHz
     d8c:	e1 ec       	ldi	r30, 0xC1	; 193
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	8e 7f       	andi	r24, 0xFE	; 254
     d94:	80 83       	st	Z, r24
	TCCR4B = TCCR4B &~ (1<<CS41);
     d96:	80 81       	ld	r24, Z
     d98:	8d 7f       	andi	r24, 0xFD	; 253
     d9a:	80 83       	st	Z, r24
	TCCR4B = TCCR4B | (1<<CS42);
     d9c:	80 81       	ld	r24, Z
     d9e:	84 60       	ori	r24, 0x04	; 4
     da0:	80 83       	st	Z, r24
	TCCR4B = TCCR4B &~ (1<<CS43);
     da2:	80 81       	ld	r24, Z
     da4:	87 7f       	andi	r24, 0xF7	; 247
     da6:	80 83       	st	Z, r24
	
	TCCR4A = TCCR4A | (1<<PWM4A);
     da8:	a0 ec       	ldi	r26, 0xC0	; 192
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	8c 91       	ld	r24, X
     dae:	82 60       	ori	r24, 0x02	; 2
     db0:	8c 93       	st	X, r24
	TCCR4D = TCCR4D &~ (1<<WGM40);		//PWM6 mode Single slope
     db2:	c3 ec       	ldi	r28, 0xC3	; 195
     db4:	d0 e0       	ldi	r29, 0x00	; 0
     db6:	88 81       	ld	r24, Y
     db8:	8e 7f       	andi	r24, 0xFE	; 254
     dba:	88 83       	st	Y, r24
	TCCR4D = TCCR4D | (1<<WGM41);
     dbc:	88 81       	ld	r24, Y
     dbe:	82 60       	ori	r24, 0x02	; 2
     dc0:	88 83       	st	Y, r24
	
	TCCR4A = TCCR4A | (1<<COM4A0);		//OC4A pins belegung wenn PWM6 mode ausgewählt ist
     dc2:	8c 91       	ld	r24, X
     dc4:	80 64       	ori	r24, 0x40	; 64
     dc6:	8c 93       	st	X, r24
	TCCR4A = TCCR4A &~ (1<<COM4A1);
     dc8:	8c 91       	ld	r24, X
     dca:	8f 77       	andi	r24, 0x7F	; 127
     dcc:	8c 93       	st	X, r24
	
	TCCR4A = TCCR4A | (1<<COM4B0);		//Alle 6 Pins freischalten
     dce:	8c 91       	ld	r24, X
     dd0:	80 61       	ori	r24, 0x10	; 16
     dd2:	8c 93       	st	X, r24
	TCCR4A = TCCR4A &~ (1<<COM4B1);
     dd4:	8c 91       	ld	r24, X
     dd6:	8f 7d       	andi	r24, 0xDF	; 223
     dd8:	8c 93       	st	X, r24
	TCCR4C = TCCR4C | (1<<COM4D0);
     dda:	a2 ec       	ldi	r26, 0xC2	; 194
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	8c 91       	ld	r24, X
     de0:	84 60       	ori	r24, 0x04	; 4
     de2:	8c 93       	st	X, r24
	TCCR4C = TCCR4C &~ (1<<COM4D1);
     de4:	8c 91       	ld	r24, X
     de6:	87 7f       	andi	r24, 0xF7	; 247
     de8:	8c 93       	st	X, r24
	
	TCCR4B = TCCR4B &~ (1<<DTPS40);		//Death Time presacler auf 1
     dea:	80 81       	ld	r24, Z
     dec:	8f 7e       	andi	r24, 0xEF	; 239
     dee:	80 83       	st	Z, r24
	TCCR4B = TCCR4B &~ (1<<DTPS41);
     df0:	80 81       	ld	r24, Z
     df2:	8f 7d       	andi	r24, 0xDF	; 223
     df4:	80 83       	st	Z, r24
	
	//TCCR4B = TCCR4B | (1<<PWM4X);		//Inversion mode -> kann die ausgänge invertieren bei 1
	
	//TIMSK4 = TIMSK4 | (OCIE4A);
	
	OCR4C = 255;						//200*500ns = 100µs = 10kHz  //umgeändert auf 255 test zwecke
     df6:	8f ef       	ldi	r24, 0xFF	; 255
     df8:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7e00d1>

	TCCR4E = 0x00;						//Start
     dfc:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	DT4 = 0xff;		//500ns = 0x88;					//Death time
     e00:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7e00d4>
	
}
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	08 95       	ret

00000e0a <Init_Pinchange>:
 void Init_Pinchange( void )
 {
	PCICR =  PCICR | (1<<PCIE0);		//Enable pin change interrupt0 wenn 1 interrupt von den interrupts auslöst (PORTB)
     e0a:	e8 e6       	ldi	r30, 0x68	; 104
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	81 60       	ori	r24, 0x01	; 1
     e12:	80 83       	st	Z, r24
	 
	PCMSK0 = PCMSK0 | (1<<PCINT1);		//Enable pin change interrupt on PB1
     e14:	eb e6       	ldi	r30, 0x6B	; 107
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	82 60       	ori	r24, 0x02	; 2
     e1c:	80 83       	st	Z, r24
	PCMSK0 = PCMSK0 | (1<<PCINT2);		//Enable pin change interrupt on PB2
     e1e:	80 81       	ld	r24, Z
     e20:	84 60       	ori	r24, 0x04	; 4
     e22:	80 83       	st	Z, r24
	PCMSK0 = PCMSK0 | (1<<PCINT3);		//Enable pin change interrupt on PB3
     e24:	80 81       	ld	r24, Z
     e26:	88 60       	ori	r24, 0x08	; 8
     e28:	80 83       	st	Z, r24
	PCMSK0 = PCMSK0 | (1<<PCINT4);		//Enable pin change interrupt on PB4 für Schalter
     e2a:	80 81       	ld	r24, Z
     e2c:	80 61       	ori	r24, 0x10	; 16
     e2e:	80 83       	st	Z, r24

	
	//Externer Interrupt für Umschalter
	EICRA = EICRA | (1<<ISC00);		//Interrupt bei low pegel
     e30:	e9 e6       	ldi	r30, 0x69	; 105
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	81 60       	ori	r24, 0x01	; 1
     e38:	80 83       	st	Z, r24
	EICRA = EICRA &~ (1<<ISC01);
     e3a:	80 81       	ld	r24, Z
     e3c:	8d 7f       	andi	r24, 0xFD	; 253
     e3e:	80 83       	st	Z, r24
	
	EIMSK = EIMSK | (1<<INT0);		//Externer Interrupt 0 freischalten
     e40:	e8 9a       	sbi	0x1d, 0	; 29
     e42:	08 95       	ret

00000e44 <Init_ADC>:
	
 }
 void Init_ADC(void)
 {
	 ADMUX = ADMUX | (1<<REFS0);  //Vref=AVCC
     e44:	ec e7       	ldi	r30, 0x7C	; 124
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	80 64       	ori	r24, 0x40	; 64
     e4c:	80 83       	st	Z, r24
	 ADMUX = ADMUX &~(1<<REFS1);
     e4e:	80 81       	ld	r24, Z
     e50:	8f 77       	andi	r24, 0x7F	; 127
     e52:	80 83       	st	Z, r24
	 
	 ADMUX  = ADMUX | (1<<ADLAR);  //linksbündig
     e54:	80 81       	ld	r24, Z
     e56:	80 62       	ori	r24, 0x20	; 32
     e58:	80 83       	st	Z, r24
	 
	 ADMUX = ADMUX &~ (1<<MUX0);	//single ended measurement
     e5a:	80 81       	ld	r24, Z
     e5c:	8e 7f       	andi	r24, 0xFE	; 254
     e5e:	80 83       	st	Z, r24
	 ADMUX = ADMUX &~ (1<<MUX1);	//auf ADC0 (PF0)
     e60:	80 81       	ld	r24, Z
     e62:	8d 7f       	andi	r24, 0xFD	; 253
     e64:	80 83       	st	Z, r24
	 ADMUX = ADMUX &~ (1<<MUX2);
     e66:	80 81       	ld	r24, Z
     e68:	8b 7f       	andi	r24, 0xFB	; 251
     e6a:	80 83       	st	Z, r24
	 ADMUX = ADMUX &~ (1<<MUX3);
     e6c:	80 81       	ld	r24, Z
     e6e:	87 7f       	andi	r24, 0xF7	; 247
     e70:	80 83       	st	Z, r24
	 ADMUX = ADMUX &~ (1<<MUX4);
     e72:	80 81       	ld	r24, Z
     e74:	8f 7e       	andi	r24, 0xEF	; 239
     e76:	80 83       	st	Z, r24
	 ADCSRB = ADCSRB &~ (1<<MUX5);
     e78:	eb e7       	ldi	r30, 0x7B	; 123
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8f 7d       	andi	r24, 0xDF	; 223
     e80:	80 83       	st	Z, r24
	 
	 ADCSRA = ADCSRA | (1<<ADEN);		//ADC einschalten
     e82:	ea e7       	ldi	r30, 0x7A	; 122
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	80 68       	ori	r24, 0x80	; 128
     e8a:	80 83       	st	Z, r24
	 ADCSRA = ADCSRA | (1<<ADIE);	//ADC Interrupt freischalten
     e8c:	80 81       	ld	r24, Z
     e8e:	88 60       	ori	r24, 0x08	; 8
     e90:	80 83       	st	Z, r24
	 
	 ADCSRA = ADCSRA &~ (1<<ADPS0);	//Prescaler für ADC-Clock
     e92:	80 81       	ld	r24, Z
     e94:	8e 7f       	andi	r24, 0xFE	; 254
     e96:	80 83       	st	Z, r24
	 ADCSRA = ADCSRA | (1<<ADPS1);	//64 Teiler
     e98:	80 81       	ld	r24, Z
     e9a:	82 60       	ori	r24, 0x02	; 2
     e9c:	80 83       	st	Z, r24
	 ADCSRA = ADCSRA | (1<<ADPS2);
     e9e:	80 81       	ld	r24, Z
     ea0:	84 60       	ori	r24, 0x04	; 4
     ea2:	80 83       	st	Z, r24
	 
	 ADCSRA = ADCSRA | (1<<ADSC);	//Wandlung starten
     ea4:	80 81       	ld	r24, Z
     ea6:	80 64       	ori	r24, 0x40	; 64
     ea8:	80 83       	st	Z, r24
     eaa:	08 95       	ret

00000eac <Hallsensoren_abfragen>:
	 
 }
void Hallsensoren_abfragen(void)
{
	stufe = PINB & 0x0e;
     eac:	83 b1       	in	r24, 0x03	; 3
	stufe = stufe/2;		//herunterbrechen von XXX0 -> 0XXXX			z.b. 1110 -> 0111
     eae:	8e 70       	andi	r24, 0x0E	; 14
     eb0:	86 95       	lsr	r24
     eb2:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <stufe>
	
	
	
	if (umschalt_null())		//Drehzahl abfrage
     eb6:	0e 94 aa 02 	call	0x554	; 0x554 <umschalt_null>
     eba:	88 23       	and	r24, r24
     ebc:	49 f0       	breq	.+18     	; 0xed0 <Hallsensoren_abfragen+0x24>
	{
		//Abrage mit Drehzahl noch nötig
		if((PINB & (1<<PINB4)) == 0x00)
     ebe:	1c 99       	sbic	0x03, 4	; 3
     ec0:	04 c0       	rjmp	.+8      	; 0xeca <Hallsensoren_abfragen+0x1e>
		{
			vor = 1;
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <vor>
     ec8:	08 c0       	rjmp	.+16     	; 0xeda <Hallsensoren_abfragen+0x2e>
		}
		else
		{
			vor = 0;
     eca:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <vor>
     ece:	6d c0       	rjmp	.+218    	; 0xfaa <Hallsensoren_abfragen+0xfe>
		}
	}
	
	
	if(vor)		//Schalter AUS(vorwärts)	ACHTUNG: es wird PINB abgefragt nicht sufe (0x10)
     ed0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <vor>
     ed4:	88 23       	and	r24, r24
     ed6:	09 f4       	brne	.+2      	; 0xeda <Hallsensoren_abfragen+0x2e>
     ed8:	68 c0       	rjmp	.+208    	; 0xfaa <Hallsensoren_abfragen+0xfe>
	{
		
		switch(stufe)
     eda:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <stufe>
     ede:	83 30       	cpi	r24, 0x03	; 3
     ee0:	49 f1       	breq	.+82     	; 0xf34 <Hallsensoren_abfragen+0x88>
     ee2:	28 f4       	brcc	.+10     	; 0xeee <Hallsensoren_abfragen+0x42>
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	c1 f0       	breq	.+48     	; 0xf18 <Hallsensoren_abfragen+0x6c>
     ee8:	82 30       	cpi	r24, 0x02	; 2
     eea:	91 f1       	breq	.+100    	; 0xf50 <Hallsensoren_abfragen+0xa4>
     eec:	5b c0       	rjmp	.+182    	; 0xfa4 <Hallsensoren_abfragen+0xf8>
     eee:	85 30       	cpi	r24, 0x05	; 5
     ef0:	29 f0       	breq	.+10     	; 0xefc <Hallsensoren_abfragen+0x50>
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <Hallsensoren_abfragen+0x4a>
     ef4:	49 c0       	rjmp	.+146    	; 0xf88 <Hallsensoren_abfragen+0xdc>
     ef6:	86 30       	cpi	r24, 0x06	; 6
     ef8:	c9 f1       	breq	.+114    	; 0xf6c <Hallsensoren_abfragen+0xc0>
     efa:	54 c0       	rjmp	.+168    	; 0xfa4 <Hallsensoren_abfragen+0xf8>
		{
			case 0x05:				//HALL_A + HALL_C
			{
				TCCR4E = 0x00;
     efc:	e4 ec       	ldi	r30, 0xC4	; 196
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	10 82       	st	Z, r1
				PORTB = PHASE_B_OFF;
     f02:	85 b1       	in	r24, 0x05	; 5
     f04:	8f 79       	andi	r24, 0x9F	; 159
     f06:	85 b9       	out	0x05, r24	; 5
				//PORTD = PHASE_C_GND1;
				//PORTD = PHASE_C_GND2;
				PORTD = PHASE_C_GND;
     f08:	8b b1       	in	r24, 0x0b	; 11
     f0a:	8f 73       	andi	r24, 0x3F	; 63
     f0c:	80 64       	ori	r24, 0x40	; 64
     f0e:	8b b9       	out	0x0b, r24	; 11
				//TCCR4E = TCCR4E | (1<<OC4OE0)|(1<<OC4OE1);
				TCCR4E = PHASE_A_PWM;
     f10:	80 81       	ld	r24, Z
     f12:	83 60       	ori	r24, 0x03	; 3
     f14:	80 83       	st	Z, r24
				break;
     f16:	08 95       	ret
			}
			case 0x01:				//HALL_A
			{
				TCCR4E = 0x00;
     f18:	e4 ec       	ldi	r30, 0xC4	; 196
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	10 82       	st	Z, r1
				PORTC = PHASE_A_OFF;
     f1e:	88 b1       	in	r24, 0x08	; 8
     f20:	8f 73       	andi	r24, 0x3F	; 63
     f22:	88 b9       	out	0x08, r24	; 8
				//PORTD = PHASE_C_GND1;
				//PORTD = PHASE_C_GND2;
				PORTD = PHASE_C_GND;
     f24:	8b b1       	in	r24, 0x0b	; 11
     f26:	8f 73       	andi	r24, 0x3F	; 63
     f28:	80 64       	ori	r24, 0x40	; 64
     f2a:	8b b9       	out	0x0b, r24	; 11
				//TCCR4E = TCCR4E | (1<<OC4OE2) | (1<<OC4OE3);
				TCCR4E = PHASE_B_PWM;
     f2c:	80 81       	ld	r24, Z
     f2e:	8c 60       	ori	r24, 0x0C	; 12
     f30:	80 83       	st	Z, r24
				break;
     f32:	08 95       	ret
			}
			case 0x03:				//HALL_A + HALL_B
			{
				TCCR4E = 0x00;
     f34:	e4 ec       	ldi	r30, 0xC4	; 196
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	10 82       	st	Z, r1
				PORTD = PHASE_C_OFF;
     f3a:	8b b1       	in	r24, 0x0b	; 11
     f3c:	8f 73       	andi	r24, 0x3F	; 63
     f3e:	8b b9       	out	0x0b, r24	; 11
				//PORTC = PHASE_A_GND1;
				//PORTC = PHASE_A_GND2;
				PORTC = PHASE_A_GND;
     f40:	88 b1       	in	r24, 0x08	; 8
     f42:	8f 73       	andi	r24, 0x3F	; 63
     f44:	80 64       	ori	r24, 0x40	; 64
     f46:	88 b9       	out	0x08, r24	; 8
				//TCCR4E = TCCR4E | (1<<OC4OE2) | (1<<OC4OE3);
				TCCR4E = PHASE_B_PWM;
     f48:	80 81       	ld	r24, Z
     f4a:	8c 60       	ori	r24, 0x0C	; 12
     f4c:	80 83       	st	Z, r24
				break;
     f4e:	08 95       	ret
			}
			case 0x02:				//HALL_B
			{
				TCCR4E = 0x00;
     f50:	e4 ec       	ldi	r30, 0xC4	; 196
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	10 82       	st	Z, r1
				PORTB = PHASE_B_OFF;
     f56:	85 b1       	in	r24, 0x05	; 5
     f58:	8f 79       	andi	r24, 0x9F	; 159
     f5a:	85 b9       	out	0x05, r24	; 5
				//PORTC = PHASE_A_GND1;
				//PORTC = PHASE_A_GND2;
				PORTC = PHASE_A_GND;
     f5c:	88 b1       	in	r24, 0x08	; 8
     f5e:	8f 73       	andi	r24, 0x3F	; 63
     f60:	80 64       	ori	r24, 0x40	; 64
     f62:	88 b9       	out	0x08, r24	; 8
				//TCCR4E = TCCR4E | (1<<OC4OE5)|(1<<OC4OE4);
				TCCR4E = PHASE_C_PWM;
     f64:	80 81       	ld	r24, Z
     f66:	80 63       	ori	r24, 0x30	; 48
     f68:	80 83       	st	Z, r24
				break;
     f6a:	08 95       	ret
			}
			case 0x06:			//HALL_B + HALL_C
			{
				TCCR4E = 0x00;
     f6c:	e4 ec       	ldi	r30, 0xC4	; 196
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	10 82       	st	Z, r1
				PORTC = PHASE_A_OFF;
     f72:	88 b1       	in	r24, 0x08	; 8
     f74:	8f 73       	andi	r24, 0x3F	; 63
     f76:	88 b9       	out	0x08, r24	; 8
				//PORTB = PHASE_B_GND1;
				//PORTB = PHASE_B_GND2;
				PORTB = PHASE_B_GND;
     f78:	85 b1       	in	r24, 0x05	; 5
     f7a:	8f 79       	andi	r24, 0x9F	; 159
     f7c:	80 62       	ori	r24, 0x20	; 32
     f7e:	85 b9       	out	0x05, r24	; 5
				//TCCR4E = TCCR4E | (1<<OC4OE5)|(1<<OC4OE4);
				TCCR4E = PHASE_C_PWM;
     f80:	80 81       	ld	r24, Z
     f82:	80 63       	ori	r24, 0x30	; 48
     f84:	80 83       	st	Z, r24
				break;
     f86:	08 95       	ret
			}
			case 0x04:			//HALL_C
			{
				TCCR4E = 0x00;
     f88:	e4 ec       	ldi	r30, 0xC4	; 196
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	10 82       	st	Z, r1
				PORTD = PHASE_C_OFF;
     f8e:	8b b1       	in	r24, 0x0b	; 11
     f90:	8f 73       	andi	r24, 0x3F	; 63
     f92:	8b b9       	out	0x0b, r24	; 11
				//PORTB = PHASE_B_GND1;
				//PORTB = PHASE_B_GND2;
				PORTB = PHASE_B_GND;
     f94:	85 b1       	in	r24, 0x05	; 5
     f96:	8f 79       	andi	r24, 0x9F	; 159
     f98:	80 62       	ori	r24, 0x20	; 32
     f9a:	85 b9       	out	0x05, r24	; 5
				//TCCR4E = TCCR4E | (1<<OC4OE0)|(1<<OC4OE1);
				TCCR4E = PHASE_A_PWM;
     f9c:	80 81       	ld	r24, Z
     f9e:	83 60       	ori	r24, 0x03	; 3
     fa0:	80 83       	st	Z, r24
				break;
     fa2:	08 95       	ret
			}
			default:
			{
				TCCR4E = 0x00;
     fa4:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     fa8:	08 95       	ret
		}	//Klammen Switch
		
	}	//Klemmen if
	else			//Schalter EIN(rückwärts) LOW-AKTIV		ACHTUNG: es wird PINB abgefragt nicht stufe (0x10)
	{
		switch(stufe)
     faa:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <stufe>
     fae:	83 30       	cpi	r24, 0x03	; 3
     fb0:	49 f1       	breq	.+82     	; 0x1004 <Hallsensoren_abfragen+0x158>
     fb2:	28 f4       	brcc	.+10     	; 0xfbe <Hallsensoren_abfragen+0x112>
     fb4:	81 30       	cpi	r24, 0x01	; 1
     fb6:	c1 f0       	breq	.+48     	; 0xfe8 <Hallsensoren_abfragen+0x13c>
     fb8:	82 30       	cpi	r24, 0x02	; 2
     fba:	91 f1       	breq	.+100    	; 0x1020 <Hallsensoren_abfragen+0x174>
     fbc:	5b c0       	rjmp	.+182    	; 0x1074 <Hallsensoren_abfragen+0x1c8>
     fbe:	85 30       	cpi	r24, 0x05	; 5
     fc0:	29 f0       	breq	.+10     	; 0xfcc <Hallsensoren_abfragen+0x120>
     fc2:	08 f4       	brcc	.+2      	; 0xfc6 <Hallsensoren_abfragen+0x11a>
     fc4:	49 c0       	rjmp	.+146    	; 0x1058 <Hallsensoren_abfragen+0x1ac>
     fc6:	86 30       	cpi	r24, 0x06	; 6
     fc8:	c9 f1       	breq	.+114    	; 0x103c <Hallsensoren_abfragen+0x190>
     fca:	54 c0       	rjmp	.+168    	; 0x1074 <Hallsensoren_abfragen+0x1c8>
		{
			case 0x05:			//HALL_A + HALL_C
			{
				TCCR4E = 0x00;
     fcc:	e4 ec       	ldi	r30, 0xC4	; 196
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	10 82       	st	Z, r1
				PORTB = PHASE_B_OFF;
     fd2:	85 b1       	in	r24, 0x05	; 5
     fd4:	8f 79       	andi	r24, 0x9F	; 159
     fd6:	85 b9       	out	0x05, r24	; 5
				//PORTC = PHASE_A_GND1;
				//PORTC = PHASE_A_GND2;
				PORTC = PHASE_A_GND;
     fd8:	88 b1       	in	r24, 0x08	; 8
     fda:	8f 73       	andi	r24, 0x3F	; 63
     fdc:	80 64       	ori	r24, 0x40	; 64
     fde:	88 b9       	out	0x08, r24	; 8
				//TCCR4E = TCCR4E | (1<<OC4OE5)|(1<<OC4OE4);
				TCCR4E = PHASE_C_PWM;
     fe0:	80 81       	ld	r24, Z
     fe2:	80 63       	ori	r24, 0x30	; 48
     fe4:	80 83       	st	Z, r24
				break;
     fe6:	08 95       	ret
			}
			case 0x01:			//HALL_A
			{
				TCCR4E = 0x00;
     fe8:	e4 ec       	ldi	r30, 0xC4	; 196
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	10 82       	st	Z, r1
				PORTC = PHASE_A_OFF;
     fee:	88 b1       	in	r24, 0x08	; 8
     ff0:	8f 73       	andi	r24, 0x3F	; 63
     ff2:	88 b9       	out	0x08, r24	; 8
				//PORTB = PHASE_B_GND1;
				//PORTB = PHASE_B_GND2;
				PORTB = PHASE_B_GND;
     ff4:	85 b1       	in	r24, 0x05	; 5
     ff6:	8f 79       	andi	r24, 0x9F	; 159
     ff8:	80 62       	ori	r24, 0x20	; 32
     ffa:	85 b9       	out	0x05, r24	; 5
				//TCCR4E = TCCR4E | (1<<OC4OE5)|(1<<OC4OE4);
				TCCR4E = PHASE_C_PWM;
     ffc:	80 81       	ld	r24, Z
     ffe:	80 63       	ori	r24, 0x30	; 48
    1000:	80 83       	st	Z, r24
				break;
    1002:	08 95       	ret
			}
			case 0x03:			//HALL_A + HALL_B
			{
				TCCR4E = 0x00;
    1004:	e4 ec       	ldi	r30, 0xC4	; 196
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	10 82       	st	Z, r1
				PORTD = PHASE_C_OFF;
    100a:	8b b1       	in	r24, 0x0b	; 11
    100c:	8f 73       	andi	r24, 0x3F	; 63
    100e:	8b b9       	out	0x0b, r24	; 11
				//PORTB = PHASE_B_GND1;
				//PORTB = PHASE_B_GND2;
				PORTB = PHASE_B_GND;
    1010:	85 b1       	in	r24, 0x05	; 5
    1012:	8f 79       	andi	r24, 0x9F	; 159
    1014:	80 62       	ori	r24, 0x20	; 32
    1016:	85 b9       	out	0x05, r24	; 5
				//TCCR4E = TCCR4E | (1<<OC4OE0)|(1<<OC4OE1);
				TCCR4E = PHASE_A_PWM;
    1018:	80 81       	ld	r24, Z
    101a:	83 60       	ori	r24, 0x03	; 3
    101c:	80 83       	st	Z, r24
				break;
    101e:	08 95       	ret
			}
			case 0x02:			//HALL_B
			{
				TCCR4E = 0x00;
    1020:	e4 ec       	ldi	r30, 0xC4	; 196
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	10 82       	st	Z, r1
				PORTB = PHASE_B_OFF;
    1026:	85 b1       	in	r24, 0x05	; 5
    1028:	8f 79       	andi	r24, 0x9F	; 159
    102a:	85 b9       	out	0x05, r24	; 5
				//PORTD = PHASE_C_GND1;
				//PORTD = PHASE_C_GND2;
				PORTD = PHASE_C_GND;
    102c:	8b b1       	in	r24, 0x0b	; 11
    102e:	8f 73       	andi	r24, 0x3F	; 63
    1030:	80 64       	ori	r24, 0x40	; 64
    1032:	8b b9       	out	0x0b, r24	; 11
				//TCCR4E = TCCR4E | (1<<OC4OE0)|(1<<OC4OE1);
				TCCR4E = PHASE_A_PWM;
    1034:	80 81       	ld	r24, Z
    1036:	83 60       	ori	r24, 0x03	; 3
    1038:	80 83       	st	Z, r24
				break;
    103a:	08 95       	ret
			}
			case 0x06:			//HALL_B + HALL_C
			{
				TCCR4E = 0x00;
    103c:	e4 ec       	ldi	r30, 0xC4	; 196
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	10 82       	st	Z, r1
				PORTC = PHASE_A_OFF;
    1042:	88 b1       	in	r24, 0x08	; 8
    1044:	8f 73       	andi	r24, 0x3F	; 63
    1046:	88 b9       	out	0x08, r24	; 8
				//PORTD = PHASE_C_GND1;
				//PORTD = PHASE_C_GND2;
				PORTD = PHASE_C_GND;
    1048:	8b b1       	in	r24, 0x0b	; 11
    104a:	8f 73       	andi	r24, 0x3F	; 63
    104c:	80 64       	ori	r24, 0x40	; 64
    104e:	8b b9       	out	0x0b, r24	; 11
				//TCCR4E = TCCR4E | (1<<OC4OE2) | (1<<OC4OE3);
				TCCR4E = PHASE_B_PWM;
    1050:	80 81       	ld	r24, Z
    1052:	8c 60       	ori	r24, 0x0C	; 12
    1054:	80 83       	st	Z, r24
				break;
    1056:	08 95       	ret
			}
			case 0x04:			//HALL_C
			{
				TCCR4E = 0x00;
    1058:	e4 ec       	ldi	r30, 0xC4	; 196
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	10 82       	st	Z, r1
				PORTD = PHASE_C_OFF;
    105e:	8b b1       	in	r24, 0x0b	; 11
    1060:	8f 73       	andi	r24, 0x3F	; 63
    1062:	8b b9       	out	0x0b, r24	; 11
				//PORTC = PHASE_A_GND1;
				//PORTC = PHASE_A_GND2;
				PORTC = PHASE_A_GND;
    1064:	88 b1       	in	r24, 0x08	; 8
    1066:	8f 73       	andi	r24, 0x3F	; 63
    1068:	80 64       	ori	r24, 0x40	; 64
    106a:	88 b9       	out	0x08, r24	; 8
				//TCCR4E = TCCR4E | (1<<OC4OE2) | (1<<OC4OE3);
				TCCR4E = PHASE_B_PWM;
    106c:	80 81       	ld	r24, Z
    106e:	8c 60       	ori	r24, 0x0C	; 12
    1070:	80 83       	st	Z, r24
				break;
    1072:	08 95       	ret
			}
			default:
			{
				TCCR4E = 0x00;
    1074:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1078:	08 95       	ret

0000107a <__vector_9>:
	}
}


ISR(PCINT0_vect)
{
    107a:	1f 92       	push	r1
    107c:	0f 92       	push	r0
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	0f 92       	push	r0
    1082:	11 24       	eor	r1, r1
    1084:	2f 93       	push	r18
    1086:	3f 93       	push	r19
    1088:	4f 93       	push	r20
    108a:	5f 93       	push	r21
    108c:	6f 93       	push	r22
    108e:	7f 93       	push	r23
    1090:	8f 93       	push	r24
    1092:	9f 93       	push	r25
    1094:	af 93       	push	r26
    1096:	bf 93       	push	r27
    1098:	ef 93       	push	r30
    109a:	ff 93       	push	r31
	
	Hallsensoren_abfragen();
    109c:	0e 94 56 07 	call	0xeac	; 0xeac <Hallsensoren_abfragen>
	
	geschwindigkeit_auslesen();
    10a0:	0e 94 86 00 	call	0x10c	; 0x10c <geschwindigkeit_auslesen>
	drehzahl_berechnung();
    10a4:	0e 94 93 00 	call	0x126	; 0x126 <drehzahl_berechnung>

	
}	//Klammer Pin change
    10a8:	ff 91       	pop	r31
    10aa:	ef 91       	pop	r30
    10ac:	bf 91       	pop	r27
    10ae:	af 91       	pop	r26
    10b0:	9f 91       	pop	r25
    10b2:	8f 91       	pop	r24
    10b4:	7f 91       	pop	r23
    10b6:	6f 91       	pop	r22
    10b8:	5f 91       	pop	r21
    10ba:	4f 91       	pop	r20
    10bc:	3f 91       	pop	r19
    10be:	2f 91       	pop	r18
    10c0:	0f 90       	pop	r0
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	0f 90       	pop	r0
    10c6:	1f 90       	pop	r1
    10c8:	18 95       	reti

000010ca <__vector_1>:
ISR(INT0_vect)
{
    10ca:	1f 92       	push	r1
    10cc:	0f 92       	push	r0
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	0f 92       	push	r0
    10d2:	11 24       	eor	r1, r1
    10d4:	8f 93       	push	r24
	///		Vorwärts - Rückwärts	 ///
	if((PIND & (1<<PIND0)) == 0x01)		//Schalter AUS(vorwärts)	ACHTUNG: es wird PINB abgefragt nicht sufe (0x10)
    10d6:	48 9b       	sbis	0x09, 0	; 9
    10d8:	04 c0       	rjmp	.+8      	; 0x10e2 <__vector_1+0x18>
	{
			richtung = 1;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <richtung>
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <__vector_1+0x1c>
	}
	else
	{
			richtung = 0;
    10e2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <richtung>
	}

}
    10e6:	8f 91       	pop	r24
    10e8:	0f 90       	pop	r0
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	0f 90       	pop	r0
    10ee:	1f 90       	pop	r1
    10f0:	18 95       	reti

000010f2 <__vector_29>:
ISR(ADC_vect)						//Löst aus, wenn die Konversation beendet ist
{
    10f2:	1f 92       	push	r1
    10f4:	0f 92       	push	r0
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	0f 92       	push	r0
    10fa:	11 24       	eor	r1, r1
    10fc:	2f 93       	push	r18
    10fe:	3f 93       	push	r19
    1100:	4f 93       	push	r20
    1102:	5f 93       	push	r21
    1104:	6f 93       	push	r22
    1106:	7f 93       	push	r23
    1108:	8f 93       	push	r24
    110a:	9f 93       	push	r25
    110c:	af 93       	push	r26
    110e:	bf 93       	push	r27
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	ef 93       	push	r30
    1116:	ff 93       	push	r31

	
	adc_low = ADCL;					//zuerst immer Low Bits holen
    1118:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    111c:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <adc_low>
	adc_high = ADCH;				//dann High Bits holen
    1120:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	if(adc_high >= 250)
    1124:	8a 3f       	cpi	r24, 0xFA	; 250
    1126:	18 f4       	brcc	.+6      	; 0x112e <__vector_29+0x3c>
ISR(ADC_vect)						//Löst aus, wenn die Konversation beendet ist
{

	
	adc_low = ADCL;					//zuerst immer Low Bits holen
	adc_high = ADCH;				//dann High Bits holen
    1128:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <adc_high>
    112c:	03 c0       	rjmp	.+6      	; 0x1134 <__vector_29+0x42>
	if(adc_high >= 250)
	{
		adc_high = 250;
    112e:	8a ef       	ldi	r24, 0xFA	; 250
    1130:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <adc_high>
	}
	
	//OCR4A = adc_high;
	
	
	if (adc_counter >= 20)
    1134:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <adc_counter>
    1138:	84 31       	cpi	r24, 0x14	; 20
    113a:	b0 f0       	brcs	.+44     	; 0x1168 <__vector_29+0x76>
	{
		adc_counter = 0;
    113c:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <adc_counter>
		
		current_adc_wert = OCR4A;
    1140:	cf ec       	ldi	r28, 0xCF	; 207
    1142:	d0 e0       	ldi	r29, 0x00	; 0
    1144:	68 81       	ld	r22, Y
    1146:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <current_adc_wert>
		
		
		
		OCR4A = geschwindigkeits_regulierung(adc_high,current_adc_wert);
    114a:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <adc_high>
    114e:	0e 94 01 03 	call	0x602	; 0x602 <geschwindigkeits_regulierung>
    1152:	88 83       	st	Y, r24
		
		hilfe = OCR4A;
    1154:	88 81       	ld	r24, Y
    1156:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <hilfe>
		
		if (hilfe == 0)
    115a:	81 11       	cpse	r24, r1
    115c:	08 c0       	rjmp	.+16     	; 0x116e <__vector_29+0x7c>
		{
			PORTD = PORTD ^ (1<<PORTD4);
    115e:	9b b1       	in	r25, 0x0b	; 11
    1160:	80 e1       	ldi	r24, 0x10	; 16
    1162:	89 27       	eor	r24, r25
    1164:	8b b9       	out	0x0b, r24	; 11
    1166:	03 c0       	rjmp	.+6      	; 0x116e <__vector_29+0x7c>
		
		
	}
	else
	{
		adc_counter++;
    1168:	8f 5f       	subi	r24, 0xFF	; 255
    116a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <adc_counter>
	}
	
	
	

	ADCSRA = ADCSRA | (1<<ADSC);	//Wandlung starten
    116e:	ea e7       	ldi	r30, 0x7A	; 122
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	80 64       	ori	r24, 0x40	; 64
    1176:	80 83       	st	Z, r24
}
    1178:	ff 91       	pop	r31
    117a:	ef 91       	pop	r30
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	bf 91       	pop	r27
    1182:	af 91       	pop	r26
    1184:	9f 91       	pop	r25
    1186:	8f 91       	pop	r24
    1188:	7f 91       	pop	r23
    118a:	6f 91       	pop	r22
    118c:	5f 91       	pop	r21
    118e:	4f 91       	pop	r20
    1190:	3f 91       	pop	r19
    1192:	2f 91       	pop	r18
    1194:	0f 90       	pop	r0
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	0f 90       	pop	r0
    119a:	1f 90       	pop	r1
    119c:	18 95       	reti

0000119e <__subsf3>:
    119e:	50 58       	subi	r21, 0x80	; 128

000011a0 <__addsf3>:
    11a0:	bb 27       	eor	r27, r27
    11a2:	aa 27       	eor	r26, r26
    11a4:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__addsf3x>
    11a8:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__fp_round>
    11ac:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__fp_pscA>
    11b0:	38 f0       	brcs	.+14     	; 0x11c0 <__addsf3+0x20>
    11b2:	0e 94 93 0a 	call	0x1526	; 0x1526 <__fp_pscB>
    11b6:	20 f0       	brcs	.+8      	; 0x11c0 <__addsf3+0x20>
    11b8:	39 f4       	brne	.+14     	; 0x11c8 <__addsf3+0x28>
    11ba:	9f 3f       	cpi	r25, 0xFF	; 255
    11bc:	19 f4       	brne	.+6      	; 0x11c4 <__addsf3+0x24>
    11be:	26 f4       	brtc	.+8      	; 0x11c8 <__addsf3+0x28>
    11c0:	0c 94 89 0a 	jmp	0x1512	; 0x1512 <__fp_nan>
    11c4:	0e f4       	brtc	.+2      	; 0x11c8 <__addsf3+0x28>
    11c6:	e0 95       	com	r30
    11c8:	e7 fb       	bst	r30, 7
    11ca:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__fp_inf>

000011ce <__addsf3x>:
    11ce:	e9 2f       	mov	r30, r25
    11d0:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fp_split3>
    11d4:	58 f3       	brcs	.-42     	; 0x11ac <__addsf3+0xc>
    11d6:	ba 17       	cp	r27, r26
    11d8:	62 07       	cpc	r22, r18
    11da:	73 07       	cpc	r23, r19
    11dc:	84 07       	cpc	r24, r20
    11de:	95 07       	cpc	r25, r21
    11e0:	20 f0       	brcs	.+8      	; 0x11ea <__addsf3x+0x1c>
    11e2:	79 f4       	brne	.+30     	; 0x1202 <__addsf3x+0x34>
    11e4:	a6 f5       	brtc	.+104    	; 0x124e <__addsf3x+0x80>
    11e6:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <__fp_zero>
    11ea:	0e f4       	brtc	.+2      	; 0x11ee <__addsf3x+0x20>
    11ec:	e0 95       	com	r30
    11ee:	0b 2e       	mov	r0, r27
    11f0:	ba 2f       	mov	r27, r26
    11f2:	a0 2d       	mov	r26, r0
    11f4:	0b 01       	movw	r0, r22
    11f6:	b9 01       	movw	r22, r18
    11f8:	90 01       	movw	r18, r0
    11fa:	0c 01       	movw	r0, r24
    11fc:	ca 01       	movw	r24, r20
    11fe:	a0 01       	movw	r20, r0
    1200:	11 24       	eor	r1, r1
    1202:	ff 27       	eor	r31, r31
    1204:	59 1b       	sub	r21, r25
    1206:	99 f0       	breq	.+38     	; 0x122e <__addsf3x+0x60>
    1208:	59 3f       	cpi	r21, 0xF9	; 249
    120a:	50 f4       	brcc	.+20     	; 0x1220 <__addsf3x+0x52>
    120c:	50 3e       	cpi	r21, 0xE0	; 224
    120e:	68 f1       	brcs	.+90     	; 0x126a <__addsf3x+0x9c>
    1210:	1a 16       	cp	r1, r26
    1212:	f0 40       	sbci	r31, 0x00	; 0
    1214:	a2 2f       	mov	r26, r18
    1216:	23 2f       	mov	r18, r19
    1218:	34 2f       	mov	r19, r20
    121a:	44 27       	eor	r20, r20
    121c:	58 5f       	subi	r21, 0xF8	; 248
    121e:	f3 cf       	rjmp	.-26     	; 0x1206 <__addsf3x+0x38>
    1220:	46 95       	lsr	r20
    1222:	37 95       	ror	r19
    1224:	27 95       	ror	r18
    1226:	a7 95       	ror	r26
    1228:	f0 40       	sbci	r31, 0x00	; 0
    122a:	53 95       	inc	r21
    122c:	c9 f7       	brne	.-14     	; 0x1220 <__addsf3x+0x52>
    122e:	7e f4       	brtc	.+30     	; 0x124e <__addsf3x+0x80>
    1230:	1f 16       	cp	r1, r31
    1232:	ba 0b       	sbc	r27, r26
    1234:	62 0b       	sbc	r22, r18
    1236:	73 0b       	sbc	r23, r19
    1238:	84 0b       	sbc	r24, r20
    123a:	ba f0       	brmi	.+46     	; 0x126a <__addsf3x+0x9c>
    123c:	91 50       	subi	r25, 0x01	; 1
    123e:	a1 f0       	breq	.+40     	; 0x1268 <__addsf3x+0x9a>
    1240:	ff 0f       	add	r31, r31
    1242:	bb 1f       	adc	r27, r27
    1244:	66 1f       	adc	r22, r22
    1246:	77 1f       	adc	r23, r23
    1248:	88 1f       	adc	r24, r24
    124a:	c2 f7       	brpl	.-16     	; 0x123c <__addsf3x+0x6e>
    124c:	0e c0       	rjmp	.+28     	; 0x126a <__addsf3x+0x9c>
    124e:	ba 0f       	add	r27, r26
    1250:	62 1f       	adc	r22, r18
    1252:	73 1f       	adc	r23, r19
    1254:	84 1f       	adc	r24, r20
    1256:	48 f4       	brcc	.+18     	; 0x126a <__addsf3x+0x9c>
    1258:	87 95       	ror	r24
    125a:	77 95       	ror	r23
    125c:	67 95       	ror	r22
    125e:	b7 95       	ror	r27
    1260:	f7 95       	ror	r31
    1262:	9e 3f       	cpi	r25, 0xFE	; 254
    1264:	08 f0       	brcs	.+2      	; 0x1268 <__addsf3x+0x9a>
    1266:	b0 cf       	rjmp	.-160    	; 0x11c8 <__addsf3+0x28>
    1268:	93 95       	inc	r25
    126a:	88 0f       	add	r24, r24
    126c:	08 f0       	brcs	.+2      	; 0x1270 <__addsf3x+0xa2>
    126e:	99 27       	eor	r25, r25
    1270:	ee 0f       	add	r30, r30
    1272:	97 95       	ror	r25
    1274:	87 95       	ror	r24
    1276:	08 95       	ret

00001278 <ceil>:
    1278:	0e 94 cd 0a 	call	0x159a	; 0x159a <__fp_trunc>
    127c:	90 f0       	brcs	.+36     	; 0x12a2 <ceil+0x2a>
    127e:	9f 37       	cpi	r25, 0x7F	; 127
    1280:	48 f4       	brcc	.+18     	; 0x1294 <ceil+0x1c>
    1282:	91 11       	cpse	r25, r1
    1284:	16 f4       	brtc	.+4      	; 0x128a <ceil+0x12>
    1286:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__fp_szero>
    128a:	60 e0       	ldi	r22, 0x00	; 0
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	80 e8       	ldi	r24, 0x80	; 128
    1290:	9f e3       	ldi	r25, 0x3F	; 63
    1292:	08 95       	ret
    1294:	26 f0       	brts	.+8      	; 0x129e <ceil+0x26>
    1296:	1b 16       	cp	r1, r27
    1298:	61 1d       	adc	r22, r1
    129a:	71 1d       	adc	r23, r1
    129c:	81 1d       	adc	r24, r1
    129e:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__fp_mintl>
    12a2:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__fp_mpack>

000012a6 <__cmpsf2>:
    12a6:	0e 94 36 0a 	call	0x146c	; 0x146c <__fp_cmp>
    12aa:	08 f4       	brcc	.+2      	; 0x12ae <__cmpsf2+0x8>
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	08 95       	ret

000012b0 <__divsf3>:
    12b0:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__divsf3x>
    12b4:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__fp_round>
    12b8:	0e 94 93 0a 	call	0x1526	; 0x1526 <__fp_pscB>
    12bc:	58 f0       	brcs	.+22     	; 0x12d4 <__divsf3+0x24>
    12be:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__fp_pscA>
    12c2:	40 f0       	brcs	.+16     	; 0x12d4 <__divsf3+0x24>
    12c4:	29 f4       	brne	.+10     	; 0x12d0 <__divsf3+0x20>
    12c6:	5f 3f       	cpi	r21, 0xFF	; 255
    12c8:	29 f0       	breq	.+10     	; 0x12d4 <__divsf3+0x24>
    12ca:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__fp_inf>
    12ce:	51 11       	cpse	r21, r1
    12d0:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__fp_szero>
    12d4:	0c 94 89 0a 	jmp	0x1512	; 0x1512 <__fp_nan>

000012d8 <__divsf3x>:
    12d8:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fp_split3>
    12dc:	68 f3       	brcs	.-38     	; 0x12b8 <__divsf3+0x8>

000012de <__divsf3_pse>:
    12de:	99 23       	and	r25, r25
    12e0:	b1 f3       	breq	.-20     	; 0x12ce <__divsf3+0x1e>
    12e2:	55 23       	and	r21, r21
    12e4:	91 f3       	breq	.-28     	; 0x12ca <__divsf3+0x1a>
    12e6:	95 1b       	sub	r25, r21
    12e8:	55 0b       	sbc	r21, r21
    12ea:	bb 27       	eor	r27, r27
    12ec:	aa 27       	eor	r26, r26
    12ee:	62 17       	cp	r22, r18
    12f0:	73 07       	cpc	r23, r19
    12f2:	84 07       	cpc	r24, r20
    12f4:	38 f0       	brcs	.+14     	; 0x1304 <__divsf3_pse+0x26>
    12f6:	9f 5f       	subi	r25, 0xFF	; 255
    12f8:	5f 4f       	sbci	r21, 0xFF	; 255
    12fa:	22 0f       	add	r18, r18
    12fc:	33 1f       	adc	r19, r19
    12fe:	44 1f       	adc	r20, r20
    1300:	aa 1f       	adc	r26, r26
    1302:	a9 f3       	breq	.-22     	; 0x12ee <__divsf3_pse+0x10>
    1304:	35 d0       	rcall	.+106    	; 0x1370 <__divsf3_pse+0x92>
    1306:	0e 2e       	mov	r0, r30
    1308:	3a f0       	brmi	.+14     	; 0x1318 <__divsf3_pse+0x3a>
    130a:	e0 e8       	ldi	r30, 0x80	; 128
    130c:	32 d0       	rcall	.+100    	; 0x1372 <__divsf3_pse+0x94>
    130e:	91 50       	subi	r25, 0x01	; 1
    1310:	50 40       	sbci	r21, 0x00	; 0
    1312:	e6 95       	lsr	r30
    1314:	00 1c       	adc	r0, r0
    1316:	ca f7       	brpl	.-14     	; 0x130a <__divsf3_pse+0x2c>
    1318:	2b d0       	rcall	.+86     	; 0x1370 <__divsf3_pse+0x92>
    131a:	fe 2f       	mov	r31, r30
    131c:	29 d0       	rcall	.+82     	; 0x1370 <__divsf3_pse+0x92>
    131e:	66 0f       	add	r22, r22
    1320:	77 1f       	adc	r23, r23
    1322:	88 1f       	adc	r24, r24
    1324:	bb 1f       	adc	r27, r27
    1326:	26 17       	cp	r18, r22
    1328:	37 07       	cpc	r19, r23
    132a:	48 07       	cpc	r20, r24
    132c:	ab 07       	cpc	r26, r27
    132e:	b0 e8       	ldi	r27, 0x80	; 128
    1330:	09 f0       	breq	.+2      	; 0x1334 <__divsf3_pse+0x56>
    1332:	bb 0b       	sbc	r27, r27
    1334:	80 2d       	mov	r24, r0
    1336:	bf 01       	movw	r22, r30
    1338:	ff 27       	eor	r31, r31
    133a:	93 58       	subi	r25, 0x83	; 131
    133c:	5f 4f       	sbci	r21, 0xFF	; 255
    133e:	3a f0       	brmi	.+14     	; 0x134e <__divsf3_pse+0x70>
    1340:	9e 3f       	cpi	r25, 0xFE	; 254
    1342:	51 05       	cpc	r21, r1
    1344:	78 f0       	brcs	.+30     	; 0x1364 <__divsf3_pse+0x86>
    1346:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__fp_inf>
    134a:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__fp_szero>
    134e:	5f 3f       	cpi	r21, 0xFF	; 255
    1350:	e4 f3       	brlt	.-8      	; 0x134a <__divsf3_pse+0x6c>
    1352:	98 3e       	cpi	r25, 0xE8	; 232
    1354:	d4 f3       	brlt	.-12     	; 0x134a <__divsf3_pse+0x6c>
    1356:	86 95       	lsr	r24
    1358:	77 95       	ror	r23
    135a:	67 95       	ror	r22
    135c:	b7 95       	ror	r27
    135e:	f7 95       	ror	r31
    1360:	9f 5f       	subi	r25, 0xFF	; 255
    1362:	c9 f7       	brne	.-14     	; 0x1356 <__divsf3_pse+0x78>
    1364:	88 0f       	add	r24, r24
    1366:	91 1d       	adc	r25, r1
    1368:	96 95       	lsr	r25
    136a:	87 95       	ror	r24
    136c:	97 f9       	bld	r25, 7
    136e:	08 95       	ret
    1370:	e1 e0       	ldi	r30, 0x01	; 1
    1372:	66 0f       	add	r22, r22
    1374:	77 1f       	adc	r23, r23
    1376:	88 1f       	adc	r24, r24
    1378:	bb 1f       	adc	r27, r27
    137a:	62 17       	cp	r22, r18
    137c:	73 07       	cpc	r23, r19
    137e:	84 07       	cpc	r24, r20
    1380:	ba 07       	cpc	r27, r26
    1382:	20 f0       	brcs	.+8      	; 0x138c <__divsf3_pse+0xae>
    1384:	62 1b       	sub	r22, r18
    1386:	73 0b       	sbc	r23, r19
    1388:	84 0b       	sbc	r24, r20
    138a:	ba 0b       	sbc	r27, r26
    138c:	ee 1f       	adc	r30, r30
    138e:	88 f7       	brcc	.-30     	; 0x1372 <__divsf3_pse+0x94>
    1390:	e0 95       	com	r30
    1392:	08 95       	ret

00001394 <__fixunssfsi>:
    1394:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__fp_splitA>
    1398:	88 f0       	brcs	.+34     	; 0x13bc <__fixunssfsi+0x28>
    139a:	9f 57       	subi	r25, 0x7F	; 127
    139c:	98 f0       	brcs	.+38     	; 0x13c4 <__fixunssfsi+0x30>
    139e:	b9 2f       	mov	r27, r25
    13a0:	99 27       	eor	r25, r25
    13a2:	b7 51       	subi	r27, 0x17	; 23
    13a4:	b0 f0       	brcs	.+44     	; 0x13d2 <__fixunssfsi+0x3e>
    13a6:	e1 f0       	breq	.+56     	; 0x13e0 <__fixunssfsi+0x4c>
    13a8:	66 0f       	add	r22, r22
    13aa:	77 1f       	adc	r23, r23
    13ac:	88 1f       	adc	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	1a f0       	brmi	.+6      	; 0x13b8 <__fixunssfsi+0x24>
    13b2:	ba 95       	dec	r27
    13b4:	c9 f7       	brne	.-14     	; 0x13a8 <__fixunssfsi+0x14>
    13b6:	14 c0       	rjmp	.+40     	; 0x13e0 <__fixunssfsi+0x4c>
    13b8:	b1 30       	cpi	r27, 0x01	; 1
    13ba:	91 f0       	breq	.+36     	; 0x13e0 <__fixunssfsi+0x4c>
    13bc:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__fp_zero>
    13c0:	b1 e0       	ldi	r27, 0x01	; 1
    13c2:	08 95       	ret
    13c4:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <__fp_zero>
    13c8:	67 2f       	mov	r22, r23
    13ca:	78 2f       	mov	r23, r24
    13cc:	88 27       	eor	r24, r24
    13ce:	b8 5f       	subi	r27, 0xF8	; 248
    13d0:	39 f0       	breq	.+14     	; 0x13e0 <__fixunssfsi+0x4c>
    13d2:	b9 3f       	cpi	r27, 0xF9	; 249
    13d4:	cc f3       	brlt	.-14     	; 0x13c8 <__fixunssfsi+0x34>
    13d6:	86 95       	lsr	r24
    13d8:	77 95       	ror	r23
    13da:	67 95       	ror	r22
    13dc:	b3 95       	inc	r27
    13de:	d9 f7       	brne	.-10     	; 0x13d6 <__fixunssfsi+0x42>
    13e0:	3e f4       	brtc	.+14     	; 0x13f0 <__fixunssfsi+0x5c>
    13e2:	90 95       	com	r25
    13e4:	80 95       	com	r24
    13e6:	70 95       	com	r23
    13e8:	61 95       	neg	r22
    13ea:	7f 4f       	sbci	r23, 0xFF	; 255
    13ec:	8f 4f       	sbci	r24, 0xFF	; 255
    13ee:	9f 4f       	sbci	r25, 0xFF	; 255
    13f0:	08 95       	ret

000013f2 <__floatunsisf>:
    13f2:	e8 94       	clt
    13f4:	09 c0       	rjmp	.+18     	; 0x1408 <__floatsisf+0x12>

000013f6 <__floatsisf>:
    13f6:	97 fb       	bst	r25, 7
    13f8:	3e f4       	brtc	.+14     	; 0x1408 <__floatsisf+0x12>
    13fa:	90 95       	com	r25
    13fc:	80 95       	com	r24
    13fe:	70 95       	com	r23
    1400:	61 95       	neg	r22
    1402:	7f 4f       	sbci	r23, 0xFF	; 255
    1404:	8f 4f       	sbci	r24, 0xFF	; 255
    1406:	9f 4f       	sbci	r25, 0xFF	; 255
    1408:	99 23       	and	r25, r25
    140a:	a9 f0       	breq	.+42     	; 0x1436 <__floatsisf+0x40>
    140c:	f9 2f       	mov	r31, r25
    140e:	96 e9       	ldi	r25, 0x96	; 150
    1410:	bb 27       	eor	r27, r27
    1412:	93 95       	inc	r25
    1414:	f6 95       	lsr	r31
    1416:	87 95       	ror	r24
    1418:	77 95       	ror	r23
    141a:	67 95       	ror	r22
    141c:	b7 95       	ror	r27
    141e:	f1 11       	cpse	r31, r1
    1420:	f8 cf       	rjmp	.-16     	; 0x1412 <__floatsisf+0x1c>
    1422:	fa f4       	brpl	.+62     	; 0x1462 <__floatsisf+0x6c>
    1424:	bb 0f       	add	r27, r27
    1426:	11 f4       	brne	.+4      	; 0x142c <__floatsisf+0x36>
    1428:	60 ff       	sbrs	r22, 0
    142a:	1b c0       	rjmp	.+54     	; 0x1462 <__floatsisf+0x6c>
    142c:	6f 5f       	subi	r22, 0xFF	; 255
    142e:	7f 4f       	sbci	r23, 0xFF	; 255
    1430:	8f 4f       	sbci	r24, 0xFF	; 255
    1432:	9f 4f       	sbci	r25, 0xFF	; 255
    1434:	16 c0       	rjmp	.+44     	; 0x1462 <__floatsisf+0x6c>
    1436:	88 23       	and	r24, r24
    1438:	11 f0       	breq	.+4      	; 0x143e <__floatsisf+0x48>
    143a:	96 e9       	ldi	r25, 0x96	; 150
    143c:	11 c0       	rjmp	.+34     	; 0x1460 <__floatsisf+0x6a>
    143e:	77 23       	and	r23, r23
    1440:	21 f0       	breq	.+8      	; 0x144a <__floatsisf+0x54>
    1442:	9e e8       	ldi	r25, 0x8E	; 142
    1444:	87 2f       	mov	r24, r23
    1446:	76 2f       	mov	r23, r22
    1448:	05 c0       	rjmp	.+10     	; 0x1454 <__floatsisf+0x5e>
    144a:	66 23       	and	r22, r22
    144c:	71 f0       	breq	.+28     	; 0x146a <__floatsisf+0x74>
    144e:	96 e8       	ldi	r25, 0x86	; 134
    1450:	86 2f       	mov	r24, r22
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	60 e0       	ldi	r22, 0x00	; 0
    1456:	2a f0       	brmi	.+10     	; 0x1462 <__floatsisf+0x6c>
    1458:	9a 95       	dec	r25
    145a:	66 0f       	add	r22, r22
    145c:	77 1f       	adc	r23, r23
    145e:	88 1f       	adc	r24, r24
    1460:	da f7       	brpl	.-10     	; 0x1458 <__floatsisf+0x62>
    1462:	88 0f       	add	r24, r24
    1464:	96 95       	lsr	r25
    1466:	87 95       	ror	r24
    1468:	97 f9       	bld	r25, 7
    146a:	08 95       	ret

0000146c <__fp_cmp>:
    146c:	99 0f       	add	r25, r25
    146e:	00 08       	sbc	r0, r0
    1470:	55 0f       	add	r21, r21
    1472:	aa 0b       	sbc	r26, r26
    1474:	e0 e8       	ldi	r30, 0x80	; 128
    1476:	fe ef       	ldi	r31, 0xFE	; 254
    1478:	16 16       	cp	r1, r22
    147a:	17 06       	cpc	r1, r23
    147c:	e8 07       	cpc	r30, r24
    147e:	f9 07       	cpc	r31, r25
    1480:	c0 f0       	brcs	.+48     	; 0x14b2 <__fp_cmp+0x46>
    1482:	12 16       	cp	r1, r18
    1484:	13 06       	cpc	r1, r19
    1486:	e4 07       	cpc	r30, r20
    1488:	f5 07       	cpc	r31, r21
    148a:	98 f0       	brcs	.+38     	; 0x14b2 <__fp_cmp+0x46>
    148c:	62 1b       	sub	r22, r18
    148e:	73 0b       	sbc	r23, r19
    1490:	84 0b       	sbc	r24, r20
    1492:	95 0b       	sbc	r25, r21
    1494:	39 f4       	brne	.+14     	; 0x14a4 <__fp_cmp+0x38>
    1496:	0a 26       	eor	r0, r26
    1498:	61 f0       	breq	.+24     	; 0x14b2 <__fp_cmp+0x46>
    149a:	23 2b       	or	r18, r19
    149c:	24 2b       	or	r18, r20
    149e:	25 2b       	or	r18, r21
    14a0:	21 f4       	brne	.+8      	; 0x14aa <__fp_cmp+0x3e>
    14a2:	08 95       	ret
    14a4:	0a 26       	eor	r0, r26
    14a6:	09 f4       	brne	.+2      	; 0x14aa <__fp_cmp+0x3e>
    14a8:	a1 40       	sbci	r26, 0x01	; 1
    14aa:	a6 95       	lsr	r26
    14ac:	8f ef       	ldi	r24, 0xFF	; 255
    14ae:	81 1d       	adc	r24, r1
    14b0:	81 1d       	adc	r24, r1
    14b2:	08 95       	ret

000014b4 <__fp_inf>:
    14b4:	97 f9       	bld	r25, 7
    14b6:	9f 67       	ori	r25, 0x7F	; 127
    14b8:	80 e8       	ldi	r24, 0x80	; 128
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	60 e0       	ldi	r22, 0x00	; 0
    14be:	08 95       	ret

000014c0 <__fp_mintl>:
    14c0:	88 23       	and	r24, r24
    14c2:	71 f4       	brne	.+28     	; 0x14e0 <__fp_mintl+0x20>
    14c4:	77 23       	and	r23, r23
    14c6:	21 f0       	breq	.+8      	; 0x14d0 <__fp_mintl+0x10>
    14c8:	98 50       	subi	r25, 0x08	; 8
    14ca:	87 2b       	or	r24, r23
    14cc:	76 2f       	mov	r23, r22
    14ce:	07 c0       	rjmp	.+14     	; 0x14de <__fp_mintl+0x1e>
    14d0:	66 23       	and	r22, r22
    14d2:	11 f4       	brne	.+4      	; 0x14d8 <__fp_mintl+0x18>
    14d4:	99 27       	eor	r25, r25
    14d6:	0d c0       	rjmp	.+26     	; 0x14f2 <__fp_mintl+0x32>
    14d8:	90 51       	subi	r25, 0x10	; 16
    14da:	86 2b       	or	r24, r22
    14dc:	70 e0       	ldi	r23, 0x00	; 0
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	2a f0       	brmi	.+10     	; 0x14ec <__fp_mintl+0x2c>
    14e2:	9a 95       	dec	r25
    14e4:	66 0f       	add	r22, r22
    14e6:	77 1f       	adc	r23, r23
    14e8:	88 1f       	adc	r24, r24
    14ea:	da f7       	brpl	.-10     	; 0x14e2 <__fp_mintl+0x22>
    14ec:	88 0f       	add	r24, r24
    14ee:	96 95       	lsr	r25
    14f0:	87 95       	ror	r24
    14f2:	97 f9       	bld	r25, 7
    14f4:	08 95       	ret

000014f6 <__fp_mpack>:
    14f6:	9f 3f       	cpi	r25, 0xFF	; 255
    14f8:	31 f0       	breq	.+12     	; 0x1506 <__fp_mpack_finite+0xc>

000014fa <__fp_mpack_finite>:
    14fa:	91 50       	subi	r25, 0x01	; 1
    14fc:	20 f4       	brcc	.+8      	; 0x1506 <__fp_mpack_finite+0xc>
    14fe:	87 95       	ror	r24
    1500:	77 95       	ror	r23
    1502:	67 95       	ror	r22
    1504:	b7 95       	ror	r27
    1506:	88 0f       	add	r24, r24
    1508:	91 1d       	adc	r25, r1
    150a:	96 95       	lsr	r25
    150c:	87 95       	ror	r24
    150e:	97 f9       	bld	r25, 7
    1510:	08 95       	ret

00001512 <__fp_nan>:
    1512:	9f ef       	ldi	r25, 0xFF	; 255
    1514:	80 ec       	ldi	r24, 0xC0	; 192
    1516:	08 95       	ret

00001518 <__fp_pscA>:
    1518:	00 24       	eor	r0, r0
    151a:	0a 94       	dec	r0
    151c:	16 16       	cp	r1, r22
    151e:	17 06       	cpc	r1, r23
    1520:	18 06       	cpc	r1, r24
    1522:	09 06       	cpc	r0, r25
    1524:	08 95       	ret

00001526 <__fp_pscB>:
    1526:	00 24       	eor	r0, r0
    1528:	0a 94       	dec	r0
    152a:	12 16       	cp	r1, r18
    152c:	13 06       	cpc	r1, r19
    152e:	14 06       	cpc	r1, r20
    1530:	05 06       	cpc	r0, r21
    1532:	08 95       	ret

00001534 <__fp_round>:
    1534:	09 2e       	mov	r0, r25
    1536:	03 94       	inc	r0
    1538:	00 0c       	add	r0, r0
    153a:	11 f4       	brne	.+4      	; 0x1540 <__fp_round+0xc>
    153c:	88 23       	and	r24, r24
    153e:	52 f0       	brmi	.+20     	; 0x1554 <__fp_round+0x20>
    1540:	bb 0f       	add	r27, r27
    1542:	40 f4       	brcc	.+16     	; 0x1554 <__fp_round+0x20>
    1544:	bf 2b       	or	r27, r31
    1546:	11 f4       	brne	.+4      	; 0x154c <__fp_round+0x18>
    1548:	60 ff       	sbrs	r22, 0
    154a:	04 c0       	rjmp	.+8      	; 0x1554 <__fp_round+0x20>
    154c:	6f 5f       	subi	r22, 0xFF	; 255
    154e:	7f 4f       	sbci	r23, 0xFF	; 255
    1550:	8f 4f       	sbci	r24, 0xFF	; 255
    1552:	9f 4f       	sbci	r25, 0xFF	; 255
    1554:	08 95       	ret

00001556 <__fp_split3>:
    1556:	57 fd       	sbrc	r21, 7
    1558:	90 58       	subi	r25, 0x80	; 128
    155a:	44 0f       	add	r20, r20
    155c:	55 1f       	adc	r21, r21
    155e:	59 f0       	breq	.+22     	; 0x1576 <__fp_splitA+0x10>
    1560:	5f 3f       	cpi	r21, 0xFF	; 255
    1562:	71 f0       	breq	.+28     	; 0x1580 <__fp_splitA+0x1a>
    1564:	47 95       	ror	r20

00001566 <__fp_splitA>:
    1566:	88 0f       	add	r24, r24
    1568:	97 fb       	bst	r25, 7
    156a:	99 1f       	adc	r25, r25
    156c:	61 f0       	breq	.+24     	; 0x1586 <__fp_splitA+0x20>
    156e:	9f 3f       	cpi	r25, 0xFF	; 255
    1570:	79 f0       	breq	.+30     	; 0x1590 <__fp_splitA+0x2a>
    1572:	87 95       	ror	r24
    1574:	08 95       	ret
    1576:	12 16       	cp	r1, r18
    1578:	13 06       	cpc	r1, r19
    157a:	14 06       	cpc	r1, r20
    157c:	55 1f       	adc	r21, r21
    157e:	f2 cf       	rjmp	.-28     	; 0x1564 <__fp_split3+0xe>
    1580:	46 95       	lsr	r20
    1582:	f1 df       	rcall	.-30     	; 0x1566 <__fp_splitA>
    1584:	08 c0       	rjmp	.+16     	; 0x1596 <__fp_splitA+0x30>
    1586:	16 16       	cp	r1, r22
    1588:	17 06       	cpc	r1, r23
    158a:	18 06       	cpc	r1, r24
    158c:	99 1f       	adc	r25, r25
    158e:	f1 cf       	rjmp	.-30     	; 0x1572 <__fp_splitA+0xc>
    1590:	86 95       	lsr	r24
    1592:	71 05       	cpc	r23, r1
    1594:	61 05       	cpc	r22, r1
    1596:	08 94       	sec
    1598:	08 95       	ret

0000159a <__fp_trunc>:
    159a:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__fp_splitA>
    159e:	a0 f0       	brcs	.+40     	; 0x15c8 <__fp_trunc+0x2e>
    15a0:	be e7       	ldi	r27, 0x7E	; 126
    15a2:	b9 17       	cp	r27, r25
    15a4:	88 f4       	brcc	.+34     	; 0x15c8 <__fp_trunc+0x2e>
    15a6:	bb 27       	eor	r27, r27
    15a8:	9f 38       	cpi	r25, 0x8F	; 143
    15aa:	60 f4       	brcc	.+24     	; 0x15c4 <__fp_trunc+0x2a>
    15ac:	16 16       	cp	r1, r22
    15ae:	b1 1d       	adc	r27, r1
    15b0:	67 2f       	mov	r22, r23
    15b2:	78 2f       	mov	r23, r24
    15b4:	88 27       	eor	r24, r24
    15b6:	98 5f       	subi	r25, 0xF8	; 248
    15b8:	f7 cf       	rjmp	.-18     	; 0x15a8 <__fp_trunc+0xe>
    15ba:	86 95       	lsr	r24
    15bc:	77 95       	ror	r23
    15be:	67 95       	ror	r22
    15c0:	b1 1d       	adc	r27, r1
    15c2:	93 95       	inc	r25
    15c4:	96 39       	cpi	r25, 0x96	; 150
    15c6:	c8 f3       	brcs	.-14     	; 0x15ba <__fp_trunc+0x20>
    15c8:	08 95       	ret

000015ca <__fp_zero>:
    15ca:	e8 94       	clt

000015cc <__fp_szero>:
    15cc:	bb 27       	eor	r27, r27
    15ce:	66 27       	eor	r22, r22
    15d0:	77 27       	eor	r23, r23
    15d2:	cb 01       	movw	r24, r22
    15d4:	97 f9       	bld	r25, 7
    15d6:	08 95       	ret

000015d8 <__gesf2>:
    15d8:	0e 94 36 0a 	call	0x146c	; 0x146c <__fp_cmp>
    15dc:	08 f4       	brcc	.+2      	; 0x15e0 <__gesf2+0x8>
    15de:	8f ef       	ldi	r24, 0xFF	; 255
    15e0:	08 95       	ret

000015e2 <__mulsf3>:
    15e2:	0e 94 04 0b 	call	0x1608	; 0x1608 <__mulsf3x>
    15e6:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__fp_round>
    15ea:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__fp_pscA>
    15ee:	38 f0       	brcs	.+14     	; 0x15fe <__mulsf3+0x1c>
    15f0:	0e 94 93 0a 	call	0x1526	; 0x1526 <__fp_pscB>
    15f4:	20 f0       	brcs	.+8      	; 0x15fe <__mulsf3+0x1c>
    15f6:	95 23       	and	r25, r21
    15f8:	11 f0       	breq	.+4      	; 0x15fe <__mulsf3+0x1c>
    15fa:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__fp_inf>
    15fe:	0c 94 89 0a 	jmp	0x1512	; 0x1512 <__fp_nan>
    1602:	11 24       	eor	r1, r1
    1604:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__fp_szero>

00001608 <__mulsf3x>:
    1608:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fp_split3>
    160c:	70 f3       	brcs	.-36     	; 0x15ea <__mulsf3+0x8>

0000160e <__mulsf3_pse>:
    160e:	95 9f       	mul	r25, r21
    1610:	c1 f3       	breq	.-16     	; 0x1602 <__mulsf3+0x20>
    1612:	95 0f       	add	r25, r21
    1614:	50 e0       	ldi	r21, 0x00	; 0
    1616:	55 1f       	adc	r21, r21
    1618:	62 9f       	mul	r22, r18
    161a:	f0 01       	movw	r30, r0
    161c:	72 9f       	mul	r23, r18
    161e:	bb 27       	eor	r27, r27
    1620:	f0 0d       	add	r31, r0
    1622:	b1 1d       	adc	r27, r1
    1624:	63 9f       	mul	r22, r19
    1626:	aa 27       	eor	r26, r26
    1628:	f0 0d       	add	r31, r0
    162a:	b1 1d       	adc	r27, r1
    162c:	aa 1f       	adc	r26, r26
    162e:	64 9f       	mul	r22, r20
    1630:	66 27       	eor	r22, r22
    1632:	b0 0d       	add	r27, r0
    1634:	a1 1d       	adc	r26, r1
    1636:	66 1f       	adc	r22, r22
    1638:	82 9f       	mul	r24, r18
    163a:	22 27       	eor	r18, r18
    163c:	b0 0d       	add	r27, r0
    163e:	a1 1d       	adc	r26, r1
    1640:	62 1f       	adc	r22, r18
    1642:	73 9f       	mul	r23, r19
    1644:	b0 0d       	add	r27, r0
    1646:	a1 1d       	adc	r26, r1
    1648:	62 1f       	adc	r22, r18
    164a:	83 9f       	mul	r24, r19
    164c:	a0 0d       	add	r26, r0
    164e:	61 1d       	adc	r22, r1
    1650:	22 1f       	adc	r18, r18
    1652:	74 9f       	mul	r23, r20
    1654:	33 27       	eor	r19, r19
    1656:	a0 0d       	add	r26, r0
    1658:	61 1d       	adc	r22, r1
    165a:	23 1f       	adc	r18, r19
    165c:	84 9f       	mul	r24, r20
    165e:	60 0d       	add	r22, r0
    1660:	21 1d       	adc	r18, r1
    1662:	82 2f       	mov	r24, r18
    1664:	76 2f       	mov	r23, r22
    1666:	6a 2f       	mov	r22, r26
    1668:	11 24       	eor	r1, r1
    166a:	9f 57       	subi	r25, 0x7F	; 127
    166c:	50 40       	sbci	r21, 0x00	; 0
    166e:	9a f0       	brmi	.+38     	; 0x1696 <__mulsf3_pse+0x88>
    1670:	f1 f0       	breq	.+60     	; 0x16ae <__mulsf3_pse+0xa0>
    1672:	88 23       	and	r24, r24
    1674:	4a f0       	brmi	.+18     	; 0x1688 <__mulsf3_pse+0x7a>
    1676:	ee 0f       	add	r30, r30
    1678:	ff 1f       	adc	r31, r31
    167a:	bb 1f       	adc	r27, r27
    167c:	66 1f       	adc	r22, r22
    167e:	77 1f       	adc	r23, r23
    1680:	88 1f       	adc	r24, r24
    1682:	91 50       	subi	r25, 0x01	; 1
    1684:	50 40       	sbci	r21, 0x00	; 0
    1686:	a9 f7       	brne	.-22     	; 0x1672 <__mulsf3_pse+0x64>
    1688:	9e 3f       	cpi	r25, 0xFE	; 254
    168a:	51 05       	cpc	r21, r1
    168c:	80 f0       	brcs	.+32     	; 0x16ae <__mulsf3_pse+0xa0>
    168e:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__fp_inf>
    1692:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__fp_szero>
    1696:	5f 3f       	cpi	r21, 0xFF	; 255
    1698:	e4 f3       	brlt	.-8      	; 0x1692 <__mulsf3_pse+0x84>
    169a:	98 3e       	cpi	r25, 0xE8	; 232
    169c:	d4 f3       	brlt	.-12     	; 0x1692 <__mulsf3_pse+0x84>
    169e:	86 95       	lsr	r24
    16a0:	77 95       	ror	r23
    16a2:	67 95       	ror	r22
    16a4:	b7 95       	ror	r27
    16a6:	f7 95       	ror	r31
    16a8:	e7 95       	ror	r30
    16aa:	9f 5f       	subi	r25, 0xFF	; 255
    16ac:	c1 f7       	brne	.-16     	; 0x169e <__mulsf3_pse+0x90>
    16ae:	fe 2b       	or	r31, r30
    16b0:	88 0f       	add	r24, r24
    16b2:	91 1d       	adc	r25, r1
    16b4:	96 95       	lsr	r25
    16b6:	87 95       	ror	r24
    16b8:	97 f9       	bld	r25, 7
    16ba:	08 95       	ret

000016bc <sprintf>:
    16bc:	ae e0       	ldi	r26, 0x0E	; 14
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e4 e6       	ldi	r30, 0x64	; 100
    16c2:	fb e0       	ldi	r31, 0x0B	; 11
    16c4:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__prologue_saves__+0x1c>
    16c8:	0d 89       	ldd	r16, Y+21	; 0x15
    16ca:	1e 89       	ldd	r17, Y+22	; 0x16
    16cc:	86 e0       	ldi	r24, 0x06	; 6
    16ce:	8c 83       	std	Y+4, r24	; 0x04
    16d0:	1a 83       	std	Y+2, r17	; 0x02
    16d2:	09 83       	std	Y+1, r16	; 0x01
    16d4:	8f ef       	ldi	r24, 0xFF	; 255
    16d6:	9f e7       	ldi	r25, 0x7F	; 127
    16d8:	9e 83       	std	Y+6, r25	; 0x06
    16da:	8d 83       	std	Y+5, r24	; 0x05
    16dc:	ae 01       	movw	r20, r28
    16de:	47 5e       	subi	r20, 0xE7	; 231
    16e0:	5f 4f       	sbci	r21, 0xFF	; 255
    16e2:	6f 89       	ldd	r22, Y+23	; 0x17
    16e4:	78 8d       	ldd	r23, Y+24	; 0x18
    16e6:	ce 01       	movw	r24, r28
    16e8:	01 96       	adiw	r24, 0x01	; 1
    16ea:	0e 94 80 0b 	call	0x1700	; 0x1700 <vfprintf>
    16ee:	ef 81       	ldd	r30, Y+7	; 0x07
    16f0:	f8 85       	ldd	r31, Y+8	; 0x08
    16f2:	e0 0f       	add	r30, r16
    16f4:	f1 1f       	adc	r31, r17
    16f6:	10 82       	st	Z, r1
    16f8:	2e 96       	adiw	r28, 0x0e	; 14
    16fa:	e4 e0       	ldi	r30, 0x04	; 4
    16fc:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <__epilogue_restores__+0x1c>

00001700 <vfprintf>:
    1700:	ab e0       	ldi	r26, 0x0B	; 11
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e6 e8       	ldi	r30, 0x86	; 134
    1706:	fb e0       	ldi	r31, 0x0B	; 11
    1708:	0c 94 11 0e 	jmp	0x1c22	; 0x1c22 <__prologue_saves__>
    170c:	6c 01       	movw	r12, r24
    170e:	7b 01       	movw	r14, r22
    1710:	8a 01       	movw	r16, r20
    1712:	fc 01       	movw	r30, r24
    1714:	17 82       	std	Z+7, r1	; 0x07
    1716:	16 82       	std	Z+6, r1	; 0x06
    1718:	83 81       	ldd	r24, Z+3	; 0x03
    171a:	81 ff       	sbrs	r24, 1
    171c:	cc c1       	rjmp	.+920    	; 0x1ab6 <vfprintf+0x3b6>
    171e:	ce 01       	movw	r24, r28
    1720:	01 96       	adiw	r24, 0x01	; 1
    1722:	3c 01       	movw	r6, r24
    1724:	f6 01       	movw	r30, r12
    1726:	93 81       	ldd	r25, Z+3	; 0x03
    1728:	f7 01       	movw	r30, r14
    172a:	93 fd       	sbrc	r25, 3
    172c:	85 91       	lpm	r24, Z+
    172e:	93 ff       	sbrs	r25, 3
    1730:	81 91       	ld	r24, Z+
    1732:	7f 01       	movw	r14, r30
    1734:	88 23       	and	r24, r24
    1736:	09 f4       	brne	.+2      	; 0x173a <vfprintf+0x3a>
    1738:	ba c1       	rjmp	.+884    	; 0x1aae <vfprintf+0x3ae>
    173a:	85 32       	cpi	r24, 0x25	; 37
    173c:	39 f4       	brne	.+14     	; 0x174c <vfprintf+0x4c>
    173e:	93 fd       	sbrc	r25, 3
    1740:	85 91       	lpm	r24, Z+
    1742:	93 ff       	sbrs	r25, 3
    1744:	81 91       	ld	r24, Z+
    1746:	7f 01       	movw	r14, r30
    1748:	85 32       	cpi	r24, 0x25	; 37
    174a:	29 f4       	brne	.+10     	; 0x1756 <vfprintf+0x56>
    174c:	b6 01       	movw	r22, r12
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	0e 94 77 0d 	call	0x1aee	; 0x1aee <fputc>
    1754:	e7 cf       	rjmp	.-50     	; 0x1724 <vfprintf+0x24>
    1756:	91 2c       	mov	r9, r1
    1758:	21 2c       	mov	r2, r1
    175a:	31 2c       	mov	r3, r1
    175c:	ff e1       	ldi	r31, 0x1F	; 31
    175e:	f3 15       	cp	r31, r3
    1760:	d8 f0       	brcs	.+54     	; 0x1798 <vfprintf+0x98>
    1762:	8b 32       	cpi	r24, 0x2B	; 43
    1764:	79 f0       	breq	.+30     	; 0x1784 <vfprintf+0x84>
    1766:	38 f4       	brcc	.+14     	; 0x1776 <vfprintf+0x76>
    1768:	80 32       	cpi	r24, 0x20	; 32
    176a:	79 f0       	breq	.+30     	; 0x178a <vfprintf+0x8a>
    176c:	83 32       	cpi	r24, 0x23	; 35
    176e:	a1 f4       	brne	.+40     	; 0x1798 <vfprintf+0x98>
    1770:	23 2d       	mov	r18, r3
    1772:	20 61       	ori	r18, 0x10	; 16
    1774:	1d c0       	rjmp	.+58     	; 0x17b0 <vfprintf+0xb0>
    1776:	8d 32       	cpi	r24, 0x2D	; 45
    1778:	61 f0       	breq	.+24     	; 0x1792 <vfprintf+0x92>
    177a:	80 33       	cpi	r24, 0x30	; 48
    177c:	69 f4       	brne	.+26     	; 0x1798 <vfprintf+0x98>
    177e:	23 2d       	mov	r18, r3
    1780:	21 60       	ori	r18, 0x01	; 1
    1782:	16 c0       	rjmp	.+44     	; 0x17b0 <vfprintf+0xb0>
    1784:	83 2d       	mov	r24, r3
    1786:	82 60       	ori	r24, 0x02	; 2
    1788:	38 2e       	mov	r3, r24
    178a:	e3 2d       	mov	r30, r3
    178c:	e4 60       	ori	r30, 0x04	; 4
    178e:	3e 2e       	mov	r3, r30
    1790:	2a c0       	rjmp	.+84     	; 0x17e6 <vfprintf+0xe6>
    1792:	f3 2d       	mov	r31, r3
    1794:	f8 60       	ori	r31, 0x08	; 8
    1796:	1d c0       	rjmp	.+58     	; 0x17d2 <vfprintf+0xd2>
    1798:	37 fc       	sbrc	r3, 7
    179a:	2d c0       	rjmp	.+90     	; 0x17f6 <vfprintf+0xf6>
    179c:	20 ed       	ldi	r18, 0xD0	; 208
    179e:	28 0f       	add	r18, r24
    17a0:	2a 30       	cpi	r18, 0x0A	; 10
    17a2:	40 f0       	brcs	.+16     	; 0x17b4 <vfprintf+0xb4>
    17a4:	8e 32       	cpi	r24, 0x2E	; 46
    17a6:	b9 f4       	brne	.+46     	; 0x17d6 <vfprintf+0xd6>
    17a8:	36 fc       	sbrc	r3, 6
    17aa:	81 c1       	rjmp	.+770    	; 0x1aae <vfprintf+0x3ae>
    17ac:	23 2d       	mov	r18, r3
    17ae:	20 64       	ori	r18, 0x40	; 64
    17b0:	32 2e       	mov	r3, r18
    17b2:	19 c0       	rjmp	.+50     	; 0x17e6 <vfprintf+0xe6>
    17b4:	36 fe       	sbrs	r3, 6
    17b6:	06 c0       	rjmp	.+12     	; 0x17c4 <vfprintf+0xc4>
    17b8:	8a e0       	ldi	r24, 0x0A	; 10
    17ba:	98 9e       	mul	r9, r24
    17bc:	20 0d       	add	r18, r0
    17be:	11 24       	eor	r1, r1
    17c0:	92 2e       	mov	r9, r18
    17c2:	11 c0       	rjmp	.+34     	; 0x17e6 <vfprintf+0xe6>
    17c4:	ea e0       	ldi	r30, 0x0A	; 10
    17c6:	2e 9e       	mul	r2, r30
    17c8:	20 0d       	add	r18, r0
    17ca:	11 24       	eor	r1, r1
    17cc:	22 2e       	mov	r2, r18
    17ce:	f3 2d       	mov	r31, r3
    17d0:	f0 62       	ori	r31, 0x20	; 32
    17d2:	3f 2e       	mov	r3, r31
    17d4:	08 c0       	rjmp	.+16     	; 0x17e6 <vfprintf+0xe6>
    17d6:	8c 36       	cpi	r24, 0x6C	; 108
    17d8:	21 f4       	brne	.+8      	; 0x17e2 <vfprintf+0xe2>
    17da:	83 2d       	mov	r24, r3
    17dc:	80 68       	ori	r24, 0x80	; 128
    17de:	38 2e       	mov	r3, r24
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <vfprintf+0xe6>
    17e2:	88 36       	cpi	r24, 0x68	; 104
    17e4:	41 f4       	brne	.+16     	; 0x17f6 <vfprintf+0xf6>
    17e6:	f7 01       	movw	r30, r14
    17e8:	93 fd       	sbrc	r25, 3
    17ea:	85 91       	lpm	r24, Z+
    17ec:	93 ff       	sbrs	r25, 3
    17ee:	81 91       	ld	r24, Z+
    17f0:	7f 01       	movw	r14, r30
    17f2:	81 11       	cpse	r24, r1
    17f4:	b3 cf       	rjmp	.-154    	; 0x175c <vfprintf+0x5c>
    17f6:	98 2f       	mov	r25, r24
    17f8:	9f 7d       	andi	r25, 0xDF	; 223
    17fa:	95 54       	subi	r25, 0x45	; 69
    17fc:	93 30       	cpi	r25, 0x03	; 3
    17fe:	28 f4       	brcc	.+10     	; 0x180a <vfprintf+0x10a>
    1800:	0c 5f       	subi	r16, 0xFC	; 252
    1802:	1f 4f       	sbci	r17, 0xFF	; 255
    1804:	9f e3       	ldi	r25, 0x3F	; 63
    1806:	99 83       	std	Y+1, r25	; 0x01
    1808:	0d c0       	rjmp	.+26     	; 0x1824 <vfprintf+0x124>
    180a:	83 36       	cpi	r24, 0x63	; 99
    180c:	31 f0       	breq	.+12     	; 0x181a <vfprintf+0x11a>
    180e:	83 37       	cpi	r24, 0x73	; 115
    1810:	71 f0       	breq	.+28     	; 0x182e <vfprintf+0x12e>
    1812:	83 35       	cpi	r24, 0x53	; 83
    1814:	09 f0       	breq	.+2      	; 0x1818 <vfprintf+0x118>
    1816:	59 c0       	rjmp	.+178    	; 0x18ca <vfprintf+0x1ca>
    1818:	21 c0       	rjmp	.+66     	; 0x185c <vfprintf+0x15c>
    181a:	f8 01       	movw	r30, r16
    181c:	80 81       	ld	r24, Z
    181e:	89 83       	std	Y+1, r24	; 0x01
    1820:	0e 5f       	subi	r16, 0xFE	; 254
    1822:	1f 4f       	sbci	r17, 0xFF	; 255
    1824:	88 24       	eor	r8, r8
    1826:	83 94       	inc	r8
    1828:	91 2c       	mov	r9, r1
    182a:	53 01       	movw	r10, r6
    182c:	13 c0       	rjmp	.+38     	; 0x1854 <vfprintf+0x154>
    182e:	28 01       	movw	r4, r16
    1830:	f2 e0       	ldi	r31, 0x02	; 2
    1832:	4f 0e       	add	r4, r31
    1834:	51 1c       	adc	r5, r1
    1836:	f8 01       	movw	r30, r16
    1838:	a0 80       	ld	r10, Z
    183a:	b1 80       	ldd	r11, Z+1	; 0x01
    183c:	36 fe       	sbrs	r3, 6
    183e:	03 c0       	rjmp	.+6      	; 0x1846 <vfprintf+0x146>
    1840:	69 2d       	mov	r22, r9
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	02 c0       	rjmp	.+4      	; 0x184a <vfprintf+0x14a>
    1846:	6f ef       	ldi	r22, 0xFF	; 255
    1848:	7f ef       	ldi	r23, 0xFF	; 255
    184a:	c5 01       	movw	r24, r10
    184c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <strnlen>
    1850:	4c 01       	movw	r8, r24
    1852:	82 01       	movw	r16, r4
    1854:	f3 2d       	mov	r31, r3
    1856:	ff 77       	andi	r31, 0x7F	; 127
    1858:	3f 2e       	mov	r3, r31
    185a:	16 c0       	rjmp	.+44     	; 0x1888 <vfprintf+0x188>
    185c:	28 01       	movw	r4, r16
    185e:	22 e0       	ldi	r18, 0x02	; 2
    1860:	42 0e       	add	r4, r18
    1862:	51 1c       	adc	r5, r1
    1864:	f8 01       	movw	r30, r16
    1866:	a0 80       	ld	r10, Z
    1868:	b1 80       	ldd	r11, Z+1	; 0x01
    186a:	36 fe       	sbrs	r3, 6
    186c:	03 c0       	rjmp	.+6      	; 0x1874 <vfprintf+0x174>
    186e:	69 2d       	mov	r22, r9
    1870:	70 e0       	ldi	r23, 0x00	; 0
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <vfprintf+0x178>
    1874:	6f ef       	ldi	r22, 0xFF	; 255
    1876:	7f ef       	ldi	r23, 0xFF	; 255
    1878:	c5 01       	movw	r24, r10
    187a:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <strnlen_P>
    187e:	4c 01       	movw	r8, r24
    1880:	f3 2d       	mov	r31, r3
    1882:	f0 68       	ori	r31, 0x80	; 128
    1884:	3f 2e       	mov	r3, r31
    1886:	82 01       	movw	r16, r4
    1888:	33 fc       	sbrc	r3, 3
    188a:	1b c0       	rjmp	.+54     	; 0x18c2 <vfprintf+0x1c2>
    188c:	82 2d       	mov	r24, r2
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	88 16       	cp	r8, r24
    1892:	99 06       	cpc	r9, r25
    1894:	b0 f4       	brcc	.+44     	; 0x18c2 <vfprintf+0x1c2>
    1896:	b6 01       	movw	r22, r12
    1898:	80 e2       	ldi	r24, 0x20	; 32
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	0e 94 77 0d 	call	0x1aee	; 0x1aee <fputc>
    18a0:	2a 94       	dec	r2
    18a2:	f4 cf       	rjmp	.-24     	; 0x188c <vfprintf+0x18c>
    18a4:	f5 01       	movw	r30, r10
    18a6:	37 fc       	sbrc	r3, 7
    18a8:	85 91       	lpm	r24, Z+
    18aa:	37 fe       	sbrs	r3, 7
    18ac:	81 91       	ld	r24, Z+
    18ae:	5f 01       	movw	r10, r30
    18b0:	b6 01       	movw	r22, r12
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	0e 94 77 0d 	call	0x1aee	; 0x1aee <fputc>
    18b8:	21 10       	cpse	r2, r1
    18ba:	2a 94       	dec	r2
    18bc:	21 e0       	ldi	r18, 0x01	; 1
    18be:	82 1a       	sub	r8, r18
    18c0:	91 08       	sbc	r9, r1
    18c2:	81 14       	cp	r8, r1
    18c4:	91 04       	cpc	r9, r1
    18c6:	71 f7       	brne	.-36     	; 0x18a4 <vfprintf+0x1a4>
    18c8:	e8 c0       	rjmp	.+464    	; 0x1a9a <vfprintf+0x39a>
    18ca:	84 36       	cpi	r24, 0x64	; 100
    18cc:	11 f0       	breq	.+4      	; 0x18d2 <vfprintf+0x1d2>
    18ce:	89 36       	cpi	r24, 0x69	; 105
    18d0:	41 f5       	brne	.+80     	; 0x1922 <vfprintf+0x222>
    18d2:	f8 01       	movw	r30, r16
    18d4:	37 fe       	sbrs	r3, 7
    18d6:	07 c0       	rjmp	.+14     	; 0x18e6 <vfprintf+0x1e6>
    18d8:	60 81       	ld	r22, Z
    18da:	71 81       	ldd	r23, Z+1	; 0x01
    18dc:	82 81       	ldd	r24, Z+2	; 0x02
    18de:	93 81       	ldd	r25, Z+3	; 0x03
    18e0:	0c 5f       	subi	r16, 0xFC	; 252
    18e2:	1f 4f       	sbci	r17, 0xFF	; 255
    18e4:	08 c0       	rjmp	.+16     	; 0x18f6 <vfprintf+0x1f6>
    18e6:	60 81       	ld	r22, Z
    18e8:	71 81       	ldd	r23, Z+1	; 0x01
    18ea:	07 2e       	mov	r0, r23
    18ec:	00 0c       	add	r0, r0
    18ee:	88 0b       	sbc	r24, r24
    18f0:	99 0b       	sbc	r25, r25
    18f2:	0e 5f       	subi	r16, 0xFE	; 254
    18f4:	1f 4f       	sbci	r17, 0xFF	; 255
    18f6:	f3 2d       	mov	r31, r3
    18f8:	ff 76       	andi	r31, 0x6F	; 111
    18fa:	3f 2e       	mov	r3, r31
    18fc:	97 ff       	sbrs	r25, 7
    18fe:	09 c0       	rjmp	.+18     	; 0x1912 <vfprintf+0x212>
    1900:	90 95       	com	r25
    1902:	80 95       	com	r24
    1904:	70 95       	com	r23
    1906:	61 95       	neg	r22
    1908:	7f 4f       	sbci	r23, 0xFF	; 255
    190a:	8f 4f       	sbci	r24, 0xFF	; 255
    190c:	9f 4f       	sbci	r25, 0xFF	; 255
    190e:	f0 68       	ori	r31, 0x80	; 128
    1910:	3f 2e       	mov	r3, r31
    1912:	2a e0       	ldi	r18, 0x0A	; 10
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	a3 01       	movw	r20, r6
    1918:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__ultoa_invert>
    191c:	88 2e       	mov	r8, r24
    191e:	86 18       	sub	r8, r6
    1920:	45 c0       	rjmp	.+138    	; 0x19ac <vfprintf+0x2ac>
    1922:	85 37       	cpi	r24, 0x75	; 117
    1924:	31 f4       	brne	.+12     	; 0x1932 <vfprintf+0x232>
    1926:	23 2d       	mov	r18, r3
    1928:	2f 7e       	andi	r18, 0xEF	; 239
    192a:	b2 2e       	mov	r11, r18
    192c:	2a e0       	ldi	r18, 0x0A	; 10
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	25 c0       	rjmp	.+74     	; 0x197c <vfprintf+0x27c>
    1932:	93 2d       	mov	r25, r3
    1934:	99 7f       	andi	r25, 0xF9	; 249
    1936:	b9 2e       	mov	r11, r25
    1938:	8f 36       	cpi	r24, 0x6F	; 111
    193a:	c1 f0       	breq	.+48     	; 0x196c <vfprintf+0x26c>
    193c:	18 f4       	brcc	.+6      	; 0x1944 <vfprintf+0x244>
    193e:	88 35       	cpi	r24, 0x58	; 88
    1940:	79 f0       	breq	.+30     	; 0x1960 <vfprintf+0x260>
    1942:	b5 c0       	rjmp	.+362    	; 0x1aae <vfprintf+0x3ae>
    1944:	80 37       	cpi	r24, 0x70	; 112
    1946:	19 f0       	breq	.+6      	; 0x194e <vfprintf+0x24e>
    1948:	88 37       	cpi	r24, 0x78	; 120
    194a:	21 f0       	breq	.+8      	; 0x1954 <vfprintf+0x254>
    194c:	b0 c0       	rjmp	.+352    	; 0x1aae <vfprintf+0x3ae>
    194e:	e9 2f       	mov	r30, r25
    1950:	e0 61       	ori	r30, 0x10	; 16
    1952:	be 2e       	mov	r11, r30
    1954:	b4 fe       	sbrs	r11, 4
    1956:	0d c0       	rjmp	.+26     	; 0x1972 <vfprintf+0x272>
    1958:	fb 2d       	mov	r31, r11
    195a:	f4 60       	ori	r31, 0x04	; 4
    195c:	bf 2e       	mov	r11, r31
    195e:	09 c0       	rjmp	.+18     	; 0x1972 <vfprintf+0x272>
    1960:	34 fe       	sbrs	r3, 4
    1962:	0a c0       	rjmp	.+20     	; 0x1978 <vfprintf+0x278>
    1964:	29 2f       	mov	r18, r25
    1966:	26 60       	ori	r18, 0x06	; 6
    1968:	b2 2e       	mov	r11, r18
    196a:	06 c0       	rjmp	.+12     	; 0x1978 <vfprintf+0x278>
    196c:	28 e0       	ldi	r18, 0x08	; 8
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	05 c0       	rjmp	.+10     	; 0x197c <vfprintf+0x27c>
    1972:	20 e1       	ldi	r18, 0x10	; 16
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	02 c0       	rjmp	.+4      	; 0x197c <vfprintf+0x27c>
    1978:	20 e1       	ldi	r18, 0x10	; 16
    197a:	32 e0       	ldi	r19, 0x02	; 2
    197c:	f8 01       	movw	r30, r16
    197e:	b7 fe       	sbrs	r11, 7
    1980:	07 c0       	rjmp	.+14     	; 0x1990 <vfprintf+0x290>
    1982:	60 81       	ld	r22, Z
    1984:	71 81       	ldd	r23, Z+1	; 0x01
    1986:	82 81       	ldd	r24, Z+2	; 0x02
    1988:	93 81       	ldd	r25, Z+3	; 0x03
    198a:	0c 5f       	subi	r16, 0xFC	; 252
    198c:	1f 4f       	sbci	r17, 0xFF	; 255
    198e:	06 c0       	rjmp	.+12     	; 0x199c <vfprintf+0x29c>
    1990:	60 81       	ld	r22, Z
    1992:	71 81       	ldd	r23, Z+1	; 0x01
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	0e 5f       	subi	r16, 0xFE	; 254
    199a:	1f 4f       	sbci	r17, 0xFF	; 255
    199c:	a3 01       	movw	r20, r6
    199e:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__ultoa_invert>
    19a2:	88 2e       	mov	r8, r24
    19a4:	86 18       	sub	r8, r6
    19a6:	fb 2d       	mov	r31, r11
    19a8:	ff 77       	andi	r31, 0x7F	; 127
    19aa:	3f 2e       	mov	r3, r31
    19ac:	36 fe       	sbrs	r3, 6
    19ae:	0d c0       	rjmp	.+26     	; 0x19ca <vfprintf+0x2ca>
    19b0:	23 2d       	mov	r18, r3
    19b2:	2e 7f       	andi	r18, 0xFE	; 254
    19b4:	a2 2e       	mov	r10, r18
    19b6:	89 14       	cp	r8, r9
    19b8:	58 f4       	brcc	.+22     	; 0x19d0 <vfprintf+0x2d0>
    19ba:	34 fe       	sbrs	r3, 4
    19bc:	0b c0       	rjmp	.+22     	; 0x19d4 <vfprintf+0x2d4>
    19be:	32 fc       	sbrc	r3, 2
    19c0:	09 c0       	rjmp	.+18     	; 0x19d4 <vfprintf+0x2d4>
    19c2:	83 2d       	mov	r24, r3
    19c4:	8e 7e       	andi	r24, 0xEE	; 238
    19c6:	a8 2e       	mov	r10, r24
    19c8:	05 c0       	rjmp	.+10     	; 0x19d4 <vfprintf+0x2d4>
    19ca:	b8 2c       	mov	r11, r8
    19cc:	a3 2c       	mov	r10, r3
    19ce:	03 c0       	rjmp	.+6      	; 0x19d6 <vfprintf+0x2d6>
    19d0:	b8 2c       	mov	r11, r8
    19d2:	01 c0       	rjmp	.+2      	; 0x19d6 <vfprintf+0x2d6>
    19d4:	b9 2c       	mov	r11, r9
    19d6:	a4 fe       	sbrs	r10, 4
    19d8:	0f c0       	rjmp	.+30     	; 0x19f8 <vfprintf+0x2f8>
    19da:	fe 01       	movw	r30, r28
    19dc:	e8 0d       	add	r30, r8
    19de:	f1 1d       	adc	r31, r1
    19e0:	80 81       	ld	r24, Z
    19e2:	80 33       	cpi	r24, 0x30	; 48
    19e4:	21 f4       	brne	.+8      	; 0x19ee <vfprintf+0x2ee>
    19e6:	9a 2d       	mov	r25, r10
    19e8:	99 7e       	andi	r25, 0xE9	; 233
    19ea:	a9 2e       	mov	r10, r25
    19ec:	09 c0       	rjmp	.+18     	; 0x1a00 <vfprintf+0x300>
    19ee:	a2 fe       	sbrs	r10, 2
    19f0:	06 c0       	rjmp	.+12     	; 0x19fe <vfprintf+0x2fe>
    19f2:	b3 94       	inc	r11
    19f4:	b3 94       	inc	r11
    19f6:	04 c0       	rjmp	.+8      	; 0x1a00 <vfprintf+0x300>
    19f8:	8a 2d       	mov	r24, r10
    19fa:	86 78       	andi	r24, 0x86	; 134
    19fc:	09 f0       	breq	.+2      	; 0x1a00 <vfprintf+0x300>
    19fe:	b3 94       	inc	r11
    1a00:	a3 fc       	sbrc	r10, 3
    1a02:	11 c0       	rjmp	.+34     	; 0x1a26 <vfprintf+0x326>
    1a04:	a0 fe       	sbrs	r10, 0
    1a06:	06 c0       	rjmp	.+12     	; 0x1a14 <vfprintf+0x314>
    1a08:	b2 14       	cp	r11, r2
    1a0a:	88 f4       	brcc	.+34     	; 0x1a2e <vfprintf+0x32e>
    1a0c:	28 0c       	add	r2, r8
    1a0e:	92 2c       	mov	r9, r2
    1a10:	9b 18       	sub	r9, r11
    1a12:	0e c0       	rjmp	.+28     	; 0x1a30 <vfprintf+0x330>
    1a14:	b2 14       	cp	r11, r2
    1a16:	60 f4       	brcc	.+24     	; 0x1a30 <vfprintf+0x330>
    1a18:	b6 01       	movw	r22, r12
    1a1a:	80 e2       	ldi	r24, 0x20	; 32
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	0e 94 77 0d 	call	0x1aee	; 0x1aee <fputc>
    1a22:	b3 94       	inc	r11
    1a24:	f7 cf       	rjmp	.-18     	; 0x1a14 <vfprintf+0x314>
    1a26:	b2 14       	cp	r11, r2
    1a28:	18 f4       	brcc	.+6      	; 0x1a30 <vfprintf+0x330>
    1a2a:	2b 18       	sub	r2, r11
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <vfprintf+0x332>
    1a2e:	98 2c       	mov	r9, r8
    1a30:	21 2c       	mov	r2, r1
    1a32:	a4 fe       	sbrs	r10, 4
    1a34:	10 c0       	rjmp	.+32     	; 0x1a56 <vfprintf+0x356>
    1a36:	b6 01       	movw	r22, r12
    1a38:	80 e3       	ldi	r24, 0x30	; 48
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	0e 94 77 0d 	call	0x1aee	; 0x1aee <fputc>
    1a40:	a2 fe       	sbrs	r10, 2
    1a42:	17 c0       	rjmp	.+46     	; 0x1a72 <vfprintf+0x372>
    1a44:	a1 fc       	sbrc	r10, 1
    1a46:	03 c0       	rjmp	.+6      	; 0x1a4e <vfprintf+0x34e>
    1a48:	88 e7       	ldi	r24, 0x78	; 120
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <vfprintf+0x352>
    1a4e:	88 e5       	ldi	r24, 0x58	; 88
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	b6 01       	movw	r22, r12
    1a54:	0c c0       	rjmp	.+24     	; 0x1a6e <vfprintf+0x36e>
    1a56:	8a 2d       	mov	r24, r10
    1a58:	86 78       	andi	r24, 0x86	; 134
    1a5a:	59 f0       	breq	.+22     	; 0x1a72 <vfprintf+0x372>
    1a5c:	a1 fe       	sbrs	r10, 1
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <vfprintf+0x364>
    1a60:	8b e2       	ldi	r24, 0x2B	; 43
    1a62:	01 c0       	rjmp	.+2      	; 0x1a66 <vfprintf+0x366>
    1a64:	80 e2       	ldi	r24, 0x20	; 32
    1a66:	a7 fc       	sbrc	r10, 7
    1a68:	8d e2       	ldi	r24, 0x2D	; 45
    1a6a:	b6 01       	movw	r22, r12
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	0e 94 77 0d 	call	0x1aee	; 0x1aee <fputc>
    1a72:	89 14       	cp	r8, r9
    1a74:	38 f4       	brcc	.+14     	; 0x1a84 <vfprintf+0x384>
    1a76:	b6 01       	movw	r22, r12
    1a78:	80 e3       	ldi	r24, 0x30	; 48
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	0e 94 77 0d 	call	0x1aee	; 0x1aee <fputc>
    1a80:	9a 94       	dec	r9
    1a82:	f7 cf       	rjmp	.-18     	; 0x1a72 <vfprintf+0x372>
    1a84:	8a 94       	dec	r8
    1a86:	f3 01       	movw	r30, r6
    1a88:	e8 0d       	add	r30, r8
    1a8a:	f1 1d       	adc	r31, r1
    1a8c:	80 81       	ld	r24, Z
    1a8e:	b6 01       	movw	r22, r12
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	0e 94 77 0d 	call	0x1aee	; 0x1aee <fputc>
    1a96:	81 10       	cpse	r8, r1
    1a98:	f5 cf       	rjmp	.-22     	; 0x1a84 <vfprintf+0x384>
    1a9a:	22 20       	and	r2, r2
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <vfprintf+0x3a0>
    1a9e:	42 ce       	rjmp	.-892    	; 0x1724 <vfprintf+0x24>
    1aa0:	b6 01       	movw	r22, r12
    1aa2:	80 e2       	ldi	r24, 0x20	; 32
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	0e 94 77 0d 	call	0x1aee	; 0x1aee <fputc>
    1aaa:	2a 94       	dec	r2
    1aac:	f6 cf       	rjmp	.-20     	; 0x1a9a <vfprintf+0x39a>
    1aae:	f6 01       	movw	r30, r12
    1ab0:	86 81       	ldd	r24, Z+6	; 0x06
    1ab2:	97 81       	ldd	r25, Z+7	; 0x07
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <vfprintf+0x3ba>
    1ab6:	8f ef       	ldi	r24, 0xFF	; 255
    1ab8:	9f ef       	ldi	r25, 0xFF	; 255
    1aba:	2b 96       	adiw	r28, 0x0b	; 11
    1abc:	e2 e1       	ldi	r30, 0x12	; 18
    1abe:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__epilogue_restores__>

00001ac2 <strnlen_P>:
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	05 90       	lpm	r0, Z+
    1ac6:	61 50       	subi	r22, 0x01	; 1
    1ac8:	70 40       	sbci	r23, 0x00	; 0
    1aca:	01 10       	cpse	r0, r1
    1acc:	d8 f7       	brcc	.-10     	; 0x1ac4 <strnlen_P+0x2>
    1ace:	80 95       	com	r24
    1ad0:	90 95       	com	r25
    1ad2:	8e 0f       	add	r24, r30
    1ad4:	9f 1f       	adc	r25, r31
    1ad6:	08 95       	ret

00001ad8 <strnlen>:
    1ad8:	fc 01       	movw	r30, r24
    1ada:	61 50       	subi	r22, 0x01	; 1
    1adc:	70 40       	sbci	r23, 0x00	; 0
    1ade:	01 90       	ld	r0, Z+
    1ae0:	01 10       	cpse	r0, r1
    1ae2:	d8 f7       	brcc	.-10     	; 0x1ada <strnlen+0x2>
    1ae4:	80 95       	com	r24
    1ae6:	90 95       	com	r25
    1ae8:	8e 0f       	add	r24, r30
    1aea:	9f 1f       	adc	r25, r31
    1aec:	08 95       	ret

00001aee <fputc>:
    1aee:	0f 93       	push	r16
    1af0:	1f 93       	push	r17
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	fb 01       	movw	r30, r22
    1af8:	23 81       	ldd	r18, Z+3	; 0x03
    1afa:	21 fd       	sbrc	r18, 1
    1afc:	03 c0       	rjmp	.+6      	; 0x1b04 <fputc+0x16>
    1afe:	8f ef       	ldi	r24, 0xFF	; 255
    1b00:	9f ef       	ldi	r25, 0xFF	; 255
    1b02:	2c c0       	rjmp	.+88     	; 0x1b5c <fputc+0x6e>
    1b04:	22 ff       	sbrs	r18, 2
    1b06:	16 c0       	rjmp	.+44     	; 0x1b34 <fputc+0x46>
    1b08:	46 81       	ldd	r20, Z+6	; 0x06
    1b0a:	57 81       	ldd	r21, Z+7	; 0x07
    1b0c:	24 81       	ldd	r18, Z+4	; 0x04
    1b0e:	35 81       	ldd	r19, Z+5	; 0x05
    1b10:	42 17       	cp	r20, r18
    1b12:	53 07       	cpc	r21, r19
    1b14:	44 f4       	brge	.+16     	; 0x1b26 <fputc+0x38>
    1b16:	a0 81       	ld	r26, Z
    1b18:	b1 81       	ldd	r27, Z+1	; 0x01
    1b1a:	9d 01       	movw	r18, r26
    1b1c:	2f 5f       	subi	r18, 0xFF	; 255
    1b1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b20:	31 83       	std	Z+1, r19	; 0x01
    1b22:	20 83       	st	Z, r18
    1b24:	8c 93       	st	X, r24
    1b26:	26 81       	ldd	r18, Z+6	; 0x06
    1b28:	37 81       	ldd	r19, Z+7	; 0x07
    1b2a:	2f 5f       	subi	r18, 0xFF	; 255
    1b2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2e:	37 83       	std	Z+7, r19	; 0x07
    1b30:	26 83       	std	Z+6, r18	; 0x06
    1b32:	14 c0       	rjmp	.+40     	; 0x1b5c <fputc+0x6e>
    1b34:	8b 01       	movw	r16, r22
    1b36:	ec 01       	movw	r28, r24
    1b38:	fb 01       	movw	r30, r22
    1b3a:	00 84       	ldd	r0, Z+8	; 0x08
    1b3c:	f1 85       	ldd	r31, Z+9	; 0x09
    1b3e:	e0 2d       	mov	r30, r0
    1b40:	09 95       	icall
    1b42:	89 2b       	or	r24, r25
    1b44:	e1 f6       	brne	.-72     	; 0x1afe <fputc+0x10>
    1b46:	d8 01       	movw	r26, r16
    1b48:	16 96       	adiw	r26, 0x06	; 6
    1b4a:	8d 91       	ld	r24, X+
    1b4c:	9c 91       	ld	r25, X
    1b4e:	17 97       	sbiw	r26, 0x07	; 7
    1b50:	01 96       	adiw	r24, 0x01	; 1
    1b52:	17 96       	adiw	r26, 0x07	; 7
    1b54:	9c 93       	st	X, r25
    1b56:	8e 93       	st	-X, r24
    1b58:	16 97       	sbiw	r26, 0x06	; 6
    1b5a:	ce 01       	movw	r24, r28
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	08 95       	ret

00001b66 <__ultoa_invert>:
    1b66:	fa 01       	movw	r30, r20
    1b68:	aa 27       	eor	r26, r26
    1b6a:	28 30       	cpi	r18, 0x08	; 8
    1b6c:	51 f1       	breq	.+84     	; 0x1bc2 <__ultoa_invert+0x5c>
    1b6e:	20 31       	cpi	r18, 0x10	; 16
    1b70:	81 f1       	breq	.+96     	; 0x1bd2 <__ultoa_invert+0x6c>
    1b72:	e8 94       	clt
    1b74:	6f 93       	push	r22
    1b76:	6e 7f       	andi	r22, 0xFE	; 254
    1b78:	6e 5f       	subi	r22, 0xFE	; 254
    1b7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b80:	af 4f       	sbci	r26, 0xFF	; 255
    1b82:	b1 e0       	ldi	r27, 0x01	; 1
    1b84:	3e d0       	rcall	.+124    	; 0x1c02 <__ultoa_invert+0x9c>
    1b86:	b4 e0       	ldi	r27, 0x04	; 4
    1b88:	3c d0       	rcall	.+120    	; 0x1c02 <__ultoa_invert+0x9c>
    1b8a:	67 0f       	add	r22, r23
    1b8c:	78 1f       	adc	r23, r24
    1b8e:	89 1f       	adc	r24, r25
    1b90:	9a 1f       	adc	r25, r26
    1b92:	a1 1d       	adc	r26, r1
    1b94:	68 0f       	add	r22, r24
    1b96:	79 1f       	adc	r23, r25
    1b98:	8a 1f       	adc	r24, r26
    1b9a:	91 1d       	adc	r25, r1
    1b9c:	a1 1d       	adc	r26, r1
    1b9e:	6a 0f       	add	r22, r26
    1ba0:	71 1d       	adc	r23, r1
    1ba2:	81 1d       	adc	r24, r1
    1ba4:	91 1d       	adc	r25, r1
    1ba6:	a1 1d       	adc	r26, r1
    1ba8:	20 d0       	rcall	.+64     	; 0x1bea <__ultoa_invert+0x84>
    1baa:	09 f4       	brne	.+2      	; 0x1bae <__ultoa_invert+0x48>
    1bac:	68 94       	set
    1bae:	3f 91       	pop	r19
    1bb0:	2a e0       	ldi	r18, 0x0A	; 10
    1bb2:	26 9f       	mul	r18, r22
    1bb4:	11 24       	eor	r1, r1
    1bb6:	30 19       	sub	r19, r0
    1bb8:	30 5d       	subi	r19, 0xD0	; 208
    1bba:	31 93       	st	Z+, r19
    1bbc:	de f6       	brtc	.-74     	; 0x1b74 <__ultoa_invert+0xe>
    1bbe:	cf 01       	movw	r24, r30
    1bc0:	08 95       	ret
    1bc2:	46 2f       	mov	r20, r22
    1bc4:	47 70       	andi	r20, 0x07	; 7
    1bc6:	40 5d       	subi	r20, 0xD0	; 208
    1bc8:	41 93       	st	Z+, r20
    1bca:	b3 e0       	ldi	r27, 0x03	; 3
    1bcc:	0f d0       	rcall	.+30     	; 0x1bec <__ultoa_invert+0x86>
    1bce:	c9 f7       	brne	.-14     	; 0x1bc2 <__ultoa_invert+0x5c>
    1bd0:	f6 cf       	rjmp	.-20     	; 0x1bbe <__ultoa_invert+0x58>
    1bd2:	46 2f       	mov	r20, r22
    1bd4:	4f 70       	andi	r20, 0x0F	; 15
    1bd6:	40 5d       	subi	r20, 0xD0	; 208
    1bd8:	4a 33       	cpi	r20, 0x3A	; 58
    1bda:	18 f0       	brcs	.+6      	; 0x1be2 <__ultoa_invert+0x7c>
    1bdc:	49 5d       	subi	r20, 0xD9	; 217
    1bde:	31 fd       	sbrc	r19, 1
    1be0:	40 52       	subi	r20, 0x20	; 32
    1be2:	41 93       	st	Z+, r20
    1be4:	02 d0       	rcall	.+4      	; 0x1bea <__ultoa_invert+0x84>
    1be6:	a9 f7       	brne	.-22     	; 0x1bd2 <__ultoa_invert+0x6c>
    1be8:	ea cf       	rjmp	.-44     	; 0x1bbe <__ultoa_invert+0x58>
    1bea:	b4 e0       	ldi	r27, 0x04	; 4
    1bec:	a6 95       	lsr	r26
    1bee:	97 95       	ror	r25
    1bf0:	87 95       	ror	r24
    1bf2:	77 95       	ror	r23
    1bf4:	67 95       	ror	r22
    1bf6:	ba 95       	dec	r27
    1bf8:	c9 f7       	brne	.-14     	; 0x1bec <__ultoa_invert+0x86>
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	61 05       	cpc	r22, r1
    1bfe:	71 05       	cpc	r23, r1
    1c00:	08 95       	ret
    1c02:	9b 01       	movw	r18, r22
    1c04:	ac 01       	movw	r20, r24
    1c06:	0a 2e       	mov	r0, r26
    1c08:	06 94       	lsr	r0
    1c0a:	57 95       	ror	r21
    1c0c:	47 95       	ror	r20
    1c0e:	37 95       	ror	r19
    1c10:	27 95       	ror	r18
    1c12:	ba 95       	dec	r27
    1c14:	c9 f7       	brne	.-14     	; 0x1c08 <__ultoa_invert+0xa2>
    1c16:	62 0f       	add	r22, r18
    1c18:	73 1f       	adc	r23, r19
    1c1a:	84 1f       	adc	r24, r20
    1c1c:	95 1f       	adc	r25, r21
    1c1e:	a0 1d       	adc	r26, r0
    1c20:	08 95       	ret

00001c22 <__prologue_saves__>:
    1c22:	2f 92       	push	r2
    1c24:	3f 92       	push	r3
    1c26:	4f 92       	push	r4
    1c28:	5f 92       	push	r5
    1c2a:	6f 92       	push	r6
    1c2c:	7f 92       	push	r7
    1c2e:	8f 92       	push	r8
    1c30:	9f 92       	push	r9
    1c32:	af 92       	push	r10
    1c34:	bf 92       	push	r11
    1c36:	cf 92       	push	r12
    1c38:	df 92       	push	r13
    1c3a:	ef 92       	push	r14
    1c3c:	ff 92       	push	r15
    1c3e:	0f 93       	push	r16
    1c40:	1f 93       	push	r17
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	ca 1b       	sub	r28, r26
    1c4c:	db 0b       	sbc	r29, r27
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	de bf       	out	0x3e, r29	; 62
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	cd bf       	out	0x3d, r28	; 61
    1c58:	09 94       	ijmp

00001c5a <__epilogue_restores__>:
    1c5a:	2a 88       	ldd	r2, Y+18	; 0x12
    1c5c:	39 88       	ldd	r3, Y+17	; 0x11
    1c5e:	48 88       	ldd	r4, Y+16	; 0x10
    1c60:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c62:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c64:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c66:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c68:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c6a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c6c:	b9 84       	ldd	r11, Y+9	; 0x09
    1c6e:	c8 84       	ldd	r12, Y+8	; 0x08
    1c70:	df 80       	ldd	r13, Y+7	; 0x07
    1c72:	ee 80       	ldd	r14, Y+6	; 0x06
    1c74:	fd 80       	ldd	r15, Y+5	; 0x05
    1c76:	0c 81       	ldd	r16, Y+4	; 0x04
    1c78:	1b 81       	ldd	r17, Y+3	; 0x03
    1c7a:	aa 81       	ldd	r26, Y+2	; 0x02
    1c7c:	b9 81       	ldd	r27, Y+1	; 0x01
    1c7e:	ce 0f       	add	r28, r30
    1c80:	d1 1d       	adc	r29, r1
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
    1c8c:	ed 01       	movw	r28, r26
    1c8e:	08 95       	ret

00001c90 <_exit>:
    1c90:	f8 94       	cli

00001c92 <__stop_program>:
    1c92:	ff cf       	rjmp	.-2      	; 0x1c92 <__stop_program>
